/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ListTestInterface extends utils.Interface {
  functions: {
    "addItem(address,bytes32)": FunctionFragment;
    "createNewList(address)": FunctionFragment;
    "getListHead(address)": FunctionFragment;
    "getListItems(address)": FunctionFragment;
    "getListLength(address)": FunctionFragment;
    "getListTail(address)": FunctionFragment;
    "getTail(address)": FunctionFragment;
    "lists(address)": FunctionFragment;
    "popItem(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addItem",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewList",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getListHead", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getListItems",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getListLength",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getListTail", values: [string]): string;
  encodeFunctionData(functionFragment: "getTail", values: [string]): string;
  encodeFunctionData(functionFragment: "lists", values: [string]): string;
  encodeFunctionData(functionFragment: "popItem", values: [string]): string;

  decodeFunctionResult(functionFragment: "addItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createNewList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListTail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTail", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "popItem", data: BytesLike): Result;

  events: {};
}

export interface ListTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ListTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addItem(
      addr: string,
      item: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNewList(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getListHead(addr: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getListItems(addr: string, overrides?: CallOverrides): Promise<[string[]]>;

    getListLength(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getListTail(addr: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTail(addr: string, overrides?: CallOverrides): Promise<[string]>;

    lists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _length: BigNumber;
        _tail: BigNumber;
        _head: BigNumber;
      }
    >;

    popItem(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addItem(
    addr: string,
    item: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNewList(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getListHead(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  getListItems(addr: string, overrides?: CallOverrides): Promise<string[]>;

  getListLength(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  getListTail(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTail(addr: string, overrides?: CallOverrides): Promise<string>;

  lists(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _length: BigNumber;
      _tail: BigNumber;
      _head: BigNumber;
    }
  >;

  popItem(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addItem(
      addr: string,
      item: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createNewList(addr: string, overrides?: CallOverrides): Promise<void>;

    getListHead(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getListItems(addr: string, overrides?: CallOverrides): Promise<string[]>;

    getListLength(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getListTail(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTail(addr: string, overrides?: CallOverrides): Promise<string>;

    lists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _length: BigNumber;
        _tail: BigNumber;
        _head: BigNumber;
      }
    >;

    popItem(addr: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addItem(
      addr: string,
      item: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNewList(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getListHead(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getListItems(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getListLength(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getListTail(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTail(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    lists(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    popItem(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addItem(
      addr: string,
      item: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNewList(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getListHead(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListItems(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListLength(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListTail(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTail(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    popItem(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

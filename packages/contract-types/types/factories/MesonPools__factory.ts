/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MesonPools, MesonPoolsInterface } from "../MesonPools";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "SwapLocked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapReleased",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "challenge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoinType",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "lockingSwaps",
    outputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "until",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "metaAmount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "release",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalDemandFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalSupplyFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x61010060405260526080818152906112b060a039805160209182012060408051808201825260088152674d65736f6e20466960c01b908401528051808201825260018152603160f81b908401528051928301919091527fe127d7b8d403871d7ed6b19024db4422e92aee79823ba78ad61e52ee2a5f9b98908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c001604051602081830303815290604052805190602001206000553480156100d457600080fd5b506111cc806100e46000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806394149c1a1161007157806394149c1a146101fb578063a8f81b1a14610210578063d2ef7398146100cc578063ec9b5b3a14610239578063f3fef3a31461024c578063f7888aec1461025f57600080fd5b806347e7ef24146100b95780634a198f2c146100ce5780634e1389ed146100e157806361565d25146100f457806368c4ac26146101305780636bb39ae014610163575b600080fd5b6100cc6100c7366004611005565b61028a565b005b6100cc6100dc36600461106a565b61033d565b6100cc6100ef3660046110c1565b6105eb565b61011d610102366004610fb0565b6001600160a01b031660009081526004602052604090205490565b6040519081526020015b60405180910390f35b61015361013e366004610fb0565b60016020526000908152604090205460ff1681565b6040519015158152602001610127565b6101b8610171366004611051565b6007602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b0394851695938516949283169391929091169086565b604080516001600160a01b0397881681529587166020870152938616938501939093526060840191909152909216608082015260a081019190915260c001610127565b604051638000000160e01b8152602001610127565b61011d61021e366004610fb0565b6001600160a01b031660009081526005602052604090205490565b6100cc610247366004611051565b61082d565b6100cc61025a366004611005565b6109ed565b61011d61026d366004610fd2565b600660209081526000928352604080842090915290825290205481565b6001600160a01b038216600090815260016020526040902054829060ff166102cd5760405162461bcd60e51b81526004016102c49061114f565b60405180910390fd5b6001600160a01b0383166000908152600660209081526040808320338085529252909120546102fc9084610a3e565b6001600160a01b0380861660009081526006602090815260408083209386168352929052205561032c8484610a5f565b610337848285610aa2565b50505050565b6001600160a01b038216600090815260016020526040902054829060ff166103775760405162461bcd60e51b81526004016102c49061114f565b600084116103c75760405162461bcd60e51b815260206004820181905260248201527f616d6f756e74206d7573742062652067726561746572207468616e207a65726f60448201526064016102c4565b600086815260076020526040902060030154156104265760405162461bcd60e51b815260206004820152601b60248201527f6c6f636b696e67207377617020616c726561647920657869737473000000000060448201526064016102c4565b6001600160a01b0383166000908152600660209081526040808320338085529252909120548511156104915760405162461bcd60e51b8152602060048201526014602482015273696e73756666696369656e742062616c616e636560601b60448201526064016102c4565b6001600160a01b038085166000908152600660209081526040808320938516835292905220546104c2908690611192565b6001600160a01b0380861660008181526006602090815260408083208786168085529083529281902095909555845160c0810186528b851681529081019190915292830152606082018790528416608082015260a081016105256104b04261117a565b9052600088815260076020908152604091829020835181546001600160a01b03199081166001600160a01b0392831617835585840151600184018054831691841691909117905585850151600284018054831691841691909117905560608601516003840155608086015160048401805490921690831617905560a09094015160059091015581518a8152928416908301527faad18fe672f0d6b379db88b0e1176f10cc003e9a4d8ed142a90c0b6f8bedb8de910160405180910390a150505050505050565b6000858152600760208181526040808420815160c08101835281546001600160a01b039081168252600183015481168286015260028301548116938201939093526003820154606082018190526004830154909316608082015260059091015460a0820152938990529190526106995760405162461bcd60e51b81526020600482015260136024820152721cddd85c08191bd95cc81b9bdd08195e1a5cdd606a1b60448201526064016102c4565b806060015185111561070a5760405162461bcd60e51b815260206004820152603460248201527f72656c6561736520616d6f756e742063616e6e6f742062652067726561746572604482015273081d1a185b881b1bd8dada5b99c8185b5bdd5b9d60621b60648201526084016102c4565b61071b868260000151868686610b2a565b604081015160208201516080830151606084015188101561079c576001600160a01b0380841660009081526006602090815260408083209386168352929052205460608501516107759190610770908b610d03565b610a3e565b6001600160a01b038085166000908152600660209081526040808320938716835292905220555b600089815260076020526040812080546001600160a01b031990811682556001820180548216905560028201805482169055600382018390556004820180549091169055600501556107ef83828a610d1e565b6040518981527fe8aa10932e72fe72aa2f3879a4dd799b95f5fbe728be1be0609e5baa14ec40f49060200160405180910390a1505050505050505050565b6000818152600760205260409020600301546108815760405162461bcd60e51b81526020600482015260136024820152721cddd85c08191bd95cc81b9bdd08195e1a5cdd606a1b60448201526064016102c4565b600081815260076020908152604091829020825160c08101845281546001600160a01b0390811682526001830154811693820193909352600282015483169381019390935260038101546060840152600481015490911660808301526005015460a0820181905242116109365760405162461bcd60e51b815260206004820152601960248201527f5468652073776170206973207374696c6c20696e206c6f636b0000000000000060448201526064016102c4565b60408082015160608301516020808501516001600160a01b038085166000908152600684528681209183168152925293902054919290916109779083610a3e565b6001600160a01b039384166000908152600660209081526040808320949096168252928352848120919091559485526007905250822080546001600160a01b0319908116825560018201805482169055600282018054821690556003820184905560048201805490911690556005019190915550565b6001600160a01b038216600090815260016020526040902054829060ff16610a275760405162461bcd60e51b81526004016102c49061114f565b33610a328484610e5b565b61033781828686610ed2565b600082610a4b838261117a565b9150811015610a5957600080fd5b92915050565b6001600160a01b038216600090815260046020526040902054610a829082610a3e565b6001600160a01b0390921660009081526004602052604090209190915550565b6040516323b872dd60e01b81526001600160a01b038381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b158015610af257600080fd5b505af1158015610b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610337919061102f565b6001600160a01b038416610b805760405162461bcd60e51b815260206004820152601e60248201527f7369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016102c4565b604080518082018252601b81527f5377617052656c656173652862797465733332207377617049642900000000006020918201529051600091610bf0917ffb1f98601c589a04e2ceca199119c17bd547893fffb8d088acdae5aff4f9b19d91899101918252602082015260400190565b6040516020818303038152906040528051906020012090506000805482604051602001610c3492919061190160f01b81526002810192909252602282015260420190565b60408051601f1981840301815282825280516020918201206000845290830180835281905260ff8616918301919091526060820187905260808201869052915060019060a0016020604051602081039080840390855afa158015610c9c573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614610cfa5760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b60448201526064016102c4565b50505050505050565b600082610d108382611192565b9150811115610a5957600080fd5b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b17905291516000928392871691610daa9190611114565b6000604051808303816000865af19150503d8060008114610de7576040519150601f19603f3d011682016040523d82523d6000602084013e610dec565b606091505b5091509150818015610e16575080511580610e16575080806020019051810190610e16919061102f565b610e545760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b60448201526064016102c4565b5050505050565b6001600160a01b038216600090815260046020526040902054811115610eaf5760405162461bcd60e51b815260206004820152600960248201526837bb32b9323930bbb760b91b60448201526064016102c4565b6001600160a01b038216600090815260046020526040902054610a829082610d03565b6001600160a01b03808316600090815260066020908152604080832093871683529290522054811115610f335760405162461bcd60e51b815260206004820152600960248201526837bb32b9323930bbb760b91b60448201526064016102c4565b6001600160a01b03808316600090815260066020908152604080832093871683529290522054610f639082610d03565b6001600160a01b03808416600090815260066020908152604080832093881683529290522055610337828583610d1e565b80356001600160a01b0381168114610fab57600080fd5b919050565b600060208284031215610fc257600080fd5b610fcb82610f94565b9392505050565b60008060408385031215610fe557600080fd5b610fee83610f94565b9150610ffc60208401610f94565b90509250929050565b6000806040838503121561101857600080fd5b61102183610f94565b946020939093013593505050565b60006020828403121561104157600080fd5b81518015158114610fcb57600080fd5b60006020828403121561106357600080fd5b5035919050565b600080600080600060a0868803121561108257600080fd5b8535945061109260208701610f94565b9350604086013592506110a760608701610f94565b91506110b560808701610f94565b90509295509295909350565b600080600080600060a086880312156110d957600080fd5b85359450602086013593506040860135925060608601359150608086013560ff8116811461110657600080fd5b809150509295509295909350565b6000825160005b81811015611135576020818601810151858301520161111b565b81811115611144576000828501525b509190910192915050565b6020808252601190820152703ab739bab83837b93a32b2103a37b5b2b760791b604082015260600190565b6000821982111561118d5761118d6111a9565b500190565b6000828210156111a4576111a46111a9565b500390565b634e487b7160e01b600052601160045260246000fdfea164736f6c6343000806000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";

type MesonPoolsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonPoolsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonPools__factory extends ContractFactory {
  constructor(...args: MesonPoolsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonPools> {
    return super.deploy(overrides || {}) as Promise<MesonPools>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonPools {
    return super.attach(address) as MesonPools;
  }
  connect(signer: Signer): MesonPools__factory {
    return super.connect(signer) as MesonPools__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonPoolsInterface {
    return new utils.Interface(_abi) as MesonPoolsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonPools {
    return new Contract(address, _abi, signerOrProvider) as MesonPools;
  }
}

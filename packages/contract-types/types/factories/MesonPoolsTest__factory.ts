/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonPoolsTest,
  MesonPoolsTestInterface,
} from "../MesonPoolsTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapLocked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapReleased",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    name: "addressOfIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint48",
        name: "balanceIndex",
        type: "uint48",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint48",
        name: "balanceIndex",
        type: "uint48",
      },
    ],
    name: "depositAndRegister",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoinType",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "getLockedSwap",
    outputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "uint40",
        name: "until",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "hasLockedSwap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "indexOfAddress",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "indexOfToken",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "domainHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "domainHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "release",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "tokenForIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "domainHash",
        type: "bytes32",
      },
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161196738038061196783398101604081905261002f916100a0565b6001600160a01b03166000818152602081815260408083208054600160ff199182168117909255600284529184208054909216909155918052527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4980546001600160a01b03191690911790556100d0565b6000602082840312156100b257600080fd5b81516001600160a01b03811681146100c957600080fd5b9392505050565b611888806100df6000396000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c806393b0719d1161008c578063b3df5b3611610066578063b3df5b3614610311578063d3705a921461036c578063f7888aec1461037f578063ff378719146103b357600080fd5b806393b0719d146102bd57806394149c1a146102d05780639432984f146102fe57600080fd5b80632335093c116100c85780632335093c146101fa5780632d6cd35a146102455780638befc1c1146102975780639033ed08146102aa57600080fd5b8062c2a48c146100ee57806304fd4ab0146101035780631aba3a55146101bd575b600080fd5b6101016100fc3660046116cf565b6103ec565b005b61017e610111366004611628565b60009081526007602090815260408083205464ffffffffff60a082901c8116855260059093529220547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83169373ffffffffffffffffffffffffffffffffffffffff9091169260c81c90911690565b6040805173ffffffffffffffffffffffffffffffffffffffff948516815293909216602084015264ffffffffff16908201526060015b60405180910390f35b6101e46101cb3660046115b1565b60046020526000908152604090205464ffffffffff1681565b60405164ffffffffff90911681526020016101b4565b6102336102083660046115b1565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b60405160ff90911681526020016101b4565b610287610253366004611628565b6000908152600760205260409020547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16151590565b60405190151581526020016101b4565b6101016102a53660046116cf565b610540565b6101016102b8366004611641565b610885565b6101016102cb3660046116ad565b6109bc565b6040517f8000003c0000000000000000000000000000000000000000000000000000000081526020016101b4565b61010161030c366004611683565b610bc2565b61034761031f366004611727565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b4565b61010161037a366004611641565b610d1d565b61039261038d3660046115d3565b611016565b6040516fffffffffffffffffffffffffffffffff90911681526020016101b4565b6103476103c136600461174e565b60ff1660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60006103f88787611087565b6000818152600760205260409020549091507dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff168061047c5760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f742065786973740000000000000000000000000060448201526064015b60405180910390fd5b61048b8284898989898761110f565b60ff600889901c1660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff166104c7818560808c901c6112ac565b6000838152600760205260409081902080547fffff000000000000000000000000000000000000000000000000000000000000169055517fe8aa10932e72fe72aa2f3879a4dd799b95f5fbe728be1be0609e5baa14ec40f49061052d9085815260200190565b60405180910390a1505050505050505050565b600061054c8787611087565b6000818152600760205260409020549091507dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16156105cb5760405162461bcd60e51b815260206004820152601360248201527f5377617020616c726561647920657869737473000000000000000000000000006044820152606401610473565b60408051600081526020810180835283905260ff851691810191909152606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561061e573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146106a25760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610473565b3360009081526004602052604090205464ffffffffff168061072c5760405162461bcd60e51b815260206004820152602f60248201527f43616c6c6572206e6f7420726567697374657265642e2043616c6c206465706f60448201527f736974416e6452656769737465722e00000000000000000000000000000000006064820152608401610473565b6000808061073c6104b0426117d8565b6020878152600c86815260088e901c600790815260008051925191859052835165ffffffffffff8316825260069094526040908190205492901c965094509192509061079a906fffffffffffffffffffffffffffffffff168561142b565b65ffffffffffff8416600090815260066020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9590951694909417909355888252600781529082902080547fffff000000000000000000000000000000000000000000000000000000000000167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851617905590518781527f4b9652d234ab744ed655916a0c1ddd3e9d02be9a04f7aee8b0bf1e8dfce0173a910160405180910390a1505050505050505050505050565b6000826fffffffffffffffffffffffffffffffff16116108e75760405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606401610473565b65ffffffffffff811660009081526006602052604090205461091b906fffffffffffffffffffffffffffffffff168361146a565b65ffffffffffff8216600090815260066020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9590951694909417909355602884901c60ff1682526001905220546109b89073ffffffffffffffffffffffffffffffffffffffff1633846fffffffffffffffffffffffffffffffff166114a9565b5050565b60006109c88383611087565b6000818152600760205260409020549091507dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1680610a475760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f74206578697374000000000000000000000000006044820152606401610473565b807dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660c842901b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1611610ada5760405162461bcd60e51b815260206004820152601260248201527f53776170207374696c6c20696e206c6f636b00000000000000000000000000006044820152606401610473565b65ff0000000000602085811b9190911664ffffffffff60a084901c161760008181526006909252604090912054608086901c91600887901c91610b2f906fffffffffffffffffffffffffffffffff168461146a565b65ffffffffffff91909116600090815260066020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff90951694909417909355958152600790955290932080547fffff0000000000000000000000000000000000000000000000000000000000001690555050505050565b3360008181526004602052604090205464ffffffffff1680610c4c5760405162461bcd60e51b815260206004820152602e60248201527f43616c6c6572206e6f7420726567697374657265642e2043616c6c206465706f60448201527f736974416e6452656769737465720000000000000000000000000000000000006064820152608401610473565b65ff0000000000602884901b1664ffffffffff821617600081815260066020526040902054610c8d906fffffffffffffffffffffffffffffffff168661142b565b65ffffffffffff8216600090815260066020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff95861617905560ff881683526001909152902054610d169173ffffffffffffffffffffffffffffffffffffffff90911690859088166112ac565b5050505050565b6000826fffffffffffffffffffffffffffffffff1611610d7f5760405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606401610473565b338164ffffffffff8116610dd55760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f742075736520302061732070726f766964657220696e64657800006044820152606401610473565b64ffffffffff811660009081526005602052604090205473ffffffffffffffffffffffffffffffffffffffff1615610e4f5760405162461bcd60e51b815260206004820152601860248201527f496e64657820616c7265616479207265676973746572656400000000000000006044820152606401610473565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604090205464ffffffffff1615610ec95760405162461bcd60e51b815260206004820152601a60248201527f4164647265737320616c726561647920726567697374657265640000000000006044820152606401610473565b64ffffffffff8116600081815260056020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff881690811790915583526004825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001690941790935565ffffffffffff86168252600690522054610f83906fffffffffffffffffffffffffffffffff168561146a565b65ffffffffffff8416600090815260066020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff958616179055602887901c60ff16835260019091529020546110109173ffffffffffffffffffffffffffffffffffffffff90911690849087166114a9565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600260209081526040808320549385168352600482528083205464ffffffffff1660289490941b65ff0000000000169390931782526006905220546fffffffffffffffffffffffffffffffff165b92915050565b604080518082018252601c81527f53776170526571756573742875696e7432353620656e636f646564290000000060209182015281517f9e30b23744f36fc02f504355e3ffa6d1fda34e5ac9e3c78a1d6e7dffbc9c57266000818152928690529282206022529091906019835360018053836002526042600020925080604052505092915050565b60006040518060600160405280602b8152602001611851602b91398051602090910120905073ffffffffffffffffffffffffffffffffffffffff82166111975760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d707479206164647265737300006044820152606401610473565b6000604051886000526014600c20604052826000528960205260606000206022526019600053600180536002889052604260009081209082526020820160408181529082905260ff8716908301526060820188905260808201879052915060019060a0016020604051602081039080840390855afa15801561121d573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112a15760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610473565b505050505050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283928716916113739190611769565b6000604051808303816000865af19150503d80600081146113b0576040519150601f19603f3d011682016040523d82523d6000602084013e6113b5565b606091505b50915091508180156113df5750805115806113df5750808060200190518101906113df9190611606565b610d165760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610473565b60006fffffffffffffffffffffffffffffffff831661144a83856117f0565b9150816fffffffffffffffffffffffffffffffff16111561108157600080fd5b60006fffffffffffffffffffffffffffffffff831661148983856117a4565b9150816fffffffffffffffffffffffffffffffff16101561108157600080fd5b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b15801561151f57600080fd5b505af1158015611533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110109190611606565b803573ffffffffffffffffffffffffffffffffffffffff8116811461157b57600080fd5b919050565b80356fffffffffffffffffffffffffffffffff8116811461157b57600080fd5b803560ff8116811461157b57600080fd5b6000602082840312156115c357600080fd5b6115cc82611557565b9392505050565b600080604083850312156115e657600080fd5b6115ef83611557565b91506115fd60208401611557565b90509250929050565b60006020828403121561161857600080fd5b815180151581146115cc57600080fd5b60006020828403121561163a57600080fd5b5035919050565b6000806040838503121561165457600080fd5b61165d83611580565b9150602083013565ffffffffffff8116811461167857600080fd5b809150509250929050565b6000806040838503121561169657600080fd5b61169f83611580565b91506115fd602084016115a0565b600080604083850312156116c057600080fd5b50508035926020909101359150565b60008060008060008060c087890312156116e857600080fd5b8635955060208701359450604087013593506060870135925061170d608088016115a0565b915061171b60a08801611557565b90509295509295509295565b60006020828403121561173957600080fd5b813564ffffffffff811681146115cc57600080fd5b60006020828403121561176057600080fd5b6115cc826115a0565b6000825160005b8181101561178a5760208186018101518583015201611770565b81811115611799576000828501525b509190910192915050565b60006fffffffffffffffffffffffffffffffff8083168185168083038211156117cf576117cf611821565b01949350505050565b600082198211156117eb576117eb611821565b500190565b60006fffffffffffffffffffffffffffffffff8381169083168181101561181957611819611821565b039392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfe5377617052656c656173652862797465733332207377617049642c627974657320726563697069656e7429a164736f6c6343000806000a";

type MesonPoolsTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonPoolsTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonPoolsTest__factory extends ContractFactory {
  constructor(...args: MesonPoolsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonPoolsTest> {
    return super.deploy(token, overrides || {}) as Promise<MesonPoolsTest>;
  }
  getDeployTransaction(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  attach(address: string): MesonPoolsTest {
    return super.attach(address) as MesonPoolsTest;
  }
  connect(signer: Signer): MesonPoolsTest__factory {
    return super.connect(signer) as MesonPoolsTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonPoolsTestInterface {
    return new utils.Interface(_abi) as MesonPoolsTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonPoolsTest {
    return new Contract(address, _abi, signerOrProvider) as MesonPoolsTest;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonPoolsTest,
  MesonPoolsTestInterface,
} from "../MesonPoolsTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "SwapLocked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapReleased",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "addTokenToSwapList",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "metaAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "inToken",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "outToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "ts",
        type: "uint256",
      },
    ],
    name: "challenge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentChain",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "isSwapLocked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedSwap",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "lockingSwaps",
    outputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "until",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "metaAmount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "release",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalDemandFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalSupplyFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x61010060405260526080818152906117ef60a039805160209182012060408051808201825260088152674d65736f6e20466960c01b90840152805180820182526001808252603160f81b918501919091528151938401929092527fe127d7b8d403871d7ed6b19024db4422e92aee79823ba78ad61e52ee2a5f9b98908301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606083015260808201523060a082015260c001604051602081830303815290604052805190602001206000553480156100d757600080fd5b50611708806100e76000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806372cbf72e11610097578063d23d1c7611610066578063d23d1c76146102b3578063ec9b5b3a146102c6578063f3fef3a3146102d9578063f7888aec146102ec57600080fd5b806372cbf72e1461024b5780637b53c5e314610260578063a8f81b1a14610273578063c68596011461029c57600080fd5b80634e1389ed116100d35780634e1389ed1461013657806361565d251461014957806368c4ac26146101805780636bb39ae0146101b357600080fd5b80632d675a13146100fa5780633408e4701461010f57806347e7ef2414610123575b600080fd5b61010d610108366004611573565b610317565b005b604051600181526020015b60405180910390f35b61010d61013136600461144f565b6106ea565b61010d6101443660046114b4565b610794565b610172610157366004611351565b6001600160a01b031660009081526004602052604090205490565b60405190815260200161011a565b6101a361018e366004611351565b60016020526000908152604090205460ff1681565b604051901515815260200161011a565b6102086101c136600461149b565b6007602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b0394851695938516949283169391929091169086565b604080516001600160a01b0397881681529587166020870152938616938501939093526060840191909152909216608082015260a081019190915260c00161011a565b604051632000000f60e21b815260200161011a565b6101a361026e36600461149b565b6109ec565b610172610281366004611351565b6001600160a01b031660009081526005602052604090205490565b61010d6102aa3660046113a6565b50505050505050565b61010d6102c1366004611351565b610a07565b61010d6102d436600461149b565b610a13565b61010d6102e736600461144f565b610b7a565b6101726102fa366004611373565b600660209081526000928352604080842090915290825290205481565b6001600160a01b038216600090815260016020526040902054829060ff1661035a5760405162461bcd60e51b81526004016103519061160c565b60405180910390fd5b600080600061036887610bcb565b925092509250600083116103be5760405162461bcd60e51b815260206004820181905260248201527f616d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152606401610351565b6040516bffffffffffffffffffffffff19606088901b166020820152829060340160405160208183030381529060405280519060200120146104395760405162461bcd60e51b81526020600482015260146024820152730e8ded6cadc40c8decae640dcdee840dac2e8c6d60631b6044820152606401610351565b6040516bffffffffffffffffffffffff19606087901b166020820152819060340160405160208183030381529060405280519060200120146104bd5760405162461bcd60e51b815260206004820152601860248201527f726563697069656e7420646f6573206e6f74206d6174636800000000000000006044820152606401610351565b6001600160a01b0386166000908152600660209081526040808320338085529252909120548411156105285760405162461bcd60e51b8152602060048201526014602482015273696e73756666696369656e742062616c616e636560601b6044820152606401610351565b8751602089012061054a81600090815260076020526040902060030154151590565b1561058d5760405162461bcd60e51b81526020600482015260136024820152721cddd85c08185b1c9958591e481b1bd8dad959606a1b6044820152606401610351565b6001600160a01b038089166000908152600660209081526040808320938616835292905220546105be90869061164f565b6001600160a01b03808a1660008181526006602090815260408083208886168085529083529281902095909555845160c08101865282815290810191909152928301526060820187905288166080820152429060a081016106216104b084611637565b9052600083815260076020908152604091829020835181546001600160a01b03199081166001600160a01b0392831617835585840151600184018054831691841691909117905585850151600284018054831691841691909117905560608601516003840155608086015160048401805490921690831617905560a0909401516005909101558151858152928616908301527faad18fe672f0d6b379db88b0e1176f10cc003e9a4d8ed142a90c0b6f8bedb8de910160405180910390a150505050505050505050565b6001600160a01b038216600090815260016020526040902054829060ff166107245760405162461bcd60e51b81526004016103519061160c565b6001600160a01b0383166000908152600660209081526040808320338085529252909120546107539084610c71565b6001600160a01b038086166000908152600660209081526040808320938616835292905220556107838484610c8c565b61078e848285610ccf565b50505050565b6000858152600760208181526040808420815160c08101835281546001600160a01b039081168252600183015481168286015260028301548116938201939093526003820154606082018190526004830154909316608082015260059091015460a0820152938990529190526108585760405162461bcd60e51b8152602060048201526024808201527f6e6f206c6f636b696e67207377617020666f756e6420666f7220746865207377604482015263185c125960e21b6064820152608401610351565b80606001518511156108c95760405162461bcd60e51b815260206004820152603460248201527f72656c6561736520616d6f756e742063616e6e6f742062652067726561746572604482015273081d1a185b881b1bd8dada5b99c8185b5bdd5b9d60621b6064820152608401610351565b6108da868260000151868686610d57565b604081015160208201516080830151606084015188101561095b576001600160a01b038084166000908152600660209081526040808320938616835292905220546060850151610934919061092f908b610df4565b610c71565b6001600160a01b038085166000908152600660209081526040808320938716835292905220555b600089815260076020526040812080546001600160a01b031990811682556001820180548216905560028201805482169055600382018390556004820180549091169055600501556109ae83828a610e0f565b6040518981527fe8aa10932e72fe72aa2f3879a4dd799b95f5fbe728be1be0609e5baa14ec40f49060200160405180910390a1505050505050505050565b60008181526007602052604081206003015415155b92915050565b610a1081610f4c565b50565b60008181526007602052604090206005810154600282015460019092015442926001600160a01b03908116911682610a7e5760405162461bcd60e51b815260206004820152600e60248201526d1cddd85c081b9bdd08199bdd5b9960921b6044820152606401610351565b828411610ac35760405162461bcd60e51b8152602060048201526013602482015272151a19481cddd85c081a5cc81b1bd8dada5959606a1b6044820152606401610351565b6001600160a01b038083166000908152600660209081526040808320938516835292815282822054888352600790915291902060030154610b049190610c71565b6001600160a01b0392831660009081526006602090815260408083209490951682529283528381209190915594855260079052832080546001600160a01b031990811682556001820180548216905560028201805482169055600382018590556004820180549091169055600501929092555050565b6001600160a01b038216600090815260016020526040902054829060ff16610bb45760405162461bcd60e51b81526004016103519061160c565b33610bbf8484610fc9565b61078e81828686611040565b600080600080600080600087806020019051810190610bea9190611507565b96509650509550505093506040518060a001604052806069815260200161169360699139805190602001208414610c635760405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964207377617020726571756573742074797065686173680000006044820152606401610351565b919790965090945092505050565b600082610c7e8382611637565b9150811015610a0157600080fd5b6001600160a01b038216600090815260046020526040902054610caf9082610c71565b6001600160a01b0390921660009081526004602052604090209190915550565b6040516323b872dd60e01b81526001600160a01b038381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b158015610d1f57600080fd5b505af1158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190611479565b604080518082018252601b81527f5377617052656c656173652862797465733332207377617049642900000000006020918201529051600091610dc7917ffb1f98601c589a04e2ceca199119c17bd547893fffb8d088acdae5aff4f9b19d91899101918252602082015260400190565b604051602081830303815290604052805190602001209050610dec8186868686611102565b505050505050565b600082610e01838261164f565b9150811115610a0157600080fd5b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b17905291516000928392871691610e9b91906115d1565b6000604051808303816000865af19150503d8060008114610ed8576040519150601f19603f3d011682016040523d82523d6000602084013e610edd565b606091505b5091509150818015610f07575080511580610f07575080806020019051810190610f079190611479565b610f455760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b6044820152606401610351565b5050505050565b6001600160a01b0381166000818152600160208181526040808420805460ff19168417905580516080810182528481528083018581528183018681526060838101818152988852600380875294909720835181559151958201959095559351600285015594518051949594610f4593928501929190910190611248565b6001600160a01b03821660009081526004602052604090205481111561101d5760405162461bcd60e51b815260206004820152600960248201526837bb32b9323930bbb760b91b6044820152606401610351565b6001600160a01b038216600090815260046020526040902054610caf9082610df4565b6001600160a01b038083166000908152600660209081526040808320938716835292905220548111156110a15760405162461bcd60e51b815260206004820152600960248201526837bb32b9323930bbb760b91b6044820152606401610351565b6001600160a01b038083166000908152600660209081526040808320938716835292905220546110d19082610df4565b6001600160a01b0380841660009081526006602090815260408083209388168352929052205561078e828583610e0f565b6000805460405161190160f01b602082015260228101919091526042810187905260620160408051601f19818403018152919052805160209091012090506001600160a01b0385166111965760405162461bcd60e51b815260206004820152601e60248201527f7369676e65722063616e6e6f7420626520656d707479206164647265737300006044820152606401610351565b60408051600081526020810180835283905260ff841691810191909152606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156111e9573d6000803e3d6000fd5b505050602060405103516001600160a01b0316856001600160a01b031614610dec5760405162461bcd60e51b8152602060048201526012602482015271696e76616c6964207369676e61747572657360701b6044820152606401610351565b828054828255906000526020600020908101928215611283579160200282015b82811115611283578251825591602001919060010190611268565b5061128f929150611293565b5090565b5b8082111561128f5760008155600101611294565b80356001600160a01b03811681146112bf57600080fd5b919050565b600082601f8301126112d557600080fd5b813567ffffffffffffffff808211156112f0576112f061167c565b604051601f8301601f19908116603f011681019082821181831017156113185761131861167c565b8160405283815286602085880101111561133157600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561136357600080fd5b61136c826112a8565b9392505050565b6000806040838503121561138657600080fd5b61138f836112a8565b915061139d602084016112a8565b90509250929050565b600080600080600080600060e0888a0312156113c157600080fd5b6113ca886112a8565b9650602088013567ffffffffffffffff808211156113e757600080fd5b6113f38b838c016112c4565b975060408a0135965060608a013591508082111561141057600080fd5b5061141d8a828b016112c4565b94505061142c608089016112a8565b925061143a60a089016112a8565b915060c0880135905092959891949750929550565b6000806040838503121561146257600080fd5b61146b836112a8565b946020939093013593505050565b60006020828403121561148b57600080fd5b8151801515811461136c57600080fd5b6000602082840312156114ad57600080fd5b5035919050565b600080600080600060a086880312156114cc57600080fd5b85359450602086013593506040860135925060608601359150608086013560ff811681146114f957600080fd5b809150509295509295909350565b600080600080600080600060e0888a03121561152257600080fd5b87519650602088015195506040880151945060608801519350608088015163ffffffff60e01b8116811461155557600080fd5b8093505060a0880151915060c0880151905092959891949750929550565b60008060006060848603121561158857600080fd5b833567ffffffffffffffff81111561159f57600080fd5b6115ab868287016112c4565b9350506115ba602085016112a8565b91506115c8604085016112a8565b90509250925092565b6000825160005b818110156115f257602081860181015185830152016115d8565b81811115611601576000828501525b509190910192915050565b6020808252601190820152703ab739bab83837b93a32b2103a37b5b2b760791b604082015260600190565b6000821982111561164a5761164a611666565b500190565b60008282101561166157611661611666565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe53776170526571756573742875696e743235362065787069726554732c627974657320696e546f6b656e2c75696e7432353620616d6f756e742c627974657334206f7574436861696e2c6279746573206f7574546f6b656e2c627974657320726563697069656e7429a164736f6c6343000806000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";

type MesonPoolsTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonPoolsTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonPoolsTest__factory extends ContractFactory {
  constructor(...args: MesonPoolsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonPoolsTest> {
    return super.deploy(overrides || {}) as Promise<MesonPoolsTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonPoolsTest {
    return super.attach(address) as MesonPoolsTest;
  }
  connect(signer: Signer): MesonPoolsTest__factory {
    return super.connect(signer) as MesonPoolsTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonPoolsTestInterface {
    return new utils.Interface(_abi) as MesonPoolsTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonPoolsTest {
    return new Contract(address, _abi, signerOrProvider) as MesonPoolsTest;
  }
}

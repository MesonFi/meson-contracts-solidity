/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonPoolsTest,
  MesonPoolsTestInterface,
} from "../MesonPoolsTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapLocked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapReleased",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    name: "addressOfIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint48",
        name: "balanceIndex",
        type: "uint48",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint48",
        name: "balanceIndex",
        type: "uint48",
      },
    ],
    name: "depositAndRegister",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoinType",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "getLockedSwap",
    outputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "uint40",
        name: "until",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "hasLockedSwap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "indexOfAddress",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "indexOfToken",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "domainHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "domainHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "release",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "tokenForIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "domainHash",
        type: "bytes32",
      },
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001cb638038062001cb68339810160408190526200003491620000fa565b6200004181600162000048565b506200012c565b60ff81166200009d5760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f7420757365203020617320746f6b656e20696e6465780000000000604482015260640160405180910390fd5b6001600160a01b03919091166000818152602081815260408083208054600160ff19918216811790925560028452828520805490911660ff90971696871790559483529390529190912080546001600160a01b0319169091179055565b6000602082840312156200010d57600080fd5b81516001600160a01b03811681146200012557600080fd5b9392505050565b611b7a806200013c6000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c806393b0719d11610097578063b3df5b3611610066578063b3df5b3614610331578063d3705a921461038c578063f7888aec1461039f578063ff378719146103d357600080fd5b806393b0719d146102c857806394149c1a146102db5780639432984f14610309578063b002249d1461031c57600080fd5b80632335093c116100d35780632335093c146102055780632d6cd35a146102505780638befc1c1146102a25780639033ed08146102b557600080fd5b8062c2a48c146100f957806304fd4ab01461010e5780631aba3a55146101c8575b600080fd5b61010c6101073660046118c6565b61040c565b005b61018961011c36600461181f565b60009081526007602090815260408083205464ffffffffff60a082901c8116855260059093529220547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83169373ffffffffffffffffffffffffffffffffffffffff9091169260c81c90911690565b6040805173ffffffffffffffffffffffffffffffffffffffff948516815293909216602084015264ffffffffff16908201526060015b60405180910390f35b6101ef6101d63660046117a8565b60046020526000908152604090205464ffffffffff1681565b60405164ffffffffff90911681526020016101bf565b61023e6102133660046117a8565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b60405160ff90911681526020016101bf565b61029261025e36600461181f565b6000908152600760205260409020547dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16151590565b60405190151581526020016101bf565b61010c6102b03660046118c6565b610560565b61010c6102c3366004611838565b6108a5565b61010c6102d63660046118a4565b6109dc565b6040517f8000003c0000000000000000000000000000000000000000000000000000000081526020016101bf565b61010c61031736600461187a565b610be2565b610324610d3d565b6040516101bf919061199b565b61036761033f36600461191e565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bf565b61010c61039a366004611838565b610e8e565b6103b26103ad3660046117ca565b611187565b6040516fffffffffffffffffffffffffffffffff90911681526020016101bf565b6103676103e1366004611945565b60ff1660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b600061041887876111f8565b6000818152600760205260409020549091507dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff168061049c5760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f742065786973740000000000000000000000000060448201526064015b60405180910390fd5b6104ab82848989898987611280565b60ff600889901c1660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff166104e7818560808c901c61141d565b6000838152600760205260409081902080547fffff000000000000000000000000000000000000000000000000000000000000169055517fe8aa10932e72fe72aa2f3879a4dd799b95f5fbe728be1be0609e5baa14ec40f49061054d9085815260200190565b60405180910390a1505050505050505050565b600061056c87876111f8565b6000818152600760205260409020549091507dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16156105eb5760405162461bcd60e51b815260206004820152601360248201527f5377617020616c726561647920657869737473000000000000000000000000006044820152606401610493565b60408051600081526020810180835283905260ff851691810191909152606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561063e573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146106c25760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610493565b3360009081526004602052604090205464ffffffffff168061074c5760405162461bcd60e51b815260206004820152602f60248201527f43616c6c6572206e6f7420726567697374657265642e2043616c6c206465706f60448201527f736974416e6452656769737465722e00000000000000000000000000000000006064820152608401610493565b6000808061075c6104b042611a29565b6020878152600c86815260088e901c600790815260008051925191859052835165ffffffffffff8316825260069094526040908190205492901c96509450919250906107ba906fffffffffffffffffffffffffffffffff168561159c565b65ffffffffffff8416600090815260066020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9590951694909417909355888252600781529082902080547fffff000000000000000000000000000000000000000000000000000000000000167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851617905590518781527f4b9652d234ab744ed655916a0c1ddd3e9d02be9a04f7aee8b0bf1e8dfce0173a910160405180910390a1505050505050505050505050565b6000826fffffffffffffffffffffffffffffffff16116109075760405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606401610493565b65ffffffffffff811660009081526006602052604090205461093b906fffffffffffffffffffffffffffffffff168361161e565b65ffffffffffff8216600090815260066020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9590951694909417909355602884901c60ff1682526001905220546109d89073ffffffffffffffffffffffffffffffffffffffff1633846fffffffffffffffffffffffffffffffff166116a0565b5050565b60006109e883836111f8565b6000818152600760205260409020549091507dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1680610a675760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f74206578697374000000000000000000000000006044820152606401610493565b807dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660c842901b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1611610afa5760405162461bcd60e51b815260206004820152601260248201527f53776170207374696c6c20696e206c6f636b00000000000000000000000000006044820152606401610493565b65ff0000000000602085811b9190911664ffffffffff60a084901c161760008181526006909252604090912054608086901c91600887901c91610b4f906fffffffffffffffffffffffffffffffff168461161e565b65ffffffffffff91909116600090815260066020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff90951694909417909355958152600790955290932080547fffff0000000000000000000000000000000000000000000000000000000000001690555050505050565b3360008181526004602052604090205464ffffffffff1680610c6c5760405162461bcd60e51b815260206004820152602e60248201527f43616c6c6572206e6f7420726567697374657265642e2043616c6c206465706f60448201527f736974416e6452656769737465720000000000000000000000000000000000006064820152608401610493565b65ff0000000000602884901b1664ffffffffff821617600081815260066020526040902054610cad906fffffffffffffffffffffffffffffffff168661159c565b65ffffffffffff8216600090815260066020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff95861617905560ff881683526001909152902054610d369173ffffffffffffffffffffffffffffffffffffffff909116908590881661141d565b5050505050565b606060015b6101008160ff161015610df55760ff811660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16610de3578060ff1660011415610d8c575090565b610d97600182611a72565b60ff1667ffffffffffffffff811115610db257610db2611b13565b604051908082528060200260200182016040528015610ddb578160200160208202803683370190505b509150610df5565b80610ded81611a95565b915050610d42565b60015b8160ff168160ff161015610e895760ff811660009081526001602081905260409091205473ffffffffffffffffffffffffffffffffffffffff16908490610e3f9084611a72565b60ff1681518110610e5257610e52611ae4565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610e8181611a95565b915050610df8565b505090565b6000826fffffffffffffffffffffffffffffffff1611610ef05760405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606401610493565b338164ffffffffff8116610f465760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f742075736520302061732070726f766964657220696e64657800006044820152606401610493565b64ffffffffff811660009081526005602052604090205473ffffffffffffffffffffffffffffffffffffffff1615610fc05760405162461bcd60e51b815260206004820152601860248201527f496e64657820616c7265616479207265676973746572656400000000000000006044820152606401610493565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604090205464ffffffffff161561103a5760405162461bcd60e51b815260206004820152601a60248201527f4164647265737320616c726561647920726567697374657265640000000000006044820152606401610493565b64ffffffffff8116600081815260056020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff881690811790915583526004825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001690941790935565ffffffffffff861682526006905220546110f4906fffffffffffffffffffffffffffffffff168561161e565b65ffffffffffff8416600090815260066020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff958616179055602887901c60ff16835260019091529020546111819173ffffffffffffffffffffffffffffffffffffffff90911690849087166116a0565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600260209081526040808320549385168352600482528083205464ffffffffff1660289490941b65ff0000000000169390931782526006905220546fffffffffffffffffffffffffffffffff165b92915050565b604080518082018252601c81527f53776170526571756573742875696e7432353620656e636f646564290000000060209182015281517f9e30b23744f36fc02f504355e3ffa6d1fda34e5ac9e3c78a1d6e7dffbc9c57266000818152928690529282206022529091906019835360018053836002526042600020925080604052505092915050565b60006040518060600160405280602b8152602001611b43602b91398051602090910120905073ffffffffffffffffffffffffffffffffffffffff82166113085760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d707479206164647265737300006044820152606401610493565b6000604051886000526014600c20604052826000528960205260606000206022526019600053600180536002889052604260009081209082526020820160408181529082905260ff8716908301526060820188905260808201879052915060019060a0016020604051602081039080840390855afa15801561138e573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146114125760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610493565b505050505050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283928716916114e49190611960565b6000604051808303816000865af19150503d8060008114611521576040519150601f19603f3d011682016040523d82523d6000602084013e611526565b606091505b509150915081801561155057508051158061155057508080602001905181019061155091906117fd565b610d365760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610493565b60006fffffffffffffffffffffffffffffffff83166115bb8385611a41565b9150816fffffffffffffffffffffffffffffffff1611156111f25760405162461bcd60e51b815260206004820152600960248201527f756e646572666c6f7700000000000000000000000000000000000000000000006044820152606401610493565b60006fffffffffffffffffffffffffffffffff831661163d83856119f5565b9150816fffffffffffffffffffffffffffffffff1610156111f25760405162461bcd60e51b815260206004820152600860248201527f6f766572666c6f770000000000000000000000000000000000000000000000006044820152606401610493565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b15801561171657600080fd5b505af115801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118191906117fd565b803573ffffffffffffffffffffffffffffffffffffffff8116811461177257600080fd5b919050565b80356fffffffffffffffffffffffffffffffff8116811461177257600080fd5b803560ff8116811461177257600080fd5b6000602082840312156117ba57600080fd5b6117c38261174e565b9392505050565b600080604083850312156117dd57600080fd5b6117e68361174e565b91506117f46020840161174e565b90509250929050565b60006020828403121561180f57600080fd5b815180151581146117c357600080fd5b60006020828403121561183157600080fd5b5035919050565b6000806040838503121561184b57600080fd5b61185483611777565b9150602083013565ffffffffffff8116811461186f57600080fd5b809150509250929050565b6000806040838503121561188d57600080fd5b61189683611777565b91506117f460208401611797565b600080604083850312156118b757600080fd5b50508035926020909101359150565b60008060008060008060c087890312156118df57600080fd5b8635955060208701359450604087013593506060870135925061190460808801611797565b915061191260a0880161174e565b90509295509295509295565b60006020828403121561193057600080fd5b813564ffffffffff811681146117c357600080fd5b60006020828403121561195757600080fd5b6117c382611797565b6000825160005b818110156119815760208186018101518583015201611967565b81811115611990576000828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156119e957835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016119b7565b50909695505050505050565b60006fffffffffffffffffffffffffffffffff808316818516808303821115611a2057611a20611ab5565b01949350505050565b60008219821115611a3c57611a3c611ab5565b500190565b60006fffffffffffffffffffffffffffffffff83811690831681811015611a6a57611a6a611ab5565b039392505050565b600060ff821660ff841680821015611a8c57611a8c611ab5565b90039392505050565b600060ff821660ff811415611aac57611aac611ab5565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe5377617052656c656173652862797465733332207377617049642c627974657320726563697069656e7429a164736f6c6343000806000a";

type MesonPoolsTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonPoolsTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonPoolsTest__factory extends ContractFactory {
  constructor(...args: MesonPoolsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonPoolsTest> {
    return super.deploy(token, overrides || {}) as Promise<MesonPoolsTest>;
  }
  getDeployTransaction(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  attach(address: string): MesonPoolsTest {
    return super.attach(address) as MesonPoolsTest;
  }
  connect(signer: Signer): MesonPoolsTest__factory {
    return super.connect(signer) as MesonPoolsTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonPoolsTestInterface {
    return new utils.Interface(_abi) as MesonPoolsTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonPoolsTest {
    return new Contract(address, _abi, signerOrProvider) as MesonPoolsTest;
  }
}

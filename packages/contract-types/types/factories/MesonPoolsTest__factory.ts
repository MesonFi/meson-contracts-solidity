/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonPoolsTest,
  MesonPoolsTestInterface,
} from "../MesonPoolsTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapLocked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapReleased",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    name: "addressOfIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint48",
        name: "balanceIndex",
        type: "uint48",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint48",
        name: "balanceIndex",
        type: "uint48",
      },
    ],
    name: "depositAndRegister",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
    ],
    name: "getLockedSwap",
    outputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "uint40",
        name: "until",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getShortCoinType",
    outputs: [
      {
        internalType: "bytes2",
        name: "",
        type: "bytes2",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "indexOfAddress",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "indexOfToken",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "mesonFeeCollected",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "release",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "tokenForIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001c8d38038062001c8d8339810160408190526200003491620000e7565b6200004181600162000048565b5062000119565b60ff81166200009d5760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f7420757365203020617320746f6b656e20696e6465780000000000604482015260640160405180910390fd5b6001600160a01b039091166000818152600160209081526040808320805460ff90961660ff19909616861790559382528190529190912080546001600160a01b0319169091179055565b600060208284031215620000fa57600080fd5b81516001600160a01b03811681146200011257600080fd5b9392505050565b611b6480620001296000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063b3df5b3611610097578063eba7fb7711610066578063eba7fb77146102d6578063f1d2ec1d14610304578063f7888aec14610317578063ff3787191461032a57600080fd5b8063b3df5b361461021c578063be18e8a414610277578063ce9247431461028a578063e16a567d1461029d57600080fd5b806360a2da98116100d357806360a2da981461019c5780638f487dc9146101e1578063903d4296146101f4578063b002249d1461020757600080fd5b80631aba3a55146100fa5780632335093c1461013c57806337b90a4f14610187575b600080fd5b61012161010836600461179d565b60026020526000908152604090205464ffffffffff1681565b60405164ffffffffff90911681526020015b60405180910390f35b61017561014a36600461179d565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b60405160ff9091168152602001610133565b61019a6101953660046118e6565b610363565b005b6101af6101aa366004611814565b610420565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835264ffffffffff909116602083015201610133565b61019a6101ef3660046118e6565b61047b565b61019a610202366004611921565b610707565b61020f6107fe565b60405161013391906119c1565b61025261022a366004611944565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610133565b61019a610285366004611837565b61094b565b61019a610298366004611887565b610c07565b6102c86102ab36600461196b565b60281b65ff00000000001660009081526004602052604090205490565b604051908152602001610133565b6040517f02ca0000000000000000000000000000000000000000000000000000000000008152602001610133565b61019a610312366004611814565b610d42565b6102c86103253660046117bf565b610e8a565b61025261033836600461196b565b60ff1660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b600082116103b85760405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f73697469766500000000000000000060448201526064015b60405180910390fd5b65ffffffffffff8116600090815260046020526040812080548492906103df908490611a1b565b909155505060ff602882901c1660009081526020819052604090205461041c9073ffffffffffffffffffffffffffffffffffffffff163384610f1a565b5050565b600080600061042f85856111fa565b60009081526005602090815260408083205464ffffffffff8082168552600390935292205473ffffffffffffffffffffffffffffffffffffffff169760289290921c1695509350505050565b600082116104cb5760405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f73697469766500000000000000000060448201526064016103af565b338164ffffffffff81166105215760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f742075736520302061732070726f766964657220696e646578000060448201526064016103af565b64ffffffffff811660009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff161561059b5760405162461bcd60e51b815260206004820152601860248201527f496e64657820616c72656164792072656769737465726564000000000000000060448201526064016103af565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604090205464ffffffffff16156106155760405162461bcd60e51b815260206004820152601a60248201527f4164647265737320616c7265616479207265676973746572656400000000000060448201526064016103af565b64ffffffffff8116600081815260036020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff881690811790915583526002825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001690941790935565ffffffffffff861682526004905290812080548692906106c4908490611a1b565b909155505060ff602884901c166000908152602081905260409020546107019073ffffffffffffffffffffffffffffffffffffffff168386610f1a565b50505050565b3360008181526002602052604090205464ffffffffff16806107915760405162461bcd60e51b815260206004820152602e60248201527f43616c6c6572206e6f7420726567697374657265642e2043616c6c206465706f60448201527f736974416e64526567697374657200000000000000000000000000000000000060648201526084016103af565b64ffffffffff8116602884901b65ff00000000001617600090815260046020526040812080548692906107c5908490611a70565b909155505060ff83166000908152602081905260409020546107019073ffffffffffffffffffffffffffffffffffffffff16838661125b565b606060015b6101008160ff1610156108b65760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff166108a4578060ff166001141561084d575090565b610858600182611a87565b60ff1667ffffffffffffffff81111561087357610873611b28565b60405190808252806020026020018201604052801561089c578160200160208202803683370190505b5091506108b6565b806108ae81611aaa565b915050610803565b60015b8160ff168160ff1610156109465760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff16836108fc600184611a87565b60ff168151811061090f5761090f611af9565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101528061093e81611aaa565b9150506108b9565b505090565b846102ca6109598260201c90565b61ffff16146109aa5760405162461bcd60e51b815260206004820152601760248201527f53776170206e6f7420666f72207468697320636861696e00000000000000000060448201526064016103af565b60006109b687846111fa565b60008181526005602052604090205490915069ffffffffffffffffffff1615610a215760405162461bcd60e51b815260206004820152601360248201527f5377617020616c7265616479206578697374730000000000000000000000000060448201526064016103af565b610a2e8787878787611477565b3360009081526002602052604090205464ffffffffff1680610ab85760405162461bcd60e51b815260206004820152602f60248201527f43616c6c6572206e6f7420726567697374657265642e2043616c6c206465706f60448201527f736974416e6452656769737465722e000000000000000000000000000000000060648201526084016103af565b6000610ac66104b042611a1b565b9050603089901c64ffffffffff168110610b485760405162461bcd60e51b815260206004820152602560248201527f43616e6e6f74206c6f636b20626563617573652065787069726554732069732060448201527f736f6f6e2e00000000000000000000000000000000000000000000000000000060648201526084016103af565b65ff000000000060108a901b1664ffffffffff8316176000818152600460205260408120805460d08d901c9290610b80908490611a70565b909155505060008481526005602052604080822080547fffffffffffffffffffffffffffffffffffffffffffff000000000000000000001664ffffffffff8716602887901b69ffffffffff00000000001617179055518b917fbfb879c34323c5601fafe832c3a8a1e31e12c288695838726ddeada86034edb491a250505050505050505050565b6000610c1387846111fa565b60008181526005602052604090205490915069ffffffffffffffffffff1680610c7e5760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f742065786973740000000000000000000000000060448201526064016103af565b610c8c8884898989896115e9565b600082815260056020526040812080547fffffffffffffffffffffffffffffffffffffffffffff000000000000000000001690558080610ccc8b60181c90565b60ff16815260208101919091526040016000205473ffffffffffffffffffffffffffffffffffffffff169050610d0c8185610d078c60d01c90565b61125b565b60405189907ffa628b578e095243f0544bfad9255f49d79d03a5bbf6c85875d05a215e247ad290600090a2505050505050505050565b6000610d4e83836111fa565b60008181526005602052604090205490915069ffffffffffffffffffff1680610db95760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f742065786973740000000000000000000000000060448201526064016103af565b42602882901c64ffffffffff1610610e135760405162461bcd60e51b815260206004820152601260248201527f53776170207374696c6c20696e206c6f636b000000000000000000000000000060448201526064016103af565b65ff0000000000601085901b1664ffffffffff8216176000818152600460205260408120805460d088901c9290610e4b908490611a1b565b90915550505060009182525060056020526040902080547fffffffffffffffffffffffffffffffffffffffffffff000000000000000000001690555050565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526001602090815260408083205493851683526002909152812054909160ff169064ffffffffff16801580610edc575060ff8216155b15610eec57600092505050610f14565b64ffffffffff1660289190911b65ff0000000000161760009081526004602052604090205490505b92915050565b73ffffffffffffffffffffffffffffffffffffffff8316610f7d5760405162461bcd60e51b815260206004820152601360248201527f546f6b656e206e6f7420737570706f727465640000000000000000000000000060448201526064016103af565b60008111610fcd5760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f60448201526064016103af565b789f4f2726179a224501d762422c946590d9100000000000000081106110355760405162461bcd60e51b815260206004820152600f60248201527f416d6f756e74206f766572666c6f77000000000000000000000000000000000060448201526064016103af565b60008073ffffffffffffffffffffffffffffffffffffffff85167f23b872dd0000000000000000000000000000000000000000000000000000000085306110818764e8d4a51000611a33565b60405173ffffffffffffffffffffffffffffffffffffffff93841660248201529290911660448301526064820152608401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161113b9190611986565b6000604051808303816000865af19150503d8060008114611178576040519150601f19603f3d011682016040523d82523d6000602084013e61117d565b606091505b50915091508180156111a75750805115806111a75750808060200190518101906111a791906117f2565b6111f35760405162461bcd60e51b815260206004820152601360248201527f7472616e7366657246726f6d206661696c65640000000000000000000000000060448201526064016103af565b5050505050565b6000828260405160200161123d92919091825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b60405160208183030381529060405280519060200120905092915050565b789f4f2726179a224501d762422c946590d9100000000000000081106112c35760405162461bcd60e51b815260206004820152600f60248201527f416d6f756e74206f766572666c6f77000000000000000000000000000000000060448201526064016103af565b60008073ffffffffffffffffffffffffffffffffffffffff85167fa9059cbb000000000000000000000000000000000000000000000000000000008561130e8664e8d4a51000611a33565b60405173ffffffffffffffffffffffffffffffffffffffff90921660248301526044820152606401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516113bf9190611986565b6000604051808303816000865af19150503d80600081146113fc576040519150601f19603f3d011682016040523d82523d6000602084013e611401565b606091505b509150915081801561142b57508051158061142b57508080602001905181019061142b91906117f2565b6111f35760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c6564000000000000000000000000000000000060448201526064016103af565b73ffffffffffffffffffffffffffffffffffffffff81166114da5760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016103af565b6000858152602080822081527f9862d877599564bcd97c37305a7b0fdbe621d9c2a125026f2ad601f754a75abc8083526040808420815194855292840180825283905260ff86169084015260608301879052608083018690529160019060a0016020604051602081039080840390855afa15801561155c573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146115e05760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016103af565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff811661164c5760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016103af565b601485905260008681526034812060209081527f743e50106a7f059b52151dd4ba27a5f6c87b925ddfbdcf1c332e800da4b3df928083526040808420815194855292840180825283905260ff86169084015260608301879052608083018690529160019060a0016020604051602081039080840390855afa1580156116d5573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146117595760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016103af565b5050505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461178757600080fd5b919050565b803560ff8116811461178757600080fd5b6000602082840312156117af57600080fd5b6117b882611763565b9392505050565b600080604083850312156117d257600080fd5b6117db83611763565b91506117e960208401611763565b90509250929050565b60006020828403121561180457600080fd5b815180151581146117b857600080fd5b6000806040838503121561182757600080fd5b823591506117e960208401611763565b600080600080600060a0868803121561184f57600080fd5b85359450602086013593506040860135925061186d6060870161178c565b915061187b60808701611763565b90509295509295909350565b60008060008060008060c087890312156118a057600080fd5b8635955060208701359450604087013593506118be6060880161178c565b92506118cc60808801611763565b91506118da60a08801611763565b90509295509295509295565b600080604083850312156118f957600080fd5b82359150602083013565ffffffffffff8116811461191657600080fd5b809150509250929050565b6000806040838503121561193457600080fd5b823591506117e96020840161178c565b60006020828403121561195657600080fd5b813564ffffffffff811681146117b857600080fd5b60006020828403121561197d57600080fd5b6117b88261178c565b6000825160005b818110156119a7576020818601810151858301520161198d565b818111156119b6576000828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015611a0f57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016119dd565b50909695505050505050565b60008219821115611a2e57611a2e611aca565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a6b57611a6b611aca565b500290565b600082821015611a8257611a82611aca565b500390565b600060ff821660ff841680821015611aa157611aa1611aca565b90039392505050565b600060ff821660ff811415611ac157611ac1611aca565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea164736f6c6343000806000a";

type MesonPoolsTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonPoolsTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonPoolsTest__factory extends ContractFactory {
  constructor(...args: MesonPoolsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonPoolsTest> {
    return super.deploy(token, overrides || {}) as Promise<MesonPoolsTest>;
  }
  getDeployTransaction(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  attach(address: string): MesonPoolsTest {
    return super.attach(address) as MesonPoolsTest;
  }
  connect(signer: Signer): MesonPoolsTest__factory {
    return super.connect(signer) as MesonPoolsTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonPoolsTestInterface {
    return new utils.Interface(_abi) as MesonPoolsTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonPoolsTest {
    return new Contract(address, _abi, signerOrProvider) as MesonPoolsTest;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonPoolsTest,
  MesonPoolsTestInterface,
} from "../MesonPoolsTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "SwapLocked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapReleased",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "addTokenToSwapList",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "challenge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoinType",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "hasLockingSwap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "lockingSwaps",
    outputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "until",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "metaAmount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "domainHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "release",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalDemandFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalSupplyFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x610100604052605260808181529061147960a039805160209182012060408051808201825260088152674d65736f6e20466960c01b908401528051808201825260018152603160f81b908401528051928301919091527fe127d7b8d403871d7ed6b19024db4422e92aee79823ba78ad61e52ee2a5f9b98908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c001604051602081830303815290604052805190602001206000553480156100d457600080fd5b50611395806100e46000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063d23d1c761161008c578063ec9b5b3a11610066578063ec9b5b3a14610281578063f3fef3a314610294578063f7888aec146102a7578063f7d18c5a146102d257600080fd5b8063d23d1c761461025b578063d2ef739814610102578063eb69e4501461026e57600080fd5b80636bb39ae0116100c85780636bb39ae01461017357806394149c1a1461020a578063a8f81b1a1461021f578063c6aea8c71461024857600080fd5b806347e7ef24146100ef57806361565d251461010457806368c4ac2614610140575b600080fd5b6101026100fd36600461116e565b6102e5565b005b61012d610112366004611119565b6001600160a01b031660009081526004602052604090205490565b6040519081526020015b60405180910390f35b61016361014e366004611119565b60016020526000908152604090205460ff1681565b6040519015158152602001610137565b6101c86101813660046111ba565b600760205260009081526040902080546001820154600283015460038401546004909401546001600160a01b039384169492841693909116919067ffffffffffffffff1685565b604080516001600160a01b03968716815294861660208601529290941691830191909152606082015267ffffffffffffffff909116608082015260a001610137565b604051632000000f60e21b8152602001610137565b61012d61022d366004611119565b6001600160a01b031660009081526005602052604090205490565b6101636102563660046111ba565b610398565b610102610269366004611119565b6103b3565b61010261027c366004611219565b6103bf565b61010261028f3660046111ba565b610637565b6101026102a236600461116e565b6107fe565b61012d6102b536600461113b565b600660209081526000928352604080842090915290825290205481565b6101026102e03660046111d3565b61084f565b6001600160a01b038216600090815260016020526040902054829060ff166103285760405162461bcd60e51b815260040161031f906112c1565b60405180910390fd5b6001600160a01b0383166000908152600660209081526040808320338085529252909120546103579084610b02565b6001600160a01b038086166000908152600660209081526040808320938616835292905220556103878484610b1d565b610392848285610b60565b50505050565b60008181526007602052604081206003015415155b92915050565b6103bc81610be8565b50565b6000878152600760208181526040808420815160a08101835281546001600160a01b03908116825260018301548116828601526002830154169281019290925260038101546060830181905260049091015467ffffffffffffffff166080830152938b90529190529061046a5760405162461bcd60e51b81526020600482015260136024820152721cddd85c08191bd95cc81b9bdd08195e1a5cdd606a1b604482015260640161031f565b80606001518611156104db5760405162461bcd60e51b815260206004820152603460248201527f72656c6561736520616d6f756e742063616e6e6f742062652067726561746572604482015273081d1a185b881b1bd8dada5b99c8185b5bdd5b9d60621b606482015260840161031f565b6040516bffffffffffffffffffffffff19606089901b16602082015261052490899060340160405160208183030381529060405280519060200120878460000151888888610c6c565b6040810151602082015160608301518810156105a0576001600160a01b0380831660009081526006602090815260408083209385168352929052205460608401516105799190610574908b610e13565b610b02565b6001600160a01b038084166000908152600660209081526040808320938616835292905220555b60008a815260076020526040812080546001600160a01b031990811682556001820180548216905560028201805490911690556003810191909155600401805467ffffffffffffffff191690556105f8828a8a610e2e565b6040518a81527fe8aa10932e72fe72aa2f3879a4dd799b95f5fbe728be1be0609e5baa14ec40f49060200160405180910390a150505050505050505050565b60008181526007602052604090206003015461068b5760405162461bcd60e51b81526020600482015260136024820152721cddd85c08191bd95cc81b9bdd08195e1a5cdd606a1b604482015260640161031f565b600081815260076020908152604091829020825160a08101845281546001600160a01b03908116825260018301548116938201939093526002820154909216928201929092526003820154606082015260049091015467ffffffffffffffff9081166080830181905242909116116107455760405162461bcd60e51b815260206004820152601960248201527f5468652073776170206973207374696c6c20696e206c6f636b00000000000000604482015260640161031f565b60408082015160608301516020808501516001600160a01b038085166000908152600684528681209183168152925293902054919290916107869083610b02565b6001600160a01b039384166000908152600660209081526040808320949096168252928352848120919091559485526007905250822080546001600160a01b03199081168255600182018054821690556002820180549091169055600381019290925550600401805467ffffffffffffffff19169055565b6001600160a01b038216600090815260016020526040902054829060ff166108385760405162461bcd60e51b815260040161031f906112c1565b336108438484610f64565b61039281828686610fdb565b6001600160a01b038116600090815260016020526040902054819060ff166108895760405162461bcd60e51b815260040161031f906112c1565b600083116108d95760405162461bcd60e51b815260206004820181905260248201527f616d6f756e74206d7573742062652067726561746572207468616e207a65726f604482015260640161031f565b600085815260076020526040902060030154156109385760405162461bcd60e51b815260206004820152601b60248201527f6c6f636b696e67207377617020616c7265616479206578697374730000000000604482015260640161031f565b6001600160a01b0382166000908152600660209081526040808320338085529252909120548411156109a35760405162461bcd60e51b8152602060048201526014602482015273696e73756666696369656e742062616c616e636560601b604482015260640161031f565b6001600160a01b038084166000908152600660209081526040808320938516835292905220546109d4908590611330565b6001600160a01b0380851660008181526006602090815260408083208786168085529083529281902095909555845160a081018652938a168452830152918101919091526060810185905260808101610a2f6104b042611304565b67ffffffffffffffff908116909152600088815260076020908152604091829020845181546001600160a01b03199081166001600160a01b0392831617835586840151600184018054831691841691909117905586850151600284018054909216908316179055606086015160038301556080909501516004909101805467ffffffffffffffff191691909416179092558051898152928416918301919091527faad18fe672f0d6b379db88b0e1176f10cc003e9a4d8ed142a90c0b6f8bedb8de910160405180910390a1505050505050565b600082610b0f83826112ec565b91508110156103ad57600080fd5b6001600160a01b038216600090815260046020526040902054610b409082610b02565b6001600160a01b0390921660009081526004602052604090209190915550565b6040516323b872dd60e01b81526001600160a01b038381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b158015610bb057600080fd5b505af1158015610bc4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103929190611198565b6001600160a01b0381166000818152600160208181526040808420805460ff19168417905580516080810182528481528083018581528183018681526060838101818152988852600380875294909720835181559151958201959095559351600285015594518051949594610c659392850192919091019061109d565b5050505050565b6001600160a01b038416610cc25760405162461bcd60e51b815260206004820152601e60248201527f7369676e65722063616e6e6f7420626520656d70747920616464726573730000604482015260640161031f565b60006040518060600160405280602b815260200161135e602b91398051602091820120604080519283019190915281018990526060810188905260800160405160208183030381529060405280519060200120905060008682604051602001610d4292919061190160f01b81526002810192909252602282015260420190565b60408051601f1981840301815282825280516020918201206000845290830180835281905260ff8616918301919091526060820187905260808201869052915060019060a0016020604051602081039080840390855afa158015610daa573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614610e085760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b604482015260640161031f565b505050505050505050565b600082610e208382611330565b91508111156103ad57600080fd5b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b17905291516000928392871691610eba9190611286565b6000604051808303816000865af19150503d8060008114610ef7576040519150601f19603f3d011682016040523d82523d6000602084013e610efc565b606091505b5091509150818015610f26575080511580610f26575080806020019051810190610f269190611198565b610c655760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b604482015260640161031f565b6001600160a01b038216600090815260046020526040902054811115610fb85760405162461bcd60e51b815260206004820152600960248201526837bb32b9323930bbb760b91b604482015260640161031f565b6001600160a01b038216600090815260046020526040902054610b409082610e13565b6001600160a01b0380831660009081526006602090815260408083209387168352929052205481111561103c5760405162461bcd60e51b815260206004820152600960248201526837bb32b9323930bbb760b91b604482015260640161031f565b6001600160a01b0380831660009081526006602090815260408083209387168352929052205461106c9082610e13565b6001600160a01b03808416600090815260066020908152604080832093881683529290522055610392828583610e2e565b8280548282559060005260206000209081019282156110d8579160200282015b828111156110d85782518255916020019190600101906110bd565b506110e49291506110e8565b5090565b5b808211156110e457600081556001016110e9565b80356001600160a01b038116811461111457600080fd5b919050565b60006020828403121561112b57600080fd5b611134826110fd565b9392505050565b6000806040838503121561114e57600080fd5b611157836110fd565b9150611165602084016110fd565b90509250929050565b6000806040838503121561118157600080fd5b61118a836110fd565b946020939093013593505050565b6000602082840312156111aa57600080fd5b8151801515811461113457600080fd5b6000602082840312156111cc57600080fd5b5035919050565b600080600080608085870312156111e957600080fd5b843593506111f9602086016110fd565b92506040850135915061120e606086016110fd565b905092959194509250565b600080600080600080600060e0888a03121561123457600080fd5b87359650611244602089016110fd565b955060408801359450606088013593506080880135925060a0880135915060c088013560ff8116811461127657600080fd5b8091505092959891949750929550565b6000825160005b818110156112a7576020818601810151858301520161128d565b818111156112b6576000828501525b509190910192915050565b6020808252601190820152703ab739bab83837b93a32b2103a37b5b2b760791b604082015260600190565b600082198211156112ff576112ff611347565b500190565b600067ffffffffffffffff80831681851680830382111561132757611327611347565b01949350505050565b60008282101561134257611342611347565b500390565b634e487b7160e01b600052601160045260246000fdfe5377617052656c656173652862797465733332207377617049642c627974657320726563697069656e7429a164736f6c6343000806000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";

type MesonPoolsTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonPoolsTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonPoolsTest__factory extends ContractFactory {
  constructor(...args: MesonPoolsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonPoolsTest> {
    return super.deploy(overrides || {}) as Promise<MesonPoolsTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonPoolsTest {
    return super.attach(address) as MesonPoolsTest;
  }
  connect(signer: Signer): MesonPoolsTest__factory {
    return super.connect(signer) as MesonPoolsTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonPoolsTestInterface {
    return new utils.Interface(_abi) as MesonPoolsTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonPoolsTest {
    return new Contract(address, _abi, signerOrProvider) as MesonPoolsTest;
  }
}

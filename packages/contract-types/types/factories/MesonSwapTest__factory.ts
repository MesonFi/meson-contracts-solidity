/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MesonSwapTest, MesonSwapTestInterface } from "../MesonSwapTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapBonded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapPosted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapRequested",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    name: "addressOfIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "uint40",
        name: "providerIndex",
        type: "uint40",
      },
    ],
    name: "bondSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "cancelSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "recipientHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "depositToPool",
        type: "bool",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoinType",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "getSwap",
    outputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "hasSwap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "indexOfAddress",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "indexOfToken",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint208",
        name: "packedData",
        type: "uint208",
      },
    ],
    name: "postSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "providerIndex",
        type: "uint40",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "requestSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "tokenForIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161192238038061192283398101604081905261002f9161016f565b6040518060800160405280605281526020016118d060529139805160209182012060408051808201825260088152674d65736f6e20466960c01b908401528051808201825260018152603160f81b908401528051928301919091527fe127d7b8d403871d7ed6b19024db4422e92aee79823ba78ad61e52ee2a5f9b98908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051808303601f1901815291815281516020928301206003556001600160a01b0383166000818152808452828120805460ff199081166001908117909255600286529382208054909416909355805291527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4980546001600160a01b03191690911790555061019f565b60006020828403121561018157600080fd5b81516001600160a01b038116811461019857600080fd5b9392505050565b611722806101ae6000396000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c80638dac03cd1161008c578063b3df5b3611610066578063b3df5b36146102da578063f7888aec14610335578063ff37871914610369578063ffa96ec4146103a257600080fd5b80638dac03cd1461024c57806394149c1a14610299578063a0f1d35f146102c757600080fd5b80632335093c116100c85780632335093c146101585780633da0e66e146101a357806354d6a2b7146102265780637c8501871461023957600080fd5b806207f5fd146100ee5780631aba3a55146101035780632217d48314610145575b600080fd5b6101016100fc3660046115e9565b6103b5565b005b61012a61011136600461147f565b60046020526000908152604090205464ffffffffff1681565b60405164ffffffffff90911681526020015b60405180910390f35b6101016101533660046114f1565b610595565b61019161016636600461147f565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b60405160ff909116815260200161013c565b6101f96101b13660046114f1565b60009081526007602090815260408083205464ffffffffff8116845260059092529091205473ffffffffffffffffffffffffffffffffffffffff60289290921c821692911690565b6040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301520161013c565b6101016102343660046114f1565b6106cc565b61010161024736600461152d565b610859565b61028961025a3660046114f1565b60009081526007602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16151590565b604051901515815260200161013c565b6040517f8000003c00000000000000000000000000000000000000000000000000000000815260200161013c565b6101016102d536600461150a565b610a36565b6103106102e83660046115e9565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013c565b6103486103433660046114a1565b610b95565b6040516fffffffffffffffffffffffffffffffff909116815260200161013c565b610310610377366004611604565b60ff1660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6101016103b0366004611589565b610c06565b3364ffffffffff821661040f5760405162461bcd60e51b815260206004820152601260248201527f43616e6e6f742075736520696e6465782030000000000000000000000000000060448201526064015b60405180910390fd5b64ffffffffff821660009081526005602052604090205473ffffffffffffffffffffffffffffffffffffffff16156104895760405162461bcd60e51b815260206004820152601860248201527f496e64657820616c7265616479207265676973746572656400000000000000006044820152606401610406565b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602052604090205464ffffffffff16156105035760405162461bcd60e51b815260206004820152601a60248201527f4164647265737320616c726561647920726567697374657265640000000000006044820152606401610406565b64ffffffffff9091166000818152600560209081526040808320805473ffffffffffffffffffffffffffffffffffffffff9096167fffffffffffffffffffffffff000000000000000000000000000000000000000090961686179055938252600490529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000169091179055565b60006105a382600354610e19565b60008181526007602052604090205490915078ffffffffffffffffffffffffffffffffffffffffffffffffff161561061d5760405162461bcd60e51b815260206004820152601360248201527f5377617020616c726561647920657869737473000000000000000000000000006044820152606401610406565b600033600083815260076020526040812080547fffffffffffffff000000000000000000000000000000000000000000000000001678ffffffffffffffffffffffffffffffffffffffff0000000000602885901b161790559091508061068285610ea1565b91509150610691818484611022565b6040518481527fa67aeefca6ffac499b56c6e714636f7ade5d82fde82aef50665ad3e88be5cb4b906020015b60405180910390a15050505050565b60006106da82600354610e19565b60008181526007602052604090205490915078ffffffffffffffffffffffffffffffffffffffffffffffffff16806107545760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f74206578697374000000000000000000000000006044820152606401610406565b4264ffffffffff16603084901c64ffffffffff16106107b55760405162461bcd60e51b815260206004820152601460248201527f53776170206973207374696c6c206c6f636b65640000000000000000000000006044820152606401610406565b60ff8316600090815260016020908152604080832054858452600790925290912080547fffffffffffffff0000000000000000000000000000000000000000000000000016905573ffffffffffffffffffffffffffffffffffffffff602883901c811691166108298183608088901c6110d6565b6040518481527f5a399591cfd74c375a1ffd61c20221db0db82381f65516889ed13c8cd1f99d5b906020016106bd565b60035460006108688883610e19565b600081815260076020526040902080547fffffffffffffff00000000000000000000000000000000000000000000000000811690915590915078ffffffffffffffffffffffffffffffffffffffffffffffffff16831561097957601581815260108051908b905260005191519091906108e6858c888d8d8d8961125c565b65ffffffffffff811660009081526006602052604090205461091a906fffffffffffffffffffffffffffffffff16836113f1565b65ffffffffffff91909116600090815260066020526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff909216919091179055506109f89050565b6109a78289858a8a8a60288878ffffffffffffffffffffffffffffffffffffffffffffffffff16901c61125c565b60ff891660009081526001602090815260408083205464ffffffffff851684526005909252909120546109f89173ffffffffffffffffffffffffffffffffffffffff908116911660808c901c6110d6565b6040518281527f6921a2110a802468e8955f2885822155442ad19c60f42db0444a6993c23d20629060200160405180910390a1505050505050505050565b60008281526007602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff1680610aad5760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f74206578697374000000000000000000000000006044820152606401610406565b64ffffffffff811615610b025760405162461bcd60e51b815260206004820152601f60248201527f5377617020626f6e64656420746f20616e6f746865722070726f7669646572006044820152606401610406565b60008381526007602090815260409182902080547fffffffffffffff000000000000000000000000000000000000000000000000001664ffffffffff861678ffffffffffffffffffffffffffffffffffffffffffffffffff86161717905590518481527f9dadb60bc000bbd7b49430723ed56b6aa35909dcab91ec2cb17ed5da7ae4ffd6910160405180910390a1505050565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600260209081526040808320549385168352600482528083205464ffffffffff1660289490941b65ff0000000000169390931782526006905220546fffffffffffffffffffffffffffffffff165b92915050565b6000610c1485600354610e19565b60008181526007602052604090205490915078ffffffffffffffffffffffffffffffffffffffffffffffffff1615610c8e5760405162461bcd60e51b815260206004820152601360248201527f5377617020616c726561647920657869737473000000000000000000000000006044820152606401610406565b6020828152600751601b51604080516000815293840180825285905260ff83169084015260608301879052608083018690529091849060019060a0016020604051602081039080840390855afa158015610cec573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610d705760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610406565b600084815260076020526040812080547fffffffffffffff000000000000000000000000000000000000000000000000001678ffffffffffffffffffffffffffffffffffffffffffffffffff841617905580610dcb8a610ea1565b91509150610dda818584611022565b6040518681527fd7a1fd45274eb446b18cdf83061f521e75114fa2c53ecb42bd853bba72097bab9060200160405180910390a150505050505050505050565b604080518082018252601c81527f53776170526571756573742875696e7432353620656e636f646564290000000060209182015281517f9e30b23744f36fc02f504355e3ffa6d1fda34e5ac9e3c78a1d6e7dffbc9c57266000818152928690529282206022529091906019835360018053836002526042600020925080604052505092915050565b608081901c600081610f1b5760405162461bcd60e51b815260206004820152602560248201527f5377617020616d6f756e74206d7573742062652067726561746572207468616e60448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610406565b5060ff821660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16603083901c42610f57610e108261168e565b64ffffffffff168264ffffffffff1611610fb35760405162461bcd60e51b815260206004820152601360248201527f45787069726520747320746f6f206561726c79000000000000000000000000006044820152606401610406565b610fbf611c208261168e565b64ffffffffff168264ffffffffff161061101b5760405162461bcd60e51b815260206004820152601260248201527f45787069726520747320746f6f206c61746500000000000000000000000000006044820152606401610406565b5050915091565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b15801561109857600080fd5b505af11580156110ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d091906114d4565b50505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839287169161119d919061161f565b6000604051808303816000865af19150503d80600081146111da576040519150601f19603f3d011682016040523d82523d6000602084013e6111df565b606091505b509150915081801561120957508051158061120957508080602001905181019061120991906114d4565b6112555760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610406565b5050505050565b60006040518060600160405280602b81526020016116eb602b91398051602090910120905073ffffffffffffffffffffffffffffffffffffffff82166112e45760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d707479206164647265737300006044820152606401610406565b600060405182600052896020528860405260606000206022526019600053600180536002889052604260009081209082526020820160408181529082905260ff8716908301526060820188905260808201879052915060019060a0016020604051602081039080840390855afa158015611362573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146113e65760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610406565b505050505050505050565b60006fffffffffffffffffffffffffffffffff8316611410838561165a565b9150816fffffffffffffffffffffffffffffffff161015610c0057600080fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461145457600080fd5b919050565b803564ffffffffff8116811461145457600080fd5b803560ff8116811461145457600080fd5b60006020828403121561149157600080fd5b61149a82611430565b9392505050565b600080604083850312156114b457600080fd5b6114bd83611430565b91506114cb60208401611430565b90509250929050565b6000602082840312156114e657600080fd5b815161149a816116d9565b60006020828403121561150357600080fd5b5035919050565b6000806040838503121561151d57600080fd5b823591506114cb60208401611459565b60008060008060008060c0878903121561154657600080fd5b8635955060208701359450604087013593506060870135925061156b6080880161146e565b915060a087013561157b816116d9565b809150509295509295509295565b6000806000806080858703121561159f57600080fd5b843593506020850135925060408501359150606085013579ffffffffffffffffffffffffffffffffffffffffffffffffffff811681146115de57600080fd5b939692955090935050565b6000602082840312156115fb57600080fd5b61149a82611459565b60006020828403121561161657600080fd5b61149a8261146e565b6000825160005b818110156116405760208186018101518583015201611626565b8181111561164f576000828501525b509190910192915050565b60006fffffffffffffffffffffffffffffffff808316818516808303821115611685576116856116aa565b01949350505050565b600064ffffffffff808316818516808303821115611685576116855b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80151581146116e757600080fd5b5056fe5377617052656c656173652862797465733332207377617049642c627974657320726563697069656e7429a164736f6c6343000806000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";

type MesonSwapTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonSwapTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonSwapTest__factory extends ContractFactory {
  constructor(...args: MesonSwapTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonSwapTest> {
    return super.deploy(token, overrides || {}) as Promise<MesonSwapTest>;
  }
  getDeployTransaction(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  attach(address: string): MesonSwapTest {
    return super.attach(address) as MesonSwapTest;
  }
  connect(signer: Signer): MesonSwapTest__factory {
    return super.connect(signer) as MesonSwapTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonSwapTestInterface {
    return new utils.Interface(_abi) as MesonSwapTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonSwapTest {
    return new Contract(address, _abi, signerOrProvider) as MesonSwapTest;
  }
}

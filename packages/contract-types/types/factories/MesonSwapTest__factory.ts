/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MesonSwapTest, MesonSwapTestInterface } from "../MesonSwapTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapBonded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapPosted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    name: "addressOfIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "uint40",
        name: "providerIndex",
        type: "uint40",
      },
    ],
    name: "bondSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "cancelSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "bool",
        name: "depositToPool",
        type: "bool",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "getPostedSwap",
    outputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getShortCoinType",
    outputs: [
      {
        internalType: "bytes2",
        name: "",
        type: "bytes2",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "indexOfAddress",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "indexOfToken",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "mesonFeeCollected",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "uint200",
        name: "postingValue",
        type: "uint200",
      },
    ],
    name: "postSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "providerIndex",
        type: "uint40",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "tokenForIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001d7038038062001d708339810160408190526200003491620000e7565b6200004181600162000048565b5062000119565b60ff81166200009d5760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f7420757365203020617320746f6b656e20696e6465780000000000604482015260640160405180910390fd5b6001600160a01b039091166000818152600160209081526040808320805460ff90961660ff19909616861790559382528190529190912080546001600160a01b0319169091179055565b600060208284031215620000fa57600080fd5b81516001600160a01b03811681146200011257600080fd5b9392505050565b611c4780620001296000396000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c80638302ce5a1161008c578063e16a567d11610066578063e16a567d14610294578063eba7fb77146102cd578063f7888aec146102fb578063ff3787191461030e57600080fd5b80638302ce5a14610211578063b002249d14610224578063b3df5b361461023957600080fd5b80632335093c116100c85780632335093c1461018d57806335eff30f146101d85780634d11b0f1146101eb57806354d6a2b7146101fe57600080fd5b806207f5fd146100ee5780631aba3a55146101035780631e2a607514610145575b600080fd5b6101016100fc366004611a22565b610347565b005b61012a61011136600461189f565b60026020526000908152604090205464ffffffffff1681565b60405164ffffffffff90911681526020015b60405180910390f35b610158610153366004611911565b610527565b6040805173ffffffffffffffffffffffffffffffffffffffff948516815293909216602084015215159082015260600161013c565b6101c661019b36600461189f565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b60405160ff909116815260200161013c565b6101016101e63660046119ff565b6105b9565b6101016101f936600461192a565b610776565b61010161020c366004611911565b6109f5565b61010161021f36600461198d565b610b7d565b61022c610e8b565b60405161013c9190611a93565b61026f610247366004611a22565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013c565b6102bf6102a2366004611a3d565b60281b65ff00000000001660009081526004602052604090205490565b60405190815260200161013c565b6040517f02ca000000000000000000000000000000000000000000000000000000000000815260200161013c565b6102bf6103093660046118c1565b610fd8565b61026f61031c366004611a3d565b60ff1660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b3364ffffffffff82166103a15760405162461bcd60e51b815260206004820152601260248201527f43616e6e6f742075736520696e6465782030000000000000000000000000000060448201526064015b60405180910390fd5b64ffffffffff821660009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff161561041b5760405162461bcd60e51b815260206004820152601860248201527f496e64657820616c7265616479207265676973746572656400000000000000006044820152606401610398565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205464ffffffffff16156104955760405162461bcd60e51b815260206004820152601a60248201527f4164647265737320616c726561647920726567697374657265640000000000006044820152606401610398565b64ffffffffff9091166000818152600360209081526040808320805473ffffffffffffffffffffffffffffffffffffffff9096167fffffffffffffffffffffffff000000000000000000000000000000000000000090961686179055938252600290529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000169091179055565b600081815260056020526040812054602881901c73ffffffffffffffffffffffffffffffffffffffff16919078ffffffffffffffffffffffffffffffffffffffffffffffffff1660018114908361058157600092506105b1565b64ffffffffff811660009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1692505b509193909250565b60008281526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16600181116106335760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f74206578697374000000000000000000000000006044820152606401610398565b8064ffffffffff16156106885760405162461bcd60e51b815260206004820152601f60248201527f5377617020626f6e64656420746f20616e6f746865722070726f7669646572006044820152606401610398565b3360009081526002602052604090205464ffffffffff8381169116146106f05760405162461bcd60e51b815260206004820152601860248201527f43616e206f6e6c7920626f756e6420746f207369676e657200000000000000006044820152606401610398565b60008381526005602052604080822080547fffffffffffffff000000000000000000000000000000000000000000000000001664ffffffffff861678ffffffffffffffffffffffffffffffffffffffffffffffffff8616171790555184917f60a99b51ae498c44acbbe11031aed2a06a32be66d2122e6e2a7a16c087865cc991a2505050565b60008681526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16600181116107f05760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f74206578697374000000000000000000000000006044820152606401610398565b6107fc610e1042611aed565b603088901c64ffffffffff16101561084757600087815260056020526040902080547fffffffffffffff0000000000000000000000000000000000000000000000000016905561087f565b600087815260056020526040902080547fffffffffffffff000000000000000000000000000000000000000000000000001660011790555b6108a78784888888602887901c73ffffffffffffffffffffffffffffffffffffffff16611068565b60006108b38860281b90565b90506000605889901c64ffffffffff166108cd8a60d01c90565b6108d79190611aed565b90506108e38960081c90565b61ffff16603c1415801561090557506108fc8960201c90565b61ffff16603c14155b1561095857643fffffffff605a8a901c1680156109565765ffffffffffff831660009081526004602052604081208054839290610943908490611aed565b9091555061095390508183611b42565b91505b505b831561099f5764ffffffffff831665ffffffffffff831681176000908152600460205260408120805492851792849290610993908490611aed565b909155506109ea915050565b60ff89166000908152602081815260408083205464ffffffffff871684526003909252909120546109ea9173ffffffffffffffffffffffffffffffffffffffff9081169116836111e2565b505050505050505050565b60008181526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff1660018111610a6f5760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f74206578697374000000000000000000000000006044820152606401610398565b42603083901c64ffffffffff1610610ac95760405162461bcd60e51b815260206004820152601460248201527f53776170206973207374696c6c206c6f636b65640000000000000000000000006044820152606401610398565b600082815260056020908152604080832080547fffffffffffffff0000000000000000000000000000000000000000000000000016905560ff8516835290829052902054610b4e9073ffffffffffffffffffffffffffffffffffffffff90811690602884901c16610b49605886901c64ffffffffff1660d087901c611aed565b6111e2565b60405182907ff6b6b4f7a13f02512c1b3aa8dcc4a07d7775a6a4becbd439efcbd37c5408e67f90600090a25050565b846102ca610b8b8260081c90565b61ffff1614610bdc5760405162461bcd60e51b815260206004820152601760248201527f53776170206e6f7420666f72207468697320636861696e0000000000000000006044820152606401610398565b60008681526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff1615610c535760405162461bcd60e51b815260206004820152601360248201527f5377617020616c726561647920657869737473000000000000000000000000006044820152606401610398565b6000610c5f8760d01c90565b905064174876e800811115610cdc5760405162461bcd60e51b815260206004820152603760248201527f466f7220736563757269747920726561736f6e2c20616d6f756e742063616e6e60448201527f6f742062652067726561746572207468616e203130306b0000000000000000006064820152608401610398565b6000610cf34264ffffffffff60308b901c16611b42565b9050610e108111610d465760405162461bcd60e51b815260206004820152601360248201527f45787069726520747320746f6f206561726c79000000000000000000000000006044820152606401610398565b611c208110610d975760405162461bcd60e51b815260206004820152601260248201527f45787069726520747320746f6f206c61746500000000000000000000000000006044820152606401610398565b73ffffffffffffffffffffffffffffffffffffffff602885901c16610dbf8989898985611405565b600089815260056020908152604080832080547fffffffffffffff000000000000000000000000000000000000000000000000001678ffffffffffffffffffffffffffffffffffffffffffffffffff8a1617905560ff8c16835290829052902054610e559073ffffffffffffffffffffffffffffffffffffffff1682610e5060588d901c64ffffffffff1687611aed565b611577565b60405189907f5ce4019f772fda6cb703b26bce3ec3006eb36b73f1d3a0eb441213317d9f5e9d90600090a2505050505050505050565b606060015b6101008160ff161015610f435760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff16610f31578060ff1660011415610eda575090565b610ee5600182611b59565b60ff1667ffffffffffffffff811115610f0057610f00611bfa565b604051908082528060200260200182016040528015610f29578160200160208202803683370190505b509150610f43565b80610f3b81611b7c565b915050610e90565b60015b8160ff168160ff161015610fd35760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1683610f89600184611b59565b60ff1681518110610f9c57610f9c611bcb565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610fcb81611b7c565b915050610f46565b505090565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526001602090815260408083205493851683526002909152812054909160ff169064ffffffffff1680158061102a575060ff8216155b1561103a57600092505050611062565b64ffffffffff1660289190911b65ff0000000000161760009081526004602052604090205490505b92915050565b73ffffffffffffffffffffffffffffffffffffffff81166110cb5760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d707479206164647265737300006044820152606401610398565b601485905260008681526034812060209081527f743e50106a7f059b52151dd4ba27a5f6c87b925ddfbdcf1c332e800da4b3df928083526040808420815194855292840180825283905260ff86169084015260608301879052608083018690529160019060a0016020604051602081039080840390855afa158015611154573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146111d85760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610398565b5050505050505050565b789f4f2726179a224501d762422c946590d91000000000000000811061124a5760405162461bcd60e51b815260206004820152600f60248201527f416d6f756e74206f766572666c6f7700000000000000000000000000000000006044820152606401610398565b60008073ffffffffffffffffffffffffffffffffffffffff85167fa9059cbb00000000000000000000000000000000000000000000000000000000856112958664e8d4a51000611b05565b60405173ffffffffffffffffffffffffffffffffffffffff90921660248301526044820152606401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516113469190611a58565b6000604051808303816000865af19150503d8060008114611383576040519150601f19603f3d011682016040523d82523d6000602084013e611388565b606091505b50915091508180156113b25750805115806113b25750808060200190518101906113b291906118f4565b6113fe5760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152606401610398565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff81166114685760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d707479206164647265737300006044820152606401610398565b6000858152602080822081527f9862d877599564bcd97c37305a7b0fdbe621d9c2a125026f2ad601f754a75abc8083526040808420815194855292840180825283905260ff86169084015260608301879052608083018690529160019060a0016020604051602081039080840390855afa1580156114ea573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461156e5760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610398565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff83166115da5760405162461bcd60e51b815260206004820152601360248201527f546f6b656e206e6f7420737570706f72746564000000000000000000000000006044820152606401610398565b6000811161162a5760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152606401610398565b789f4f2726179a224501d762422c946590d9100000000000000081106116925760405162461bcd60e51b815260206004820152600f60248201527f416d6f756e74206f766572666c6f7700000000000000000000000000000000006044820152606401610398565b60008073ffffffffffffffffffffffffffffffffffffffff85167f23b872dd0000000000000000000000000000000000000000000000000000000085306116de8764e8d4a51000611b05565b60405173ffffffffffffffffffffffffffffffffffffffff93841660248201529290911660448301526064820152608401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516117989190611a58565b6000604051808303816000865af19150503d80600081146117d5576040519150601f19603f3d011682016040523d82523d6000602084013e6117da565b606091505b509150915081801561180457508051158061180457508080602001905181019061180491906118f4565b6113fe5760405162461bcd60e51b815260206004820152601360248201527f7472616e7366657246726f6d206661696c6564000000000000000000000000006044820152606401610398565b803573ffffffffffffffffffffffffffffffffffffffff8116811461187457600080fd5b919050565b803564ffffffffff8116811461187457600080fd5b803560ff8116811461187457600080fd5b6000602082840312156118b157600080fd5b6118ba82611850565b9392505050565b600080604083850312156118d457600080fd5b6118dd83611850565b91506118eb60208401611850565b90509250929050565b60006020828403121561190657600080fd5b81516118ba81611c29565b60006020828403121561192357600080fd5b5035919050565b60008060008060008060c0878903121561194357600080fd5b8635955060208701359450604087013593506119616060880161188e565b925061196f60808801611850565b915060a087013561197f81611c29565b809150509295509295509295565b600080600080600060a086880312156119a557600080fd5b8535945060208601359350604086013592506119c36060870161188e565b9150608086013578ffffffffffffffffffffffffffffffffffffffffffffffffff811681146119f157600080fd5b809150509295509295909350565b60008060408385031215611a1257600080fd5b823591506118eb60208401611879565b600060208284031215611a3457600080fd5b6118ba82611879565b600060208284031215611a4f57600080fd5b6118ba8261188e565b6000825160005b81811015611a795760208186018101518583015201611a5f565b81811115611a88576000828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015611ae157835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611aaf565b50909695505050505050565b60008219821115611b0057611b00611b9c565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b3d57611b3d611b9c565b500290565b600082821015611b5457611b54611b9c565b500390565b600060ff821660ff841680821015611b7357611b73611b9c565b90039392505050565b600060ff821660ff811415611b9357611b93611b9c565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8015158114611c3757600080fd5b5056fea164736f6c6343000806000a";

type MesonSwapTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonSwapTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonSwapTest__factory extends ContractFactory {
  constructor(...args: MesonSwapTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonSwapTest> {
    return super.deploy(token, overrides || {}) as Promise<MesonSwapTest>;
  }
  getDeployTransaction(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  attach(address: string): MesonSwapTest {
    return super.attach(address) as MesonSwapTest;
  }
  connect(signer: Signer): MesonSwapTest__factory {
    return super.connect(signer) as MesonSwapTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonSwapTestInterface {
    return new utils.Interface(_abi) as MesonSwapTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonSwapTest {
    return new Contract(address, _abi, signerOrProvider) as MesonSwapTest;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MesonSwapTest, MesonSwapTestInterface } from "../MesonSwapTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapBonded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapPosted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapRequested",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    name: "addressOfIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "uint40",
        name: "providerIndex",
        type: "uint40",
      },
    ],
    name: "bondSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "cancelSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "recipientHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "depositToPool",
        type: "bool",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoinType",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "getSwap",
    outputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "hasSwap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "indexOfAddress",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "indexOfToken",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint208",
        name: "packedData",
        type: "uint208",
      },
    ],
    name: "postSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "providerIndex",
        type: "uint40",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "requestSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "tokenForIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001c3438038062001c348339810160408190526200003491620001cb565b60405180608001604052806052815260200162001be260529139805160209182012060408051808201825260088152674d65736f6e20466960c01b908401528051808201825260018152603160f81b908401528051928301919091527fe127d7b8d403871d7ed6b19024db4422e92aee79823ba78ad61e52ee2a5f9b98908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f1981840301815291905280516020909101206003556200011281600162000119565b50620001fd565b60ff81166200016e5760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f7420757365203020617320746f6b656e20696e6465780000000000604482015260640160405180910390fd5b6001600160a01b03919091166000818152602081815260408083208054600160ff19918216811790925560028452828520805490911660ff90971696871790559483529390529190912080546001600160a01b0319169091179055565b600060208284031215620001de57600080fd5b81516001600160a01b0381168114620001f657600080fd5b9392505050565b6119d5806200020d6000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c80638dac03cd11610097578063b3df5b3611610066578063b3df5b36146102fa578063f7888aec14610355578063ff37871914610389578063ffa96ec4146103c257600080fd5b80638dac03cd1461025757806394149c1a146102a4578063a0f1d35f146102d2578063b002249d146102e557600080fd5b80632335093c116100d35780632335093c146101635780633da0e66e146101ae57806354d6a2b7146102315780637c8501871461024457600080fd5b806207f5fd146100f95780631aba3a551461010e5780632217d48314610150575b600080fd5b61010c61010736600461179d565b6103d5565b005b61013561011c366004611633565b60046020526000908152604090205464ffffffffff1681565b60405164ffffffffff90911681526020015b60405180910390f35b61010c61015e3660046116a5565b6105b5565b61019c610171366004611633565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b60405160ff9091168152602001610147565b6102046101bc3660046116a5565b60009081526007602090815260408083205464ffffffffff8116845260059092529091205473ffffffffffffffffffffffffffffffffffffffff60289290921c821692911690565b6040805173ffffffffffffffffffffffffffffffffffffffff938416815292909116602083015201610147565b61010c61023f3660046116a5565b6106ec565b61010c6102523660046116e1565b610879565b6102946102653660046116a5565b60009081526007602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16151590565b6040519015158152602001610147565b6040517f8000003c000000000000000000000000000000000000000000000000000000008152602001610147565b61010c6102e03660046116be565b610a56565b6102ed610bb5565b604051610147919061180e565b61033061030836600461179d565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610147565b610368610363366004611655565b610d06565b6040516fffffffffffffffffffffffffffffffff9091168152602001610147565b6103306103973660046117b8565b60ff1660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b61010c6103d036600461173d565b610d77565b3364ffffffffff821661042f5760405162461bcd60e51b815260206004820152601260248201527f43616e6e6f742075736520696e6465782030000000000000000000000000000060448201526064015b60405180910390fd5b64ffffffffff821660009081526005602052604090205473ffffffffffffffffffffffffffffffffffffffff16156104a95760405162461bcd60e51b815260206004820152601860248201527f496e64657820616c7265616479207265676973746572656400000000000000006044820152606401610426565b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602052604090205464ffffffffff16156105235760405162461bcd60e51b815260206004820152601a60248201527f4164647265737320616c726561647920726567697374657265640000000000006044820152606401610426565b64ffffffffff9091166000818152600560209081526040808320805473ffffffffffffffffffffffffffffffffffffffff9096167fffffffffffffffffffffffff000000000000000000000000000000000000000090961686179055938252600490529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000169091179055565b60006105c382600354610f8a565b60008181526007602052604090205490915078ffffffffffffffffffffffffffffffffffffffffffffffffff161561063d5760405162461bcd60e51b815260206004820152601360248201527f5377617020616c726561647920657869737473000000000000000000000000006044820152606401610426565b600033600083815260076020526040812080547fffffffffffffff000000000000000000000000000000000000000000000000001678ffffffffffffffffffffffffffffffffffffffff0000000000602885901b16179055909150806106a285611012565b915091506106b1818484611193565b6040518481527fa67aeefca6ffac499b56c6e714636f7ade5d82fde82aef50665ad3e88be5cb4b906020015b60405180910390a15050505050565b60006106fa82600354610f8a565b60008181526007602052604090205490915078ffffffffffffffffffffffffffffffffffffffffffffffffff16806107745760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f74206578697374000000000000000000000000006044820152606401610426565b4264ffffffffff16603084901c64ffffffffff16106107d55760405162461bcd60e51b815260206004820152601460248201527f53776170206973207374696c6c206c6f636b65640000000000000000000000006044820152606401610426565b60ff8316600090815260016020908152604080832054858452600790925290912080547fffffffffffffff0000000000000000000000000000000000000000000000000016905573ffffffffffffffffffffffffffffffffffffffff602883901c811691166108498183608088901c611247565b6040518481527f5a399591cfd74c375a1ffd61c20221db0db82381f65516889ed13c8cd1f99d5b906020016106dd565b60035460006108888883610f8a565b600081815260076020526040902080547fffffffffffffff00000000000000000000000000000000000000000000000000811690915590915078ffffffffffffffffffffffffffffffffffffffffffffffffff16831561099957601581815260108051908b90526000519151909190610906858c888d8d8d896113cd565b65ffffffffffff811660009081526006602052604090205461093a906fffffffffffffffffffffffffffffffff1683611562565b65ffffffffffff91909116600090815260066020526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff90921691909117905550610a189050565b6109c78289858a8a8a60288878ffffffffffffffffffffffffffffffffffffffffffffffffff16901c6113cd565b60ff891660009081526001602090815260408083205464ffffffffff85168452600590925290912054610a189173ffffffffffffffffffffffffffffffffffffffff908116911660808c901c611247565b6040518281527f6921a2110a802468e8955f2885822155442ad19c60f42db0444a6993c23d20629060200160405180910390a1505050505050505050565b60008281526007602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff1680610acd5760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f74206578697374000000000000000000000000006044820152606401610426565b64ffffffffff811615610b225760405162461bcd60e51b815260206004820152601f60248201527f5377617020626f6e64656420746f20616e6f746865722070726f7669646572006044820152606401610426565b60008381526007602090815260409182902080547fffffffffffffff000000000000000000000000000000000000000000000000001664ffffffffff861678ffffffffffffffffffffffffffffffffffffffffffffffffff86161717905590518481527f9dadb60bc000bbd7b49430723ed56b6aa35909dcab91ec2cb17ed5da7ae4ffd6910160405180910390a1505050565b606060015b6101008160ff161015610c6d5760ff811660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16610c5b578060ff1660011415610c04575090565b610c0f6001826118bc565b60ff1667ffffffffffffffff811115610c2a57610c2a61195d565b604051908082528060200260200182016040528015610c53578160200160208202803683370190505b509150610c6d565b80610c65816118df565b915050610bba565b60015b8160ff168160ff161015610d015760ff811660009081526001602081905260409091205473ffffffffffffffffffffffffffffffffffffffff16908490610cb790846118bc565b60ff1681518110610cca57610cca61192e565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610cf9816118df565b915050610c70565b505090565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600260209081526040808320549385168352600482528083205464ffffffffff1660289490941b65ff0000000000169390931782526006905220546fffffffffffffffffffffffffffffffff165b92915050565b6000610d8585600354610f8a565b60008181526007602052604090205490915078ffffffffffffffffffffffffffffffffffffffffffffffffff1615610dff5760405162461bcd60e51b815260206004820152601360248201527f5377617020616c726561647920657869737473000000000000000000000000006044820152606401610426565b6020828152600751601b51604080516000815293840180825285905260ff83169084015260608301879052608083018690529091849060019060a0016020604051602081039080840390855afa158015610e5d573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610ee15760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610426565b600084815260076020526040812080547fffffffffffffff000000000000000000000000000000000000000000000000001678ffffffffffffffffffffffffffffffffffffffffffffffffff841617905580610f3c8a611012565b91509150610f4b818584611193565b6040518681527fd7a1fd45274eb446b18cdf83061f521e75114fa2c53ecb42bd853bba72097bab9060200160405180910390a150505050505050505050565b604080518082018252601c81527f53776170526571756573742875696e7432353620656e636f646564290000000060209182015281517f9e30b23744f36fc02f504355e3ffa6d1fda34e5ac9e3c78a1d6e7dffbc9c57266000818152928690529282206022529091906019835360018053836002526042600020925080604052505092915050565b608081901c60008161108c5760405162461bcd60e51b815260206004820152602560248201527f5377617020616d6f756e74206d7573742062652067726561746572207468616e60448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610426565b5060ff821660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16603083901c426110c8610e108261189c565b64ffffffffff168264ffffffffff16116111245760405162461bcd60e51b815260206004820152601360248201527f45787069726520747320746f6f206561726c79000000000000000000000000006044820152606401610426565b611130611c208261189c565b64ffffffffff168264ffffffffff161061118c5760405162461bcd60e51b815260206004820152601260248201527f45787069726520747320746f6f206c61746500000000000000000000000000006044820152606401610426565b5050915091565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b15801561120957600080fd5b505af115801561121d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112419190611688565b50505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839287169161130e91906117d3565b6000604051808303816000865af19150503d806000811461134b576040519150601f19603f3d011682016040523d82523d6000602084013e611350565b606091505b509150915081801561137a57508051158061137a57508080602001905181019061137a9190611688565b6113c65760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610426565b5050505050565b60006040518060600160405280602b815260200161199e602b91398051602090910120905073ffffffffffffffffffffffffffffffffffffffff82166114555760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d707479206164647265737300006044820152606401610426565b600060405182600052896020528860405260606000206022526019600053600180536002889052604260009081209082526020820160408181529082905260ff8716908301526060820188905260808201879052915060019060a0016020604051602081039080840390855afa1580156114d3573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146115575760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610426565b505050505050505050565b60006fffffffffffffffffffffffffffffffff83166115818385611868565b9150816fffffffffffffffffffffffffffffffff161015610d715760405162461bcd60e51b815260206004820152600860248201527f6f766572666c6f770000000000000000000000000000000000000000000000006044820152606401610426565b803573ffffffffffffffffffffffffffffffffffffffff8116811461160857600080fd5b919050565b803564ffffffffff8116811461160857600080fd5b803560ff8116811461160857600080fd5b60006020828403121561164557600080fd5b61164e826115e4565b9392505050565b6000806040838503121561166857600080fd5b611671836115e4565b915061167f602084016115e4565b90509250929050565b60006020828403121561169a57600080fd5b815161164e8161198c565b6000602082840312156116b757600080fd5b5035919050565b600080604083850312156116d157600080fd5b8235915061167f6020840161160d565b60008060008060008060c087890312156116fa57600080fd5b8635955060208701359450604087013593506060870135925061171f60808801611622565b915060a087013561172f8161198c565b809150509295509295509295565b6000806000806080858703121561175357600080fd5b843593506020850135925060408501359150606085013579ffffffffffffffffffffffffffffffffffffffffffffffffffff8116811461179257600080fd5b939692955090935050565b6000602082840312156117af57600080fd5b61164e8261160d565b6000602082840312156117ca57600080fd5b61164e82611622565b6000825160005b818110156117f457602081860181015185830152016117da565b81811115611803576000828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561185c57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161182a565b50909695505050505050565b60006fffffffffffffffffffffffffffffffff808316818516808303821115611893576118936118ff565b01949350505050565b600064ffffffffff808316818516808303821115611893576118936118ff565b600060ff821660ff8416808210156118d6576118d66118ff565b90039392505050565b600060ff821660ff8114156118f6576118f66118ff565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b801515811461199a57600080fd5b5056fe5377617052656c656173652862797465733332207377617049642c627974657320726563697069656e7429a164736f6c6343000806000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";

type MesonSwapTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonSwapTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonSwapTest__factory extends ContractFactory {
  constructor(...args: MesonSwapTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonSwapTest> {
    return super.deploy(token, overrides || {}) as Promise<MesonSwapTest>;
  }
  getDeployTransaction(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  attach(address: string): MesonSwapTest {
    return super.attach(address) as MesonSwapTest;
  }
  connect(signer: Signer): MesonSwapTest__factory {
    return super.connect(signer) as MesonSwapTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonSwapTestInterface {
    return new utils.Interface(_abi) as MesonSwapTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonSwapTest {
    return new Contract(address, _abi, signerOrProvider) as MesonSwapTest;
  }
}

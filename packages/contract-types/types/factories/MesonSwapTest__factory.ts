/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MesonSwapTest, MesonSwapTestInterface } from "../MesonSwapTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapBonded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapPosted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapRequested",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    name: "addressOfIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "uint40",
        name: "providerIndex",
        type: "uint40",
      },
    ],
    name: "bondSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "cancelSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "recipientHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "depositToPool",
        type: "bool",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getShortCoinType",
    outputs: [
      {
        internalType: "bytes2",
        name: "",
        type: "bytes2",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "indexOfAddress",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "indexOfToken",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint208",
        name: "packedData",
        type: "uint208",
      },
    ],
    name: "postSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "providerIndex",
        type: "uint40",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "requestSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "swapInitiator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "swapProvider",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "tokenForIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001acb38038062001acb8339810160408190526200003491620000fa565b6200004181600162000048565b506200012c565b60ff81166200009d5760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f7420757365203020617320746f6b656e20696e6465780000000000604482015260640160405180910390fd5b6001600160a01b03919091166000818152602081815260408083208054600160ff19918216811790925560028452828520805490911660ff90971696871790559483529390529190912080546001600160a01b0319169091179055565b6000602082840312156200010d57600080fd5b81516001600160a01b03811681146200012557600080fd5b9392505050565b61198f806200013c6000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c806360b9d97311610097578063eba7fb7711610066578063eba7fb77146102da578063f7888aec14610307578063ff3787191461033b578063ffa96ec41461037457600080fd5b806360b9d973146102325780637c8501871461027c578063b002249d1461028f578063b3df5b36146102a457600080fd5b80632335093c116100d35780632335093c1461016357806335eff30f146101ae57806338b0b63f146101c157806354d6a2b71461021f57600080fd5b806207f5fd146100f95780631aba3a551461010e5780632217d48314610150575b600080fd5b61010c610107366004611782565b610387565b005b61013561011c366004611618565b60036020526000908152604090205464ffffffffff1681565b60405164ffffffffff90911681526020015b60405180910390f35b61010c61015e36600461168a565b610567565b61019c610171366004611618565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b60405160ff9091168152602001610147565b61010c6101bc36600461175f565b6106e5565b6101fa6101cf36600461168a565b60009081526006602052604090205460281c73ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610147565b61010c61022d36600461168a565b610844565b6101fa61024036600461168a565b60009081526006602090815260408083205464ffffffffff168352600490915290205473ffffffffffffffffffffffffffffffffffffffff1690565b61010c61028a3660046116a3565b6109c9565b610297610b5d565b60405161014791906117f3565b6101fa6102b2366004611782565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6040517e3c0000000000000000000000000000000000000000000000000000000000008152602001610147565b61031a61031536600461163a565b610cae565b6040516fffffffffffffffffffffffffffffffff9091168152602001610147565b6101fa61034936600461179d565b60ff1660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b61010c6103823660046116ff565b610d1f565b3364ffffffffff82166103e15760405162461bcd60e51b815260206004820152601260248201527f43616e6e6f742075736520696e6465782030000000000000000000000000000060448201526064015b60405180910390fd5b64ffffffffff821660009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff161561045b5760405162461bcd60e51b815260206004820152601860248201527f496e64657820616c72656164792072656769737465726564000000000000000060448201526064016103d8565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604090205464ffffffffff16156104d55760405162461bcd60e51b815260206004820152601a60248201527f4164647265737320616c7265616479207265676973746572656400000000000060448201526064016103d8565b64ffffffffff9091166000818152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff9096167fffffffffffffffffffffffff000000000000000000000000000000000000000090961686179055938252600390529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000169091179055565b80600881901c61ffff16603c146105c05760405162461bcd60e51b815260206004820152601760248201527f53776170206e6f7420666f72207468697320636861696e00000000000000000060448201526064016103d8565b60008281526006602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16156106375760405162461bcd60e51b815260206004820152601360248201527f5377617020616c7265616479206578697374730000000000000000000000000060448201526064016103d8565b600033600084815260066020526040812080547fffffffffffffff000000000000000000000000000000000000000000000000001678ffffffffffffffffffffffffffffffffffffffff0000000000602885901b161790559091508061069c85610eb1565b915091506106ab818484611032565b6040518581527fffb55ec353614a34485412bc8d469fe16d3c7f0a963be6dd266938f8ff7d6c3f9060200160405180910390a15050505050565b60008281526006602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff168061075c5760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f742065786973740000000000000000000000000060448201526064016103d8565b64ffffffffff8116156107b15760405162461bcd60e51b815260206004820152601f60248201527f5377617020626f6e64656420746f20616e6f746865722070726f76696465720060448201526064016103d8565b60008381526006602090815260409182902080547fffffffffffffff000000000000000000000000000000000000000000000000001664ffffffffff861678ffffffffffffffffffffffffffffffffffffffffffffffffff86161717905590518481527f60a99b51ae498c44acbbe11031aed2a06a32be66d2122e6e2a7a16c087865cc9910160405180910390a1505050565b60008181526006602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16806108bb5760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f742065786973740000000000000000000000000060448201526064016103d8565b4264ffffffffff16603083901c64ffffffffff161061091c5760405162461bcd60e51b815260206004820152601460248201527f53776170206973207374696c6c206c6f636b656400000000000000000000000060448201526064016103d8565b60ff8216600090815260016020908152604080832054858452600690925290912080547fffffffffffffff0000000000000000000000000000000000000000000000000016905573ffffffffffffffffffffffffffffffffffffffff602883901c811691166109908183608087901c6110e6565b6040518481527ff6b6b4f7a13f02512c1b3aa8dcc4a07d7775a6a4becbd439efcbd37c5408e67f9060200160405180910390a150505050565b600086815260066020526040902080547fffffffffffffff00000000000000000000000000000000000000000000000000811690915578ffffffffffffffffffffffffffffffffffffffffffffffffff168115610ad657601581815260108051908990526000519151909190610a438a8a8a8a8a8861126c565b65ffffffffffff8116600090815260056020526040902054610a77906fffffffffffffffffffffffffffffffff16836113d7565b65ffffffffffff91909116600090815260056020526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff90921691909117905550610b549050565b610b03878787878760288778ffffffffffffffffffffffffffffffffffffffffffffffffff16901c61126c565b60ff871660009081526001602090815260408083205464ffffffffff85168452600490925290912054610b549173ffffffffffffffffffffffffffffffffffffffff908116911660808a901c6110e6565b50505050505050565b606060015b6101008160ff161015610c155760ff811660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16610c03578060ff1660011415610bac575090565b610bb76001826118a1565b60ff1667ffffffffffffffff811115610bd257610bd2611942565b604051908082528060200260200182016040528015610bfb578160200160208202803683370190505b509150610c15565b80610c0d816118c4565b915050610b62565b60015b8160ff168160ff161015610ca95760ff811660009081526001602081905260409091205473ffffffffffffffffffffffffffffffffffffffff16908490610c5f90846118a1565b60ff1681518110610c7257610c72611913565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610ca1816118c4565b915050610c18565b505090565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600260209081526040808320549385168352600382528083205464ffffffffff1660289490941b65ff0000000000169390931782526005905220546fffffffffffffffffffffffffffffffff165b92915050565b83600881901c61ffff16603c14610d785760405162461bcd60e51b815260206004820152601760248201527f53776170206e6f7420666f72207468697320636861696e00000000000000000060448201526064016103d8565b60008581526006602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff1615610def5760405162461bcd60e51b815260206004820152601360248201527f5377617020616c7265616479206578697374730000000000000000000000000060448201526064016103d8565b6020829052600751601b5183610e088888888686611459565b600088815260066020526040812080547fffffffffffffff000000000000000000000000000000000000000000000000001678ffffffffffffffffffffffffffffffffffffffffffffffffff841617905580610e638a610eb1565b91509150610e72818584611032565b6040518a81527f5ce4019f772fda6cb703b26bce3ec3006eb36b73f1d3a0eb441213317d9f5e9d9060200160405180910390a150505050505050505050565b608081901c600081610f2b5760405162461bcd60e51b815260206004820152602560248201527f5377617020616d6f756e74206d7573742062652067726561746572207468616e60448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016103d8565b5060ff821660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16603083901c42610f67610e1082611881565b64ffffffffff168264ffffffffff1611610fc35760405162461bcd60e51b815260206004820152601360248201527f45787069726520747320746f6f206561726c790000000000000000000000000060448201526064016103d8565b610fcf611c2082611881565b64ffffffffff168264ffffffffff161061102b5760405162461bcd60e51b815260206004820152601260248201527f45787069726520747320746f6f206c617465000000000000000000000000000060448201526064016103d8565b5050915091565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b1580156110a857600080fd5b505af11580156110bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e0919061166d565b50505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283928716916111ad91906117b8565b6000604051808303816000865af19150503d80600081146111ea576040519150601f19603f3d011682016040523d82523d6000602084013e6111ef565b606091505b5091509150818015611219575080511580611219575080806020019051810190611219919061166d565b6112655760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c6564000000000000000000000000000000000060448201526064016103d8565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff81166112cf5760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016103d8565b60008681526020868152604080832082527f5ef297f2881340f11ed62c7c08e0e0c235c333ad8f340d7285f529f16716968a8352808320815193845291830180825282905260ff85169083015260608201869052608082018590529060019060a0016020604051602081039080840390855afa158015611353573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610b545760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016103d8565b60006fffffffffffffffffffffffffffffffff83166113f6838561184d565b9150816fffffffffffffffffffffffffffffffff161015610d195760405162461bcd60e51b815260206004820152600860248201527f6f766572666c6f7700000000000000000000000000000000000000000000000060448201526064016103d8565b73ffffffffffffffffffffffffffffffffffffffff81166114bc5760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016103d8565b6000858152602080822081527f9862d877599564bcd97c37305a7b0fdbe621d9c2a125026f2ad601f754a75abc82526040808320815193845291830180825282905260ff85169083015260608201869052608082018590529060019060a0016020604051602081039080840390855afa15801561153d573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146115c15760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016103d8565b505050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146115ed57600080fd5b919050565b803564ffffffffff811681146115ed57600080fd5b803560ff811681146115ed57600080fd5b60006020828403121561162a57600080fd5b611633826115c9565b9392505050565b6000806040838503121561164d57600080fd5b611656836115c9565b9150611664602084016115c9565b90509250929050565b60006020828403121561167f57600080fd5b815161163381611971565b60006020828403121561169c57600080fd5b5035919050565b60008060008060008060c087890312156116bc57600080fd5b863595506020870135945060408701359350606087013592506116e160808801611607565b915060a08701356116f181611971565b809150509295509295509295565b6000806000806080858703121561171557600080fd5b843593506020850135925060408501359150606085013579ffffffffffffffffffffffffffffffffffffffffffffffffffff8116811461175457600080fd5b939692955090935050565b6000806040838503121561177257600080fd5b82359150611664602084016115f2565b60006020828403121561179457600080fd5b611633826115f2565b6000602082840312156117af57600080fd5b61163382611607565b6000825160005b818110156117d957602081860181015185830152016117bf565b818111156117e8576000828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561184157835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161180f565b50909695505050505050565b60006fffffffffffffffffffffffffffffffff808316818516808303821115611878576118786118e4565b01949350505050565b600064ffffffffff808316818516808303821115611878576118786118e4565b600060ff821660ff8416808210156118bb576118bb6118e4565b90039392505050565b600060ff821660ff8114156118db576118db6118e4565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b801515811461197f57600080fd5b5056fea164736f6c6343000806000a";

type MesonSwapTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonSwapTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonSwapTest__factory extends ContractFactory {
  constructor(...args: MesonSwapTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonSwapTest> {
    return super.deploy(token, overrides || {}) as Promise<MesonSwapTest>;
  }
  getDeployTransaction(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  attach(address: string): MesonSwapTest {
    return super.attach(address) as MesonSwapTest;
  }
  connect(signer: Signer): MesonSwapTest__factory {
    return super.connect(signer) as MesonSwapTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonSwapTestInterface {
    return new utils.Interface(_abi) as MesonSwapTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonSwapTest {
    return new Contract(address, _abi, signerOrProvider) as MesonSwapTest;
  }
}

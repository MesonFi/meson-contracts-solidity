/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MesonSwapTest, MesonSwapTestInterface } from "../MesonSwapTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapBonded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapPosted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapRequested",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "addTokenToSwapList",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "bondSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "cancelSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "recipient",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "depositToPool",
        type: "bool",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoinType",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "hasSwap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedSwap",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "inToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "postSwap",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedSwap",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "inToken",
        type: "address",
      },
    ],
    name: "requestSwap",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "requests",
    outputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "address",
        name: "inToken",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "total",
        type: "uint128",
      },
      {
        internalType: "uint48",
        name: "expireTs",
        type: "uint48",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61010060405260526080818152906119ed60a039805160209182012060408051808201825260088152674d65736f6e20466960c01b908401528051808201825260018152603160f81b908401528051928301919091527fe127d7b8d403871d7ed6b19024db4422e92aee79823ba78ad61e52ee2a5f9b98908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c001604051602081830303815290604052805190602001206000553480156100d457600080fd5b50611909806100e46000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806394149c1a1161007157806394149c1a146101425780639d86698514610157578063bcc20ff614610201578063d23d1c7614610214578063d541beb314610227578063f7888aec1461023a57600080fd5b80631548fdce146100ae5780633b11d5ac146100c3578063552c0120146100e957806368c4ac26146100fc5780638dac03cd1461012f575b600080fd5b6100c16100bc36600461159b565b610286565b005b6100d66100d13660046116c3565b61038b565b6040519081526020015b60405180910390f35b6100c16100f7366004611645565b6105b7565b61011f61010a366004611529565b60016020526000908152604090205460ff1681565b60405190151581526020016100e0565b61011f61013d36600461159b565b6107a8565b604051632000000f60e21b81526020016100e0565b6101b861016536600461159b565b600360208190526000918252604090912080546001820154600283015492909301546001600160a01b0391821693821692909116906001600160801b0381169065ffffffffffff600160801b9091041685565b604080516001600160a01b039687168152948616602086015292909416918301919091526001600160801b0316606082015265ffffffffffff909116608082015260a0016100e0565b6100d661020f366004611708565b6107cc565b6100c1610222366004611529565b610aa4565b6100c161023536600461159b565b610ad2565b61026e61024836600461154b565b60026020908152600092835260408084209091529082529020546001600160801b031681565b6040516001600160801b0390911681526020016100e0565b6000818152600360208190526040909120015481906001600160801b03166102c95760405162461bcd60e51b81526004016102c0906117c4565b60405180910390fd5b6000828152600360205260409020600101546001600160a01b0316156103315760405162461bcd60e51b815260206004820152601f60248201527f7377617020626f6e64656420746f20616e6f746865722070726f76696465720060448201526064016102c0565b60008281526003602090815260409182902060010180546001600160a01b03191633179055815184815291517f9dadb60bc000bbd7b49430723ed56b6aa35909dcab91ec2cb17ed5da7ae4ffd69281900390910190a15050565b6001600160a01b038116600090815260016020526040812054829060ff166103e95760405162461bcd60e51b81526020600482015260116024820152703ab739bab83837b93a32b2103a37b5b2b760791b60448201526064016102c0565b6000806000806103f98888610d7f565b9350935093509350600061040a3390565b90506000610420858565ffffffffffff16610ffb565b90506040518060a00160405280836001600160a01b0316815260200160006001600160a01b031681526020018a6001600160a01b03168152602001826001600160801b031681526020018465ffffffffffff168152506003600088815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160801b0302191690836001600160801b0316021790555060808201518160030160106101000a81548165ffffffffffff021916908365ffffffffffff160217905550905050610576898383611028565b6040518681527fa67aeefca6ffac499b56c6e714636f7ade5d82fde82aef50665ad3e88be5cb4b9060200160405180910390a1509398975050505050505050565b6000868152600360208190526040909120015486906001600160801b03166105f15760405162461bcd60e51b81526004016102c0906117c4565b6000878152600360208181526040808420815160a08101835281546001600160a01b0390811680835260018401548216838701526002840154909116938201939093529301546001600160801b0381166060850152600160801b900465ffffffffffff1660808401528951918a019190912092549192610675928b928a8a8a6110be565b604080820151602080840151606085015160008d81526003938490529490942080546001600160a01b0319908116825560018201805482169055600282018054909116905590910180546001600160b01b03191690559091851561075d576001600160a01b0380841660009081526002602090815260408083209386168352929052205461070c906001600160801b031682610ffb565b6001600160a01b03848116600090815260026020908152604080832093871683529290522080546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055610768565b610768838383611265565b6040518b81527f6921a2110a802468e8955f2885822155442ad19c60f42db0444a6993c23d20629060200160405180910390a15050505050505050505050565b6000818152600360208190526040822001546001600160801b031615155b92915050565b6001600160a01b038516600090815260016020526040812054869060ff1661082a5760405162461bcd60e51b81526020600482015260116024820152703ab739bab83837b93a32b2103a37b5b2b760791b60448201526064016102c0565b60008060008061083a8c8c610d7f565b60408051600081526020810180835286905260ff8d1691810191909152606081018e9052608081018d90529397509195509350915060019060a0016020604051602081039080840390855afa158015610897573d6000803e3d6000fd5b505050602060405103516001600160a01b03168a6001600160a01b0316146108f55760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b60448201526064016102c0565b33600061090a8565ffffffffffff8616610ffb565b90506040518060a001604052808d6001600160a01b03168152602001836001600160a01b031681526020018e6001600160a01b03168152602001826001600160801b031681526020018465ffffffffffff168152506003600088815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160801b0302191690836001600160801b0316021790555060808201518160030160106101000a81548165ffffffffffff021916908365ffffffffffff160217905550905050610a5f8d8d83611028565b6040518681527fd7a1fd45274eb446b18cdf83061f521e75114fa2c53ecb42bd853bba72097bab9060200160405180910390a150939c9b505050505050505050505050565b610acf816001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b50565b6000818152600360208190526040909120015481906001600160801b0316610b0c5760405162461bcd60e51b81526004016102c0906117c4565b6000828152600360208190526040909120015482904267ffffffffffffffff16600160801b90910465ffffffffffff1610610b7c5760405162461bcd60e51b815260206004820152601060248201526f1cddd85c081b9bdd08195e1c1a5c995960821b60448201526064016102c0565b6000600360008581526020019081526020016000206040518060a00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016003820160109054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681525050905060008160400151905060008260000151905060008360600151905060036000888152602001908152602001600020600080820160006101000a8154906001600160a01b0302191690556001820160006101000a8154906001600160a01b0302191690556002820160006101000a8154906001600160a01b0302191690556003820160006101000a8154906001600160801b0302191690556003820160106101000a81549065ffffffffffff02191690555050610d43838383611265565b6040518781527f5a399591cfd74c375a1ffd61c20221db0db82381f65516889ed13c8cd1f99d5b9060200160405180910390a150505050505050565b600080600080600080600080610d948a6113ad565b6040516bffffffffffffffffffffffff1960608f901b1660208201529397509195509350915084906034016040516020818303038152906040528051906020012014610e1b5760405162461bcd60e51b81526020600482015260166024820152750d2dca8ded6cadc40c8decae640dcdee840dac2e8c6d60531b60448201526064016102c0565b6000836001600160801b031611610e825760405162461bcd60e51b815260206004820152602560248201527f7377617020616d6f756e74206d7573742062652067726561746572207468616e604482015264207a65726f60d81b60648201526084016102c0565b42610e8f610e1082611817565b65ffffffffffff168265ffffffffffff1611610ee45760405162461bcd60e51b81526020600482015260146024820152736578706972657320747320746f6f206561726c7960601b60448201526064016102c0565b610ef0611c2082611817565b65ffffffffffff168265ffffffffffff1610610f445760405162461bcd60e51b81526020600482015260136024820152726578706972657320747320746f6f206c61746560681b60448201526064016102c0565b6000610f8d8c80516020918201206000546040805161190160f01b8186015260228101929092526042808301939093528051808303909301835260629091019052805191012090565b600081815260036020819052604090912001549091506001600160801b031615610fe95760405162461bcd60e51b815260206004820152600d60248201526c1cddd85c0818dbdb999b1a58dd609a1b60448201526064016102c0565b9b939a50919850965090945050505050565b60006001600160801b03831661101183856117ec565b9150816001600160801b031610156107c657600080fd5b6040516323b872dd60e01b81526001600160a01b0383811660048301523060248301526001600160801b03831660448301528416906323b872dd90606401602060405180830381600087803b15801561108057600080fd5b505af1158015611094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b8919061157e565b50505050565b6001600160a01b0384166111145760405162461bcd60e51b815260206004820152601e60248201527f7369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016102c0565b60006040518060600160405280602b81526020016118d2602b9139805160209182012060408051928301919091528101899052606081018890526080016040516020818303038152906040528051906020012090506000868260405160200161119492919061190160f01b81526002810192909252602282015260420190565b60408051601f1981840301815282825280516020918201206000845290830180835281905260ff8616918301919091526060820187905260808201869052915060019060a0016020604051602081039080840390855afa1580156111fc573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b03161461125a5760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b60448201526064016102c0565b505050505050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526001600160801b038516604480840191909152845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916112fc9190611789565b6000604051808303816000865af19150503d8060008114611339576040519150601f19603f3d011682016040523d82523d6000602084013e61133e565b606091505b5091509150818015611368575080511580611368575080806020019051810190611368919061157e565b6113a65760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b60448201526064016102c0565b5050505050565b6000806000806000806000806000898060200190518101906113cf91906115b4565b5050945094509450945094506040518060a001604052806063815260200161186f606391398051906020012085146114495760405162461bcd60e51b815260206004820152601d60248201527f496e76616c69642073776170207265717565737420747970656861736800000060448201526064016102c0565b9299919850965090945092505050565b80356001600160a01b038116811461147057600080fd5b919050565b600082601f83011261148657600080fd5b813567ffffffffffffffff808211156114a1576114a161184a565b604051601f8301601f19908116603f011681019082821181831017156114c9576114c961184a565b816040528381528660208588010111156114e257600080fd5b836020870160208301376000602085830101528094505050505092915050565b805165ffffffffffff8116811461147057600080fd5b803560ff8116811461147057600080fd5b60006020828403121561153b57600080fd5b61154482611459565b9392505050565b6000806040838503121561155e57600080fd5b61156783611459565b915061157560208401611459565b90509250929050565b60006020828403121561159057600080fd5b815161154481611860565b6000602082840312156115ad57600080fd5b5035919050565b600080600080600080600060e0888a0312156115cf57600080fd5b875196506020880151955060408801516001600160801b03811681146115f457600080fd5b945061160260608901611502565b935061161060808901611502565b60a08901519093506001600160e01b03198116811461162e57600080fd5b8092505060c0880151905092959891949750929550565b60008060008060008060c0878903121561165e57600080fd5b86359550602087013567ffffffffffffffff81111561167c57600080fd5b61168889828a01611475565b95505060408701359350606087013592506116a560808801611518565b915060a08701356116b581611860565b809150509295509295509295565b600080604083850312156116d657600080fd5b823567ffffffffffffffff8111156116ed57600080fd5b6116f985828601611475565b92505061157560208401611459565b60008060008060008060c0878903121561172157600080fd5b863567ffffffffffffffff81111561173857600080fd5b61174489828a01611475565b96505061175360208801611459565b945061176160408801611459565b9350606087013592506080870135915061177d60a08801611518565b90509295509295509295565b6000825160005b818110156117aa5760208186018101518583015201611790565b818111156117b9576000828501525b509190910192915050565b6020808252600e908201526d1cddd85c081b9bdd08199bdd5b9960921b604082015260600190565b60006001600160801b0380831681851680830382111561180e5761180e611834565b01949350505050565b600065ffffffffffff80831681851680830382111561180e5761180e5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610acf57600080fdfe537761705265717565737428627974657320696e546f6b656e2c75696e7431323820616d6f756e742c75696e743438206665652c75696e7434382065787069726554732c627974657334206f7574436861696e2c6279746573206f7574546f6b656e295377617052656c656173652862797465733332207377617049642c627974657320726563697069656e7429a164736f6c6343000806000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";

type MesonSwapTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonSwapTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonSwapTest__factory extends ContractFactory {
  constructor(...args: MesonSwapTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonSwapTest> {
    return super.deploy(overrides || {}) as Promise<MesonSwapTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonSwapTest {
    return super.attach(address) as MesonSwapTest;
  }
  connect(signer: Signer): MesonSwapTest__factory {
    return super.connect(signer) as MesonSwapTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonSwapTestInterface {
    return new utils.Interface(_abi) as MesonSwapTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonSwapTest {
    return new Contract(address, _abi, signerOrProvider) as MesonSwapTest;
  }
}

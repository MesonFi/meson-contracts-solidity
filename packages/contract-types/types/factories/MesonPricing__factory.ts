/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MesonPricing, MesonPricingInterface } from "../MesonPricing";

const _abi = [
  {
    inputs: [],
    name: "getCurrentChain",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalDemandFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalSupplyFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x610100604052605260808181529061021f60a039805160209182012060408051808201825260088152674d65736f6e20466960c01b908401528051808201825260018152603160f81b908401528051928301919091527fe127d7b8d403871d7ed6b19024db4422e92aee79823ba78ad61e52ee2a5f9b98908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c001604051602081830303815290604052805190602001206000553480156100d457600080fd5b5061013b806100e46000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806361565d251461005157806368c4ac261461008d57806372cbf72e146100c0578063a8f81b1a146100d5575b600080fd5b61007a61005f3660046100fe565b6001600160a01b031660009081526004602052604090205490565b6040519081526020015b60405180910390f35b6100b061009b3660046100fe565b60016020526000908152604090205460ff1681565b6040519015158152602001610084565b604051632000000f60e21b8152602001610084565b61007a6100e33660046100fe565b6001600160a01b031660009081526005602052604090205490565b60006020828403121561011057600080fd5b81356001600160a01b038116811461012757600080fd5b939250505056fea164736f6c6343000806000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";

type MesonPricingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonPricingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonPricing__factory extends ContractFactory {
  constructor(...args: MesonPricingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonPricing> {
    return super.deploy(overrides || {}) as Promise<MesonPricing>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonPricing {
    return super.attach(address) as MesonPricing;
  }
  connect(signer: Signer): MesonPricing__factory {
    return super.connect(signer) as MesonPricing__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonPricingInterface {
    return new utils.Interface(_abi) as MesonPricingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonPricing {
    return new Contract(address, _abi, signerOrProvider) as MesonPricing;
  }
}

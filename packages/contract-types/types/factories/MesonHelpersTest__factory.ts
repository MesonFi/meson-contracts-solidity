/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonHelpersTest,
  MesonHelpersTestInterface,
} from "../MesonHelpersTest";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "checkReleaseSignature",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "checkRequestSignature",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "decodeSwap",
    outputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint40",
        name: "expireTs",
        type: "uint40",
      },
      {
        internalType: "uint8",
        name: "inTokenIndex",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "outTokenIndex",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint40",
        name: "fee",
        type: "uint40",
      },
      {
        internalType: "uint40",
        name: "expireTs",
        type: "uint40",
      },
      {
        internalType: "bytes4",
        name: "outChain",
        type: "bytes4",
      },
      {
        internalType: "uint8",
        name: "outToken",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "inToken",
        type: "uint8",
      },
    ],
    name: "encodeSwap",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoinType",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "getSwapId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405180608001604052806052815260200161093560529139805160209182012060408051808201825260088152674d65736f6e20466960c01b908401528051808201825260018152603160f81b908401528051928301919091527fe127d7b8d403871d7ed6b19024db4422e92aee79823ba78ad61e52ee2a5f9b98908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f198184030181529190528051602090910120600055610845806100f06000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063936e27d611610050578063936e27d6146101b457806394149c1a146101c7578063eb397fab146101f557600080fd5b8063058aa9ba146100775780637019cda31461008c57806371c3dbbe14610193575b600080fd5b61008a61008536600461062c565b61025a565b005b61017d61009a3660046106db565b604080517fffffffffffffffffffffffffffffffff00000000000000000000000000000000608089901b1660208201527fffffffffff00000000000000000000000000000000000000000000000000000060d888811b8216603084015287901b1660358201527fffffffff000000000000000000000000000000000000000000000000000000008516603a8201527fff0000000000000000000000000000000000000000000000000000000000000060f885811b8216603e84015284901b16603f8201526060910160405160208183030381529060405290509695505050505050565b60405161018a919061079a565b60405180910390f35b6101a66101a1366004610781565b610273565b60405190815260200161018a565b61008a6101c236600461068b565b610287565b6040517f8000003c00000000000000000000000000000000000000000000000000000000815260200161018a565b610218610203366004610781565b608081901c91603082901c9190600882901c90565b604080516fffffffffffffffffffffffffffffffff909516855264ffffffffff909316602085015260ff9182169284019290925216606082015260800161018a565b61026b86866000548686868a610384565b505050505050565b600061028182600054610555565b92915050565b60408051600081526020810180835287905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156102da573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461037d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064015b60405180910390fd5b5050505050565b60006040518060600160405280602b815260200161080e602b91398051602090910120905073ffffffffffffffffffffffffffffffffffffffff8216610426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d707479206164647265737300006044820152606401610374565b6000604051886000526014600c20604052826000528960205260606000206022526019600053600180536002889052604260009081209082526020820160408181529082905260ff8716908301526060820188905260808201879052915060019060a0016020604051602081039080840390855afa1580156104ac573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461054a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610374565b505050505050505050565b604080518082018252601c81527f53776170526571756573742875696e7432353620656e636f646564290000000060209182015281517f9e30b23744f36fc02f504355e3ffa6d1fda34e5ac9e3c78a1d6e7dffbc9c57266000818152928690529282206022529091906019835360018053836002526042600020925080604052505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461060157600080fd5b919050565b803564ffffffffff8116811461060157600080fd5b803560ff8116811461060157600080fd5b60008060008060008060c0878903121561064557600080fd5b86359550610655602088016105dd565b9450610663604088016105dd565b9350606087013592506080870135915061067f60a0880161061b565b90509295509295509295565b600080600080600060a086880312156106a357600080fd5b853594506106b3602087016105dd565b935060408601359250606086013591506106cf6080870161061b565b90509295509295909350565b60008060008060008060c087890312156106f457600080fd5b86356fffffffffffffffffffffffffffffffff8116811461071457600080fd5b955061072260208801610606565b945061073060408801610606565b935060608701357fffffffff000000000000000000000000000000000000000000000000000000008116811461076557600080fd5b92506107736080880161061b565b915061067f60a0880161061b565b60006020828403121561079357600080fd5b5035919050565b600060208083528351808285015260005b818110156107c7578581018301518582016040015282016107ab565b818111156107d9576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201604001939250505056fe5377617052656c656173652862797465733332207377617049642c627974657320726563697069656e7429a164736f6c6343000806000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";

type MesonHelpersTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonHelpersTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonHelpersTest__factory extends ContractFactory {
  constructor(...args: MesonHelpersTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonHelpersTest> {
    return super.deploy(overrides || {}) as Promise<MesonHelpersTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonHelpersTest {
    return super.attach(address) as MesonHelpersTest;
  }
  connect(signer: Signer): MesonHelpersTest__factory {
    return super.connect(signer) as MesonHelpersTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonHelpersTestInterface {
    return new utils.Interface(_abi) as MesonHelpersTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonHelpersTest {
    return new Contract(address, _abi, signerOrProvider) as MesonHelpersTest;
  }
}

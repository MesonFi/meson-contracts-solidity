/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonHelpersTest,
  MesonHelpersTestInterface,
} from "../MesonHelpersTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "checkReleaseSignature",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "checkRequestSignature",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoinType",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610568806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063058aa9ba14610046578063936e27d61461005b57806394149c1a1461006e575b600080fd5b610059610054366004610481565b6100a1565b005b6100596100693660046104e0565b610103565b604080517f8000003c00000000000000000000000000000000000000000000000000000000815290519081900360200190f35b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1660208201526100fb9087906034016040516020818303038152906040528051906020012060005487878787610200565b505050505050565b60408051600081526020810180835287905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610156573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146101f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064015b60405180910390fd5b5050505050565b73ffffffffffffffffffffffffffffffffffffffff841661027d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016101f0565b60006040518060600160405280602b8152602001610531602b913980516020918201206040805192830191909152810189905260608101889052608001604051602081830303815290604052805190602001209050600086826040516020016103189291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201206000845290830180835281905260ff8616918301919091526060820187905260808201869052915060019060a0016020604051602081039080840390855afa15801561039e573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161461043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064016101f0565b505050505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461046b57600080fd5b919050565b803560ff8116811461046b57600080fd5b60008060008060008060c0878903121561049a57600080fd5b863595506104aa60208801610447565b94506104b860408801610447565b935060608701359250608087013591506104d460a08801610470565b90509295509295509295565b600080600080600060a086880312156104f857600080fd5b8535945061050860208701610447565b9350604086013592506060860135915061052460808701610470565b9050929550929590935056fe5377617052656c656173652862797465733332207377617049642c627974657320726563697069656e7429a164736f6c6343000806000a";

type MesonHelpersTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonHelpersTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonHelpersTest__factory extends ContractFactory {
  constructor(...args: MesonHelpersTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonHelpersTest> {
    return super.deploy(overrides || {}) as Promise<MesonHelpersTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonHelpersTest {
    return super.attach(address) as MesonHelpersTest;
  }
  connect(signer: Signer): MesonHelpersTest__factory {
    return super.connect(signer) as MesonHelpersTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonHelpersTestInterface {
    return new utils.Interface(_abi) as MesonHelpersTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonHelpersTest {
    return new Contract(address, _abi, signerOrProvider) as MesonHelpersTest;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonHelpersTest,
  MesonHelpersTestInterface,
} from "../MesonHelpersTest";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "checkReleaseSignature",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "checkRequestSignature",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedSwap",
        type: "bytes",
      },
    ],
    name: "decodeSwapInput",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "uint48",
        name: "",
        type: "uint48",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedSwap",
        type: "bytes",
      },
    ],
    name: "decodeSwapOutput",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "inToken",
        type: "bytes",
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint48",
        name: "fee",
        type: "uint48",
      },
      {
        internalType: "uint48",
        name: "expireTs",
        type: "uint48",
      },
      {
        internalType: "bytes4",
        name: "outChain",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "outToken",
        type: "bytes",
      },
    ],
    name: "encodeSwap",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoinType",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedSwap",
        type: "bytes",
      },
    ],
    name: "getSwapId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051806080016040528060528152602001610de260529139805160209182012060408051808201825260088152674d65736f6e20466960c01b908401528051808201825260018152603160f81b908401528051928301919091527fe127d7b8d403871d7ed6b19024db4422e92aee79823ba78ad61e52ee2a5f9b98908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f198184030181529190528051602090910120600055610cf2806100f06000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636ee0bfbb1161005b5780636ee0bfbb1461011e578063936e27d61461013f57806394149c1a14610152578063bf141ad31461018057600080fd5b8063058aa9ba146100825780635c1a5fc4146100975780635f5a586c146100d7575b600080fd5b61009561009036600461096e565b6101a0565b005b6100aa6100a5366004610a8e565b610202565b604080516fffffffffffffffffffffffffffffffff90931683526020830191909152015b60405180910390f35b6100ea6100e5366004610a8e565b61021a565b604080519384526fffffffffffffffffffffffffffffffff909216602084015265ffffffffffff16908201526060016100ce565b61013161012c366004610a8e565b610236565b6040519081526020016100ce565b61009561014d3660046109cd565b61024c565b6040517f8000003c0000000000000000000000000000000000000000000000000000000081526020016100ce565b61019361018e366004610b00565b610349565b6040516100ce9190610bb5565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1660208201526101fa9087906034016040516020818303038152906040528051906020012060005487878787610401565b505050505050565b60008061020f8484610648565b915091509250929050565b600080600061022985856106f8565b9250925092509250925092565b600061024583836000546107ae565b9392505050565b60408051600081526020810180835287905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa15801561029f573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610342576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064015b60405180910390fd5b5050505050565b60606040518060a0016040528060638152602001610c586063913980516020918201208851898301208451858401206040805194850193909352918301526fffffffffffffffffffffffffffffffff8816606083015265ffffffffffff8088166080840152861660a08301527fffffffff00000000000000000000000000000000000000000000000000000000851660c083015260e08201526101000160405160208183030381529060405290509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff841661047e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7369676e65722063616e6e6f7420626520656d707479206164647265737300006044820152606401610339565b60006040518060600160405280602b8152602001610cbb602b913980516020918201206040805192830191909152810189905260608101889052608001604051602081830303815290604052805190602001209050600086826040516020016105199291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201206000845290830180835281905260ff8616918301919091526060820187905260808201869052915060019060a0016020604051602081039080840390855afa15801561059f573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161461063d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610339565b505050505050505050565b60008080808061065a86880188610a1d565b965050505093505092506040518060a0016040528060638152602001610c58606391398051906020012083146106ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f496e76616c6964207377617020726571756573742074797065686173680000006044820152606401610339565b90969095509350505050565b600080808080808061070c888a018a610a1d565b50509450509350935093506040518060a0016040528060638152602001610c586063913980519060200120841461079f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f496e76616c6964207377617020726571756573742074797065686173680000006044820152606401610339565b91955093509150509250925092565b60008084846040516107c1929190610ba5565b6040519081900381207f1901000000000000000000000000000000000000000000000000000000000000602083015260228201859052604282018190529150606201604051602081830303815290604052805190602001209150509392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461084757600080fd5b919050565b80357fffffffff000000000000000000000000000000000000000000000000000000008116811461084757600080fd5b600082601f83011261088d57600080fd5b813567ffffffffffffffff808211156108a8576108a8610c28565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156108ee576108ee610c28565b8160405283815286602085880101111561090757600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356fffffffffffffffffffffffffffffffff8116811461084757600080fd5b803565ffffffffffff8116811461084757600080fd5b803560ff8116811461084757600080fd5b60008060008060008060c0878903121561098757600080fd5b8635955061099760208801610823565b94506109a560408801610823565b935060608701359250608087013591506109c160a0880161095d565b90509295509295509295565b600080600080600060a086880312156109e557600080fd5b853594506109f560208701610823565b93506040860135925060608601359150610a116080870161095d565b90509295509295909350565b600080600080600080600060e0888a031215610a3857600080fd5b8735965060208801359550610a4f60408901610927565b9450610a5d60608901610947565b9350610a6b60808901610947565b9250610a7960a0890161084c565b915060c0880135905092959891949750929550565b60008060208385031215610aa157600080fd5b823567ffffffffffffffff80821115610ab957600080fd5b818501915085601f830112610acd57600080fd5b813581811115610adc57600080fd5b866020828501011115610aee57600080fd5b60209290920196919550909350505050565b60008060008060008060c08789031215610b1957600080fd5b863567ffffffffffffffff80821115610b3157600080fd5b610b3d8a838b0161087c565b9750610b4b60208a01610927565b9650610b5960408a01610947565b9550610b6760608a01610947565b9450610b7560808a0161084c565b935060a0890135915080821115610b8b57600080fd5b50610b9889828a0161087c565b9150509295509295509295565b8183823760009101908152919050565b600060208083528351808285015260005b81811015610be257858101830151858201604001528201610bc6565b81811115610bf4576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe537761705265717565737428627974657320696e546f6b656e2c75696e7431323820616d6f756e742c75696e743438206665652c75696e7434382065787069726554732c627974657334206f7574436861696e2c6279746573206f7574546f6b656e295377617052656c656173652862797465733332207377617049642c627974657320726563697069656e7429a164736f6c6343000806000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";

type MesonHelpersTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonHelpersTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonHelpersTest__factory extends ContractFactory {
  constructor(...args: MesonHelpersTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonHelpersTest> {
    return super.deploy(overrides || {}) as Promise<MesonHelpersTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonHelpersTest {
    return super.attach(address) as MesonHelpersTest;
  }
  connect(signer: Signer): MesonHelpersTest__factory {
    return super.connect(signer) as MesonHelpersTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonHelpersTestInterface {
    return new utils.Interface(_abi) as MesonHelpersTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonHelpersTest {
    return new Contract(address, _abi, signerOrProvider) as MesonHelpersTest;
  }
}

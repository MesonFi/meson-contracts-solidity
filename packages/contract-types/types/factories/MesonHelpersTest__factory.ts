/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonHelpersTest,
  MesonHelpersTestInterface,
} from "../MesonHelpersTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "checkReleaseSignature",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "checkRequestSignature",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedSwap",
        type: "bytes",
      },
    ],
    name: "decodeSwapInput",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expireTs",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "inToken",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes4",
        name: "outChain",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "outToken",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "recipient",
        type: "bytes",
      },
    ],
    name: "encodeSwap",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentChain",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expireTs",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "inToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes4",
        name: "outChain",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "outToken",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "recipient",
        type: "bytes",
      },
    ],
    name: "getSwapId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x610100604052605260808181529061098360a039805160209182012060408051808201825260088152674d65736f6e20466960c01b90840152805180820182526001808252603160f81b918501919091528151938401929092527fe127d7b8d403871d7ed6b19024db4422e92aee79823ba78ad61e52ee2a5f9b98908301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606083015260808201523060a082015260c001604051602081830303815290604052805190602001206000553480156100d757600080fd5b5061089c806100e76000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806369d785d21161005b57806369d785d2146100d957806372cbf72e146100f9578063936e27d61461010e5780639998f1291461012157600080fd5b80633408e47014610082578063375ef84c146100965780635f5a586c146100ab575b600080fd5b604051600181526020015b60405180910390f35b6100a96100a436600461059f565b610142565b005b6100be6100b9366004610659565b610156565b6040805193845260208401929092529082015260600161008d565b6100ec6100e736600461072f565b610171565b60405161008d91906107a2565b604051632000000f60e21b815260200161008d565b6100a961011c36600461059f565b6101ff565b61013461012f366004610696565b61020c565b60405190815260200161008d565b61014f858585858561025f565b5050505050565b6000806000610164846102fc565b9250925092509193909250565b60606040518060a001604052806069815260200161082760699139805160209182012087518883012085518684012085518685012060408051958601949094529284018b90526060840191909152608083018890526001600160e01b0319871660a084015260c083015260e08201526101000160405160208183030381529060405290509695505050505050565b61014f85858585856103a7565b6040516bffffffffffffffffffffffff19606087901b16602082015260009061024c90889060340160405160208183030381529060405287878787610171565b8051906020012090509695505050505050565b604080518082018252601b81527f5377617052656c6561736528627974657333322073776170496429000000000060209182015290516000916102cf917ffb1f98601c589a04e2ceca199119c17bd547893fffb8d088acdae5aff4f9b19d91899101918252602082015260400190565b6040516020818303038152906040528051906020012090506102f481868686866103b0565b505050505050565b60008060008060008060008780602001905181019061031b91906105f9565b50505093509350935093506040518060a0016040528060698152602001610827606991398051906020012084146103995760405162461bcd60e51b815260206004820152601d60248201527f496e76616c69642073776170207265717565737420747970656861736800000060448201526064015b60405180910390fd5b919790965090945092505050565b61014f85858585855b6000805460405161190160f01b602082015260228101919091526042810187905260620160408051601f19818403018152919052805160209091012090506001600160a01b0385166104445760405162461bcd60e51b815260206004820152601e60248201527f7369676e65722063616e6e6f7420626520656d707479206164647265737300006044820152606401610390565b60408051600081526020810180835283905260ff841691810191909152606081018590526080810184905260019060a0016020604051602081039080840390855afa158015610497573d6000803e3d6000fd5b505050602060405103516001600160a01b0316856001600160a01b0316146102f45760405162461bcd60e51b8152602060048201526012602482015271696e76616c6964207369676e61747572657360701b6044820152606401610390565b80356001600160a01b038116811461050d57600080fd5b919050565b600082601f83011261052357600080fd5b813567ffffffffffffffff8082111561053e5761053e6107f7565b604051601f8301601f19908116603f01168101908282118183101715610566576105666107f7565b8160405283815286602085880101111561057f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a086880312156105b757600080fd5b853594506105c7602087016104f6565b93506040860135925060608601359150608086013560ff811681146105eb57600080fd5b809150509295509295909350565b600080600080600080600060e0888a03121561061457600080fd5b87519650602088015195506040880151945060608801519350608088015161063b8161080d565b8093505060a0880151915060c0880151905092959891949750929550565b60006020828403121561066b57600080fd5b813567ffffffffffffffff81111561068257600080fd5b61068e84828501610512565b949350505050565b60008060008060008060c087890312156106af57600080fd5b863595506106bf602088016104f6565b94506040870135935060608701356106d68161080d565b9250608087013567ffffffffffffffff808211156106f357600080fd5b6106ff8a838b01610512565b935060a089013591508082111561071557600080fd5b5061072289828a01610512565b9150509295509295509295565b60008060008060008060c0878903121561074857600080fd5b86359550602087013567ffffffffffffffff8082111561076757600080fd5b6107738a838b01610512565b9650604089013595506060890135915061078c8261080d565b909350608088013590808211156106f357600080fd5b600060208083528351808285015260005b818110156107cf578581018301518582016040015282016107b3565b818111156107e1576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461082357600080fd5b5056fe53776170526571756573742875696e743235362065787069726554732c627974657320696e546f6b656e2c75696e7432353620616d6f756e742c627974657334206f7574436861696e2c6279746573206f7574546f6b656e2c627974657320726563697069656e7429a164736f6c6343000806000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";

type MesonHelpersTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonHelpersTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonHelpersTest__factory extends ContractFactory {
  constructor(...args: MesonHelpersTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonHelpersTest> {
    return super.deploy(overrides || {}) as Promise<MesonHelpersTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonHelpersTest {
    return super.attach(address) as MesonHelpersTest;
  }
  connect(signer: Signer): MesonHelpersTest__factory {
    return super.connect(signer) as MesonHelpersTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonHelpersTestInterface {
    return new utils.Interface(_abi) as MesonHelpersTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonHelpersTest {
    return new Contract(address, _abi, signerOrProvider) as MesonHelpersTest;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MesonSwap, MesonSwapInterface } from "../MesonSwap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapBonded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapPosted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapRequested",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "bondSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "cancelSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "recipient",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "depositToPool",
        type: "bool",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoinType",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedSwap",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "inToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "postSwap",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedSwap",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "inToken",
        type: "address",
      },
    ],
    name: "requestSwap",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "requests",
    outputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "address",
        name: "inToken",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "total",
        type: "uint128",
      },
      {
        internalType: "uint48",
        name: "expireTs",
        type: "uint48",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611884806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806394149c1a1161006657806394149c1a146101195780639d8669851461012e578063bcc20ff6146101d8578063d541beb3146101eb578063f7888aec146101fe57600080fd5b80631548fdce146100985780633b11d5ac146100ad578063552c0120146100d357806368c4ac26146100e6575b600080fd5b6100ab6100a6366004611513565b61024a565b005b6100c06100bb36600461163b565b61034f565b6040519081526020015b60405180910390f35b6100ab6100e13660046115bd565b61057b565b6101096100f43660046114a1565b60016020526000908152604090205460ff1681565b60405190151581526020016100ca565b604051632000000f60e21b81526020016100ca565b61018f61013c366004611513565b600360208190526000918252604090912080546001820154600283015492909301546001600160a01b0391821693821692909116906001600160801b0381169065ffffffffffff600160801b9091041685565b604080516001600160a01b039687168152948616602086015292909416918301919091526001600160801b0316606082015265ffffffffffff909116608082015260a0016100ca565b6100c06101e6366004611680565b61076c565b6100ab6101f9366004611513565b610a44565b61023261020c3660046114c3565b60026020908152600092835260408084209091529082529020546001600160801b031681565b6040516001600160801b0390911681526020016100ca565b6000818152600360208190526040909120015481906001600160801b031661028d5760405162461bcd60e51b81526004016102849061173c565b60405180910390fd5b6000828152600360205260409020600101546001600160a01b0316156102f55760405162461bcd60e51b815260206004820152601f60248201527f7377617020626f6e64656420746f20616e6f746865722070726f7669646572006044820152606401610284565b60008281526003602090815260409182902060010180546001600160a01b03191633179055815184815291517f9dadb60bc000bbd7b49430723ed56b6aa35909dcab91ec2cb17ed5da7ae4ffd69281900390910190a15050565b6001600160a01b038116600090815260016020526040812054829060ff166103ad5760405162461bcd60e51b81526020600482015260116024820152703ab739bab83837b93a32b2103a37b5b2b760791b6044820152606401610284565b6000806000806103bd8888610cf1565b935093509350935060006103ce3390565b905060006103e4858565ffffffffffff16610f6d565b90506040518060a00160405280836001600160a01b0316815260200160006001600160a01b031681526020018a6001600160a01b03168152602001826001600160801b031681526020018465ffffffffffff168152506003600088815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160801b0302191690836001600160801b0316021790555060808201518160030160106101000a81548165ffffffffffff021916908365ffffffffffff16021790555090505061053a898383610fa0565b6040518681527fa67aeefca6ffac499b56c6e714636f7ade5d82fde82aef50665ad3e88be5cb4b9060200160405180910390a1509398975050505050505050565b6000868152600360208190526040909120015486906001600160801b03166105b55760405162461bcd60e51b81526004016102849061173c565b6000878152600360208181526040808420815160a08101835281546001600160a01b0390811680835260018401548216838701526002840154909116938201939093529301546001600160801b0381166060850152600160801b900465ffffffffffff1660808401528951918a019190912092549192610639928b928a8a8a611036565b604080820151602080840151606085015160008d81526003938490529490942080546001600160a01b0319908116825560018201805482169055600282018054909116905590910180546001600160b01b031916905590918515610721576001600160a01b038084166000908152600260209081526040808320938616835292905220546106d0906001600160801b031682610f6d565b6001600160a01b03848116600090815260026020908152604080832093871683529290522080546fffffffffffffffffffffffffffffffff19166001600160801b039290921691909117905561072c565b61072c8383836111dd565b6040518b81527f6921a2110a802468e8955f2885822155442ad19c60f42db0444a6993c23d20629060200160405180910390a15050505050505050505050565b6001600160a01b038516600090815260016020526040812054869060ff166107ca5760405162461bcd60e51b81526020600482015260116024820152703ab739bab83837b93a32b2103a37b5b2b760791b6044820152606401610284565b6000806000806107da8c8c610cf1565b60408051600081526020810180835286905260ff8d1691810191909152606081018e9052608081018d90529397509195509350915060019060a0016020604051602081039080840390855afa158015610837573d6000803e3d6000fd5b505050602060405103516001600160a01b03168a6001600160a01b0316146108955760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b6044820152606401610284565b3360006108aa8565ffffffffffff8616610f6d565b90506040518060a001604052808d6001600160a01b03168152602001836001600160a01b031681526020018e6001600160a01b03168152602001826001600160801b031681526020018465ffffffffffff168152506003600088815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160801b0302191690836001600160801b0316021790555060808201518160030160106101000a81548165ffffffffffff021916908365ffffffffffff1602179055509050506109ff8d8d83610fa0565b6040518681527fd7a1fd45274eb446b18cdf83061f521e75114fa2c53ecb42bd853bba72097bab9060200160405180910390a150939c9b505050505050505050505050565b6000818152600360208190526040909120015481906001600160801b0316610a7e5760405162461bcd60e51b81526004016102849061173c565b6000828152600360208190526040909120015482904267ffffffffffffffff16600160801b90910465ffffffffffff1610610aee5760405162461bcd60e51b815260206004820152601060248201526f1cddd85c081b9bdd08195e1c1a5c995960821b6044820152606401610284565b6000600360008581526020019081526020016000206040518060a00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016003820160109054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681525050905060008160400151905060008260000151905060008360600151905060036000888152602001908152602001600020600080820160006101000a8154906001600160a01b0302191690556001820160006101000a8154906001600160a01b0302191690556002820160006101000a8154906001600160a01b0302191690556003820160006101000a8154906001600160801b0302191690556003820160106101000a81549065ffffffffffff02191690555050610cb58383836111dd565b6040518781527f5a399591cfd74c375a1ffd61c20221db0db82381f65516889ed13c8cd1f99d5b9060200160405180910390a150505050505050565b600080600080600080600080610d068a611325565b6040516bffffffffffffffffffffffff1960608f901b1660208201529397509195509350915084906034016040516020818303038152906040528051906020012014610d8d5760405162461bcd60e51b81526020600482015260166024820152750d2dca8ded6cadc40c8decae640dcdee840dac2e8c6d60531b6044820152606401610284565b6000836001600160801b031611610df45760405162461bcd60e51b815260206004820152602560248201527f7377617020616d6f756e74206d7573742062652067726561746572207468616e604482015264207a65726f60d81b6064820152608401610284565b42610e01610e108261178f565b65ffffffffffff168265ffffffffffff1611610e565760405162461bcd60e51b81526020600482015260146024820152736578706972657320747320746f6f206561726c7960601b6044820152606401610284565b610e62611c208261178f565b65ffffffffffff168265ffffffffffff1610610eb65760405162461bcd60e51b81526020600482015260136024820152726578706972657320747320746f6f206c61746560681b6044820152606401610284565b6000610eff8c80516020918201206000546040805161190160f01b8186015260228101929092526042808301939093528051808303909301835260629091019052805191012090565b600081815260036020819052604090912001549091506001600160801b031615610f5b5760405162461bcd60e51b815260206004820152600d60248201526c1cddd85c0818dbdb999b1a58dd609a1b6044820152606401610284565b9b939a50919850965090945050505050565b60006001600160801b038316610f838385611764565b9150816001600160801b03161015610f9a57600080fd5b92915050565b6040516323b872dd60e01b81526001600160a01b0383811660048301523060248301526001600160801b03831660448301528416906323b872dd90606401602060405180830381600087803b158015610ff857600080fd5b505af115801561100c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103091906114f6565b50505050565b6001600160a01b03841661108c5760405162461bcd60e51b815260206004820152601e60248201527f7369676e65722063616e6e6f7420626520656d707479206164647265737300006044820152606401610284565b60006040518060600160405280602b815260200161184d602b9139805160209182012060408051928301919091528101899052606081018890526080016040516020818303038152906040528051906020012090506000868260405160200161110c92919061190160f01b81526002810192909252602282015260420190565b60408051601f1981840301815282825280516020918201206000845290830180835281905260ff8616918301919091526060820187905260808201869052915060019060a0016020604051602081039080840390855afa158015611174573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b0316146111d25760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b6044820152606401610284565b505050505050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526001600160801b038516604480840191909152845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916112749190611701565b6000604051808303816000865af19150503d80600081146112b1576040519150601f19603f3d011682016040523d82523d6000602084013e6112b6565b606091505b50915091508180156112e05750805115806112e05750808060200190518101906112e091906114f6565b61131e5760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b6044820152606401610284565b5050505050565b600080600080600080600080600089806020019051810190611347919061152c565b5050945094509450945094506040518060a00160405280606381526020016117ea606391398051906020012085146113c15760405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964207377617020726571756573742074797065686173680000006044820152606401610284565b9299919850965090945092505050565b80356001600160a01b03811681146113e857600080fd5b919050565b600082601f8301126113fe57600080fd5b813567ffffffffffffffff80821115611419576114196117c2565b604051601f8301601f19908116603f01168101908282118183101715611441576114416117c2565b8160405283815286602085880101111561145a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b805165ffffffffffff811681146113e857600080fd5b803560ff811681146113e857600080fd5b6000602082840312156114b357600080fd5b6114bc826113d1565b9392505050565b600080604083850312156114d657600080fd5b6114df836113d1565b91506114ed602084016113d1565b90509250929050565b60006020828403121561150857600080fd5b81516114bc816117d8565b60006020828403121561152557600080fd5b5035919050565b600080600080600080600060e0888a03121561154757600080fd5b875196506020880151955060408801516001600160801b038116811461156c57600080fd5b945061157a6060890161147a565b93506115886080890161147a565b60a08901519093506001600160e01b0319811681146115a657600080fd5b8092505060c0880151905092959891949750929550565b60008060008060008060c087890312156115d657600080fd5b86359550602087013567ffffffffffffffff8111156115f457600080fd5b61160089828a016113ed565b955050604087013593506060870135925061161d60808801611490565b915060a087013561162d816117d8565b809150509295509295509295565b6000806040838503121561164e57600080fd5b823567ffffffffffffffff81111561166557600080fd5b611671858286016113ed565b9250506114ed602084016113d1565b60008060008060008060c0878903121561169957600080fd5b863567ffffffffffffffff8111156116b057600080fd5b6116bc89828a016113ed565b9650506116cb602088016113d1565b94506116d9604088016113d1565b935060608701359250608087013591506116f560a08801611490565b90509295509295509295565b6000825160005b818110156117225760208186018101518583015201611708565b81811115611731576000828501525b509190910192915050565b6020808252600e908201526d1cddd85c081b9bdd08199bdd5b9960921b604082015260600190565b60006001600160801b03808316818516808303821115611786576117866117ac565b01949350505050565b600065ffffffffffff808316818516808303821115611786576117865b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146117e657600080fd5b5056fe537761705265717565737428627974657320696e546f6b656e2c75696e7431323820616d6f756e742c75696e743438206665652c75696e7434382065787069726554732c627974657334206f7574436861696e2c6279746573206f7574546f6b656e295377617052656c656173652862797465733332207377617049642c627974657320726563697069656e7429a164736f6c6343000806000a";

type MesonSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonSwap__factory extends ContractFactory {
  constructor(...args: MesonSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonSwap> {
    return super.deploy(overrides || {}) as Promise<MesonSwap>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonSwap {
    return super.attach(address) as MesonSwap;
  }
  connect(signer: Signer): MesonSwap__factory {
    return super.connect(signer) as MesonSwap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonSwapInterface {
    return new utils.Interface(_abi) as MesonSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonSwap {
    return new Contract(address, _abi, signerOrProvider) as MesonSwap;
  }
}

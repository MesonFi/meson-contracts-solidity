/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MesonSwap, MesonSwapInterface } from "../MesonSwap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapBonded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapPosted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    name: "addressOfIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "uint40",
        name: "providerIndex",
        type: "uint40",
      },
    ],
    name: "bondSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "cancelSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "recipientHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "depositToPool",
        type: "bool",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "getPostedSwap",
    outputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getShortCoinType",
    outputs: [
      {
        internalType: "bytes2",
        name: "",
        type: "bytes2",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "indexOfAddress",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "indexOfToken",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "uint200",
        name: "postingValue",
        type: "uint200",
      },
    ],
    name: "postSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "tokenForIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506115b4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80638302ce5a11610081578063eba7fb771161005b578063eba7fb771461026c578063f7888aec14610299578063ff378719146102ba57600080fd5b80638302ce5a146101e9578063b002249d146101fc578063b3df5b361461021157600080fd5b806335eff30f116100b257806335eff30f146101ae57806354d6a2b7146101c35780637c850187146101d657600080fd5b80631aba3a55146100d95780631e2a60751461011b5780632335093c14610163575b600080fd5b6101006100e7366004611250565b60026020526000908152604090205464ffffffffff1681565b60405164ffffffffff90911681526020015b60405180910390f35b61012e6101293660046112c2565b6102f3565b6040805173ffffffffffffffffffffffffffffffffffffffff9485168152939092166020840152151590820152606001610112565b61019c610171366004611250565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b60405160ff9091168152602001610112565b6101c16101bc3660046113a9565b610385565b005b6101c16101d13660046112c2565b6104e9565b6101c16101e43660046112db565b610665565b6101c16101f7366004611337565b61084c565b610204610ac2565b604051610112919061143d565b61024761021f3660046113cc565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610112565b6040517e3c0000000000000000000000000000000000000000000000000000000000008152602001610112565b6102ac6102a7366004611272565b610c0f565b604051908152602001610112565b6102476102c83660046113e7565b60ff1660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60008181526005602052604081205473ffffffffffffffffffffffffffffffffffffffff602882901c16919078ffffffffffffffffffffffffffffffffffffffffffffffffff1660018114908361034d576000925061037d565b64ffffffffff811660009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1692505b509193909250565b60008281526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16806104015760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f742065786973740000000000000000000000000060448201526064015b60405180910390fd5b64ffffffffff8116156104565760405162461bcd60e51b815260206004820152601f60248201527f5377617020626f6e64656420746f20616e6f746865722070726f76696465720060448201526064016103f8565b60008381526005602090815260409182902080547fffffffffffffff000000000000000000000000000000000000000000000000001664ffffffffff861678ffffffffffffffffffffffffffffffffffffffffffffffffff86161717905590518481527f60a99b51ae498c44acbbe11031aed2a06a32be66d2122e6e2a7a16c087865cc9910160405180910390a1505050565b60008181526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16600181116105635760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f742065786973740000000000000000000000000060448201526064016103f8565b42603083901c64ffffffffff16106105bd5760405162461bcd60e51b815260206004820152601460248201527f53776170206973207374696c6c206c6f636b656400000000000000000000000060448201526064016103f8565b600082815260056020908152604080832080547fffffffffffffff0000000000000000000000000000000000000000000000000016905560ff851683529082905290205461062e9073ffffffffffffffffffffffffffffffffffffffff90811690602884901c1660a085901c610c6e565b6040518281527ff6b6b4f7a13f02512c1b3aa8dcc4a07d7775a6a4becbd439efcbd37c5408e67f9060200160405180910390a15050565b60008681526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16806106dc5760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f742065786973740000000000000000000000000060448201526064016103f8565b6106e8610e1042611497565b603088901c64ffffffffff16101561073357600087815260056020526040902080547fffffffffffffff0000000000000000000000000000000000000000000000000016905561076b565b600087815260056020526040902080547fffffffffffffff000000000000000000000000000000000000000000000000001660011790555b610798878787878760288778ffffffffffffffffffffffffffffffffffffffffffffffffff16901c610dc4565b81156107f45764ffffffffff8116602888901b65ffffffffffff811682176000908152600460205260409020549117906107d69060a08a901c610f2f565b65ffffffffffff909116600090815260046020526040902055610843565b60ff87166000908152602081815260408083205464ffffffffff851684526003909252909120546108439173ffffffffffffffffffffffffffffffffffffffff908116911660a08a901c610c6e565b50505050505050565b84600881901c61ffff16603c146108a55760405162461bcd60e51b815260206004820152601760248201527f53776170206e6f7420666f72207468697320636861696e00000000000000000060448201526064016103f8565b60008681526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff161561091c5760405162461bcd60e51b815260206004820152601360248201527f5377617020616c7265616479206578697374730000000000000000000000000060448201526064016103f8565b60006109334264ffffffffff60308a901c166114af565b9050610e1081116109865760405162461bcd60e51b815260206004820152601360248201527f45787069726520747320746f6f206561726c790000000000000000000000000060448201526064016103f8565b611c2081106109d75760405162461bcd60e51b815260206004820152601260248201527f45787069726520747320746f6f206c617465000000000000000000000000000060448201526064016103f8565b73ffffffffffffffffffffffffffffffffffffffff602884901c166109ff8888888885610f8d565b600088815260056020908152604080832080547fffffffffffffff000000000000000000000000000000000000000000000000001678ffffffffffffffffffffffffffffffffffffffffffffffffff891617905560ff8b16835290829052902054610a859073ffffffffffffffffffffffffffffffffffffffff168260a08b901c6110fd565b6040518881527f5ce4019f772fda6cb703b26bce3ec3006eb36b73f1d3a0eb441213317d9f5e9d9060200160405180910390a15050505050505050565b606060015b6101008160ff161015610b7a5760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff16610b68578060ff1660011415610b11575090565b610b1c6001826114c6565b60ff1667ffffffffffffffff811115610b3757610b37611567565b604051908082528060200260200182016040528015610b60578160200160208202803683370190505b509150610b7a565b80610b72816114e9565b915050610ac7565b60015b8160ff168160ff161015610c0a5760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1683610bc06001846114c6565b60ff1681518110610bd357610bd3611538565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610c02816114e9565b915050610b7d565b505090565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600160209081526040808320549385168352600282528083205464ffffffffff1660289490941b65ff0000000000169390931782526004905220545b92915050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691610d059190611402565b6000604051808303816000865af19150503d8060008114610d42576040519150601f19603f3d011682016040523d82523d6000602084013e610d47565b606091505b5091509150818015610d71575080511580610d71575080806020019051810190610d7191906112a5565b610dbd5760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c6564000000000000000000000000000000000060448201526064016103f8565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff8116610e275760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016103f8565b60008681526020868152604080832082527f5ef297f2881340f11ed62c7c08e0e0c235c333ad8f340d7285f529f16716968a8352808320815193845291830180825282905260ff85169083015260608201869052608082018590529060019060a0016020604051602081039080840390855afa158015610eab573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146108435760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016103f8565b600082610f3c8382611497565b9150811015610c685760405162461bcd60e51b815260206004820152600860248201527f6f766572666c6f7700000000000000000000000000000000000000000000000060448201526064016103f8565b73ffffffffffffffffffffffffffffffffffffffff8116610ff05760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016103f8565b6000858152602080822081527f9862d877599564bcd97c37305a7b0fdbe621d9c2a125026f2ad601f754a75abc82526040808320815193845291830180825282905260ff85169083015260608201869052608082018590529060019060a0016020604051602081039080840390855afa158015611071573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146110f55760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016103f8565b505050505050565b6000811161114d5760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f60448201526064016103f8565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b1580156111c357600080fd5b505af11580156111d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fb91906112a5565b50505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461122557600080fd5b919050565b803564ffffffffff8116811461122557600080fd5b803560ff8116811461122557600080fd5b60006020828403121561126257600080fd5b61126b82611201565b9392505050565b6000806040838503121561128557600080fd5b61128e83611201565b915061129c60208401611201565b90509250929050565b6000602082840312156112b757600080fd5b815161126b81611596565b6000602082840312156112d457600080fd5b5035919050565b60008060008060008060c087890312156112f457600080fd5b863595506020870135945060408701359350606087013592506113196080880161123f565b915060a087013561132981611596565b809150509295509295509295565b600080600080600060a0868803121561134f57600080fd5b85359450602086013593506040860135925061136d6060870161123f565b9150608086013578ffffffffffffffffffffffffffffffffffffffffffffffffff8116811461139b57600080fd5b809150509295509295909350565b600080604083850312156113bc57600080fd5b8235915061129c6020840161122a565b6000602082840312156113de57600080fd5b61126b8261122a565b6000602082840312156113f957600080fd5b61126b8261123f565b6000825160005b818110156114235760208186018101518583015201611409565b81811115611432576000828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561148b57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611459565b50909695505050505050565b600082198211156114aa576114aa611509565b500190565b6000828210156114c1576114c1611509565b500390565b600060ff821660ff8416808210156114e0576114e0611509565b90039392505050565b600060ff821660ff81141561150057611500611509565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80151581146115a457600080fd5b5056fea164736f6c6343000806000a";

type MesonSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonSwap__factory extends ContractFactory {
  constructor(...args: MesonSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonSwap> {
    return super.deploy(overrides || {}) as Promise<MesonSwap>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonSwap {
    return super.attach(address) as MesonSwap;
  }
  connect(signer: Signer): MesonSwap__factory {
    return super.connect(signer) as MesonSwap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonSwapInterface {
    return new utils.Interface(_abi) as MesonSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonSwap {
    return new Contract(address, _abi, signerOrProvider) as MesonSwap;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MesonSwap, MesonSwapInterface } from "../MesonSwap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapBonded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapPosted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapRequested",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    name: "addressOfIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "uint40",
        name: "providerIndex",
        type: "uint40",
      },
    ],
    name: "bondSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "cancelSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "recipientHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "depositToPool",
        type: "bool",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "getPostedSwap",
    outputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getShortCoinType",
    outputs: [
      {
        internalType: "bytes2",
        name: "",
        type: "bytes2",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "indexOfAddress",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "indexOfToken",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint208",
        name: "packedData",
        type: "uint208",
      },
    ],
    name: "postSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "requestSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "tokenForIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061183c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80637c8501871161008c578063eba7fb7711610066578063eba7fb771461026f578063f7888aec1461029c578063ff378719146102bd578063ffa96ec4146102f657600080fd5b80637c850187146101ec578063b002249d146101ff578063b3df5b361461021457600080fd5b80632335093c116100bd5780632335093c1461017b57806335eff30f146101c657806354d6a2b7146101d957600080fd5b80631aba3a55146100e45780631e2a6075146101265780632217d48314610166575b600080fd5b61010b6100f23660046114ea565b60026020526000908152604090205464ffffffffff1681565b60405164ffffffffff90911681526020015b60405180910390f35b61013961013436600461155c565b610309565b6040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301520161011d565b61017961017436600461155c565b610394565b005b6101b46101893660046114ea565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b60405160ff909116815260200161011d565b6101796101d4366004611631565b6105ed565b6101796101e736600461155c565b61074c565b6101796101fa366004611575565b6108c8565b610207610aaf565b60405161011d91906116c5565b61024a610222366004611654565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011d565b6040517e3c000000000000000000000000000000000000000000000000000000000000815260200161011d565b6102af6102aa36600461150c565b610bfc565b60405190815260200161011d565b61024a6102cb36600461166f565b60ff1660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6101796103043660046115d1565b610c5b565b60008181526005602052604081205473ffffffffffffffffffffffffffffffffffffffff602882901c16919078ffffffffffffffffffffffffffffffffffffffffffffffffff168261035e576000915061038e565b64ffffffffff811660009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1691505b50915091565b80600881901c61ffff16603c146103f25760405162461bcd60e51b815260206004820152601760248201527f53776170206e6f7420666f72207468697320636861696e00000000000000000060448201526064015b60405180910390fd5b60008281526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16156104695760405162461bcd60e51b815260206004820152601360248201527f5377617020616c7265616479206578697374730000000000000000000000000060448201526064016103e9565b60006104804264ffffffffff603086901c16611737565b9050610e1081116104d35760405162461bcd60e51b815260206004820152601360248201527f45787069726520747320746f6f206561726c790000000000000000000000000060448201526064016103e9565b611c2081106105245760405162461bcd60e51b815260206004820152601260248201527f45787069726520747320746f6f206c617465000000000000000000000000000060448201526064016103e9565b600033600085815260056020908152604080832080547fffffffffffffff000000000000000000000000000000000000000000000000001678ffffffffffffffffffffffffffffffffffffffff0000000000602887901b1617905560ff88168352908290529020549091506105b49073ffffffffffffffffffffffffffffffffffffffff168260a087901c610ed8565b6040518481527fffb55ec353614a34485412bc8d469fe16d3c7f0a963be6dd266938f8ff7d6c3f9060200160405180910390a150505050565b60008281526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16806106645760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f742065786973740000000000000000000000000060448201526064016103e9565b64ffffffffff8116156106b95760405162461bcd60e51b815260206004820152601f60248201527f5377617020626f6e64656420746f20616e6f746865722070726f76696465720060448201526064016103e9565b60008381526005602090815260409182902080547fffffffffffffff000000000000000000000000000000000000000000000000001664ffffffffff861678ffffffffffffffffffffffffffffffffffffffffffffffffff86161717905590518481527f60a99b51ae498c44acbbe11031aed2a06a32be66d2122e6e2a7a16c087865cc9910160405180910390a1505050565b60008181526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16600181116107c65760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f742065786973740000000000000000000000000060448201526064016103e9565b42603083901c64ffffffffff16106108205760405162461bcd60e51b815260206004820152601460248201527f53776170206973207374696c6c206c6f636b656400000000000000000000000060448201526064016103e9565b600082815260056020908152604080832080547fffffffffffffff0000000000000000000000000000000000000000000000000016905560ff85168352908290529020546108919073ffffffffffffffffffffffffffffffffffffffff90811690602884901c1660a085901c610fdc565b6040518281527ff6b6b4f7a13f02512c1b3aa8dcc4a07d7775a6a4becbd439efcbd37c5408e67f9060200160405180910390a15050565b60008681526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff168061093f5760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f742065786973740000000000000000000000000060448201526064016103e9565b61094b610e104261171f565b603088901c64ffffffffff16101561099657600087815260056020526040902080547fffffffffffffff000000000000000000000000000000000000000000000000001690556109ce565b600087815260056020526040902080547fffffffffffffff000000000000000000000000000000000000000000000000001660011790555b6109fb878787878760288778ffffffffffffffffffffffffffffffffffffffffffffffffff16901c611162565b8115610a575764ffffffffff8116602888901b65ffffffffffff81168217600090815260046020526040902054911790610a399060a08a901c6112cd565b65ffffffffffff909116600090815260046020526040902055610aa6565b60ff87166000908152602081815260408083205464ffffffffff85168452600390925290912054610aa69173ffffffffffffffffffffffffffffffffffffffff908116911660a08a901c610fdc565b50505050505050565b606060015b6101008160ff161015610b675760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff16610b55578060ff1660011415610afe575090565b610b0960018261174e565b60ff1667ffffffffffffffff811115610b2457610b246117ef565b604051908082528060200260200182016040528015610b4d578160200160208202803683370190505b509150610b67565b80610b5f81611771565b915050610ab4565b60015b8160ff168160ff161015610bf75760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1683610bad60018461174e565b60ff1681518110610bc057610bc06117c0565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610bef81611771565b915050610b6a565b505090565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600160209081526040808320549385168352600282528083205464ffffffffff1660289490941b65ff0000000000169390931782526004905220545b92915050565b83600881901c61ffff16603c14610cb45760405162461bcd60e51b815260206004820152601760248201527f53776170206e6f7420666f72207468697320636861696e00000000000000000060448201526064016103e9565b60008581526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff1615610d2b5760405162461bcd60e51b815260206004820152601360248201527f5377617020616c7265616479206578697374730000000000000000000000000060448201526064016103e9565b6000610d424264ffffffffff603089901c16611737565b9050610e108111610d955760405162461bcd60e51b815260206004820152601360248201527f45787069726520747320746f6f206561726c790000000000000000000000000060448201526064016103e9565b611c208110610de65760405162461bcd60e51b815260206004820152601260248201527f45787069726520747320746f6f206c617465000000000000000000000000000060448201526064016103e9565b74ffffffffffffffffffffffffffffffffffffffffff602884901c16610e1687878760ff60c889901c168561132b565b600087815260056020908152604080832080547fffffffffffffff000000000000000000000000000000000000000000000000001678ffffffffffffffffffffffffffffffffffffffffffffffffff891617905560ff8a16835290829052902054610e9c9073ffffffffffffffffffffffffffffffffffffffff168260a08a901c610ed8565b6040518781527f5ce4019f772fda6cb703b26bce3ec3006eb36b73f1d3a0eb441213317d9f5e9d9060200160405180910390a150505050505050565b60008111610f285760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f60448201526064016103e9565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b158015610f9e57600080fd5b505af1158015610fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd6919061153f565b50505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283928716916110a3919061168a565b6000604051808303816000865af19150503d80600081146110e0576040519150601f19603f3d011682016040523d82523d6000602084013e6110e5565b606091505b509150915081801561110f57508051158061110f57508080602001905181019061110f919061153f565b61115b5760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c6564000000000000000000000000000000000060448201526064016103e9565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff81166111c55760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016103e9565b60008681526020868152604080832082527f5ef297f2881340f11ed62c7c08e0e0c235c333ad8f340d7285f529f16716968a8352808320815193845291830180825282905260ff85169083015260608201869052608082018590529060019060a0016020604051602081039080840390855afa158015611249573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610aa65760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016103e9565b6000826112da838261171f565b9150811015610c555760405162461bcd60e51b815260206004820152600860248201527f6f766572666c6f7700000000000000000000000000000000000000000000000060448201526064016103e9565b73ffffffffffffffffffffffffffffffffffffffff811661138e5760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016103e9565b6000858152602080822081527f9862d877599564bcd97c37305a7b0fdbe621d9c2a125026f2ad601f754a75abc82526040808320815193845291830180825282905260ff85169083015260608201869052608082018590529060019060a0016020604051602081039080840390855afa15801561140f573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146114935760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016103e9565b505050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146114bf57600080fd5b919050565b803564ffffffffff811681146114bf57600080fd5b803560ff811681146114bf57600080fd5b6000602082840312156114fc57600080fd5b6115058261149b565b9392505050565b6000806040838503121561151f57600080fd5b6115288361149b565b91506115366020840161149b565b90509250929050565b60006020828403121561155157600080fd5b81516115058161181e565b60006020828403121561156e57600080fd5b5035919050565b60008060008060008060c0878903121561158e57600080fd5b863595506020870135945060408701359350606087013592506115b3608088016114d9565b915060a08701356115c38161181e565b809150509295509295509295565b600080600080608085870312156115e757600080fd5b843593506020850135925060408501359150606085013579ffffffffffffffffffffffffffffffffffffffffffffffffffff8116811461162657600080fd5b939692955090935050565b6000806040838503121561164457600080fd5b82359150611536602084016114c4565b60006020828403121561166657600080fd5b611505826114c4565b60006020828403121561168157600080fd5b611505826114d9565b6000825160005b818110156116ab5760208186018101518583015201611691565b818111156116ba576000828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561171357835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016116e1565b50909695505050505050565b6000821982111561173257611732611791565b500190565b60008282101561174957611749611791565b500390565b600060ff821660ff84168082101561176857611768611791565b90039392505050565b600060ff821660ff81141561178857611788611791565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b801515811461182c57600080fd5b5056fea164736f6c6343000806000a";

type MesonSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonSwap__factory extends ContractFactory {
  constructor(...args: MesonSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonSwap> {
    return super.deploy(overrides || {}) as Promise<MesonSwap>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonSwap {
    return super.attach(address) as MesonSwap;
  }
  connect(signer: Signer): MesonSwap__factory {
    return super.connect(signer) as MesonSwap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonSwapInterface {
    return new utils.Interface(_abi) as MesonSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonSwap {
    return new Contract(address, _abi, signerOrProvider) as MesonSwap;
  }
}

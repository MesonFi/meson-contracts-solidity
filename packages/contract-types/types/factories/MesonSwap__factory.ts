/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MesonSwap, MesonSwapInterface } from "../MesonSwap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapBonded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "expireTs",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "inToken",
        type: "address",
      },
    ],
    name: "SwapPosted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "SwapRequested",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "bondSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
    ],
    name: "cancelSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "recipient",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoinType",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedSwap",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "inToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "postSwap",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedSwap",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "inToken",
        type: "address",
      },
    ],
    name: "requestSwap",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "requests",
    outputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "address",
        name: "inToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "expireTs",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalDemandFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalSupplyFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x610100604052605260808181529061162060a039805160209182012060408051808201825260088152674d65736f6e20466960c01b908401528051808201825260018152603160f81b908401528051928301919091527fe127d7b8d403871d7ed6b19024db4422e92aee79823ba78ad61e52ee2a5f9b98908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c001604051602081830303815290604052805190602001206000553480156100d457600080fd5b5061153c806100e46000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806394149c1a1161006657806394149c1a1461014d5780639d86698514610162578063a8f81b1a146101f7578063bcc20ff614610220578063d541beb31461023357600080fd5b80631548fdce146100a35780632976bb51146100b85780633b11d5ac146100cb57806361565d25146100f157806368c4ac261461011a575b600080fd5b6100b66100b1366004611232565b610246565b005b6100b66100c63660046112c3565b610341565b6100de6100d936600461132d565b610498565b6040519081526020015b60405180910390f35b6100de6100ff3660046111ee565b6001600160a01b031660009081526004602052604090205490565b61013d6101283660046111ee565b60016020526000908152604090205460ff1681565b60405190151581526020016100e8565b604051632000000f60e21b81526020016100e8565b6101b6610170366004611232565b600660205260009081526040902080546001820154600283015460038401546004909401546001600160a01b03938416949284169390911691906001600160401b031685565b604080516001600160a01b0396871681529486166020860152929094169183019190915260608201526001600160401b03909116608082015260a0016100e8565b6100de6102053660046111ee565b6001600160a01b031660009081526005602052604090205490565b6100de61022e36600461137a565b61060c565b6100b6610241366004611232565b610859565b600081815260066020526040902060030154819061027f5760405162461bcd60e51b815260040161027690611435565b60405180910390fd5b6000828152600660205260409020600101546001600160a01b0316156102e75760405162461bcd60e51b815260206004820152601f60248201527f7377617020626f6e64656420746f20616e6f746865722070726f7669646572006044820152606401610276565b60008281526006602090815260409182902060010180546001600160a01b03191633179055815184815291517f9dadb60bc000bbd7b49430723ed56b6aa35909dcab91ec2cb17ed5da7ae4ffd69281900390910190a15050565b60008581526006602052604090206003015485906103715760405162461bcd60e51b815260040161027690611435565b6000868152600660209081526040808320815160a08101835281546001600160a01b039081168083526001840154821683870152600284015490911693820193909352600382015460608201526004909101546001600160401b03166080820152885192890192909220925491926103ed928a92898989610aba565b604080820151602080840151606085015160008c8152600690935293822080546001600160a01b0319908116825560018201805482169055600282018054909116905560038101929092556004909101805467ffffffffffffffff191690559091610459838383610c61565b6040518a81527f6921a2110a802468e8955f2885822155442ad19c60f42db0444a6993c23d20629060200160405180910390a150505050505050505050565b6001600160a01b038116600090815260016020526040812054829060ff166104f65760405162461bcd60e51b81526020600482015260116024820152703ab739bab83837b93a32b2103a37b5b2b760791b6044820152606401610276565b60008060006105058787610d9e565b92509250925060006105143390565b6040805160a0810182526001600160a01b038084168252600060208084018281528d8416858701908152606086018a81526001600160401b03808d16608089019081528e8752600690955297909420955186549086166001600160a01b03199182161787559151600187018054918716918416919091179055516002860180549190951691161790925551600383015551600490910180549190921667ffffffffffffffff1990911617905590506105cd878284611004565b6040518481527fa67aeefca6ffac499b56c6e714636f7ade5d82fde82aef50665ad3e88be5cb4b9060200160405180910390a150919695505050505050565b6001600160a01b038516600090815260016020526040812054869060ff1661066a5760405162461bcd60e51b81526020600482015260116024820152703ab739bab83837b93a32b2103a37b5b2b760791b6044820152606401610276565b60008060006106798b8b610d9e565b60408051600081526020810180835285905260ff8b1691810191909152606081018c9052608081018b9052929550909350915060019060a0016020604051602081039080840390855afa1580156106d4573d6000803e3d6000fd5b505050602060405103516001600160a01b0316896001600160a01b0316146107325760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b6044820152606401610276565b6040805160a0810182526001600160a01b038b811682523360208084018281528f8416858701908152606086018881526001600160401b038a81166080890190815260008d8152600690965298909420965187546001600160a01b031990811691881691909117885592516001880180548516918816919091179055905160028701805490931695169490941790559151600384015592516004909201805467ffffffffffffffff1916929091169190911790556107f18b8b84611004565b604080518581526001600160401b03851660208201529081018390526001600160a01b038c1660608201527ff3c3b2928ca3aaa9c73469b9a28d8a4ebaa18b9698b443162ee5d8c77fe05d6c9060800160405180910390a150919a9950505050505050505050565b60008181526006602052604090206003015481906108895760405162461bcd60e51b815260040161027690611435565b60008281526006602052604090206004015482906001600160401b034281169116106108ea5760405162461bcd60e51b815260206004820152601060248201526f1cddd85c081b9bdd08195e1c1a5c995960821b6044820152606401610276565b6000600660008581526020019081526020016000206040518060a00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600382015481526020016004820160009054906101000a90046001600160401b03166001600160401b03166001600160401b031681525050905060008160400151905060008260000151905060008360600151905060066000888152602001908152602001600020600080820160006101000a8154906001600160a01b0302191690556001820160006101000a8154906001600160a01b0302191690556002820160006101000a8154906001600160a01b03021916905560038201600090556004820160006101000a8154906001600160401b0302191690555050610a7e838383610c61565b6040518781527f5a399591cfd74c375a1ffd61c20221db0db82381f65516889ed13c8cd1f99d5b9060200160405180910390a150505050505050565b6001600160a01b038416610b105760405162461bcd60e51b815260206004820152601e60248201527f7369676e65722063616e6e6f7420626520656d707479206164647265737300006044820152606401610276565b60006040518060600160405280602b8152602001611505602b91398051602091820120604080519283019190915281018990526060810188905260800160405160208183030381529060405280519060200120905060008682604051602001610b9092919061190160f01b81526002810192909252602282015260420190565b60408051601f1981840301815282825280516020918201206000845290830180835281905260ff8616918301919091526060820187905260808201869052915060019060a0016020604051602081039080840390855afa158015610bf8573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614610c565760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b6044820152606401610276565b505050505050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b17905291516000928392871691610ced91906113fa565b6000604051808303816000865af19150503d8060008114610d2a576040519150601f19603f3d011682016040523d82523d6000602084013e610d2f565b606091505b5091509150818015610d59575080511580610d59575080806020019051810190610d599190611210565b610d975760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b6044820152606401610276565b5050505050565b600080600080600080610db088611092565b6040516bffffffffffffffffffffffff1960608c901b166020820152929550909350915082906034016040516020818303038152906040528051906020012014610e355760405162461bcd60e51b81526020600482015260166024820152750d2dca8ded6cadc40c8decae640dcdee840dac2e8c6d60531b6044820152606401610276565b60008111610e935760405162461bcd60e51b815260206004820152602560248201527f7377617020616d6f756e74206d7573742062652067726561746572207468616e604482015264207a65726f60d81b6064820152608401610276565b42610ea0610e108261145d565b6001600160401b0316846001600160401b031611610ef75760405162461bcd60e51b81526020600482015260146024820152736578706972657320747320746f6f206561726c7960601b6044820152606401610276565b610f03611c208261145d565b6001600160401b0316846001600160401b031610610f595760405162461bcd60e51b81526020600482015260136024820152726578706972657320747320746f6f206c61746560681b6044820152606401610276565b6000610fa28a80516020918201206000546040805161190160f01b8186015260228101929092526042808301939093528051808303909301835260629091019052805191012090565b60008181526006602052604090206003015490915015610ff45760405162461bcd60e51b815260206004820152600d60248201526c1cddd85c0818dbdb999b1a58dd609a1b6044820152606401610276565b9650929450925050509250925092565b6040516323b872dd60e01b81526001600160a01b038381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b15801561105457600080fd5b505af1158015611068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108c9190611210565b50505050565b6000806000806000806000878060200190518101906110b1919061124b565b505093509350935093506040518060800160405280605881526020016114ad605891398051906020012084146111295760405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964207377617020726571756573742074797065686173680000006044820152606401610276565b97919650945092505050565b80356001600160a01b038116811461114c57600080fd5b919050565b600082601f83011261116257600080fd5b81356001600160401b038082111561117c5761117c611496565b604051601f8301601f19908116603f011681019082821181831017156111a4576111a4611496565b816040528381528660208588010111156111bd57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811461114c57600080fd5b60006020828403121561120057600080fd5b61120982611135565b9392505050565b60006020828403121561122257600080fd5b8151801515811461120957600080fd5b60006020828403121561124457600080fd5b5035919050565b60008060008060008060c0878903121561126457600080fd5b86519550602087015194506040870151935060608701516001600160401b038116811461129057600080fd5b60808801519093506001600160e01b0319811681146112ae57600080fd5b8092505060a087015190509295509295509295565b600080600080600060a086880312156112db57600080fd5b8535945060208601356001600160401b038111156112f857600080fd5b61130488828901611151565b9450506040860135925060608601359150611321608087016111dd565b90509295509295909350565b6000806040838503121561134057600080fd5b82356001600160401b0381111561135657600080fd5b61136285828601611151565b92505061137160208401611135565b90509250929050565b60008060008060008060c0878903121561139357600080fd5b86356001600160401b038111156113a957600080fd5b6113b589828a01611151565b9650506113c460208801611135565b94506113d260408801611135565b935060608701359250608087013591506113ee60a088016111dd565b90509295509295509295565b6000825160005b8181101561141b5760208186018101518583015201611401565b8181111561142a576000828501525b509190910192915050565b6020808252600e908201526d1cddd85c081b9bdd08199bdd5b9960921b604082015260600190565b60006001600160401b0380831681851680830382111561148d57634e487b7160e01b600052601160045260246000fd5b01949350505050565b634e487b7160e01b600052604160045260246000fdfe537761705265717565737428627974657320696e546f6b656e2c75696e7432353620616d6f756e742c75696e7436342065787069726554732c627974657334206f7574436861696e2c6279746573206f7574546f6b656e295377617052656c656173652862797465733332207377617049642c627974657320726563697069656e7429a164736f6c6343000806000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";

type MesonSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonSwap__factory extends ContractFactory {
  constructor(...args: MesonSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonSwap> {
    return super.deploy(overrides || {}) as Promise<MesonSwap>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonSwap {
    return super.attach(address) as MesonSwap;
  }
  connect(signer: Signer): MesonSwap__factory {
    return super.connect(signer) as MesonSwap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonSwapInterface {
    return new utils.Interface(_abi) as MesonSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonSwap {
    return new Contract(address, _abi, signerOrProvider) as MesonSwap;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MesonSwap, MesonSwapInterface } from "../MesonSwap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapBonded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapPosted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapRequested",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    name: "addressOfIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "uint40",
        name: "providerIndex",
        type: "uint40",
      },
    ],
    name: "bondSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "cancelSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "recipientHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "depositToPool",
        type: "bool",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getShortCoinType",
    outputs: [
      {
        internalType: "bytes2",
        name: "",
        type: "bytes2",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "indexOfAddress",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "indexOfToken",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint208",
        name: "packedData",
        type: "uint208",
      },
    ],
    name: "postSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "requestSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "swapInitiator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "swapProvider",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "tokenForIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061184c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637c8501871161008c578063eba7fb7711610066578063eba7fb7714610286578063f7888aec146102b3578063ff378719146102d4578063ffa96ec41461030d57600080fd5b80637c85018714610228578063b002249d1461023b578063b3df5b361461025057600080fd5b806335eff30f116100c857806335eff30f1461019157806338b0b63f146101a457806354d6a2b71461020257806360b9d9731461021557600080fd5b80631aba3a55146100ef5780632217d483146101315780632335093c14610146575b600080fd5b6101166100fd3660046114fa565b60026020526000908152604090205464ffffffffff1681565b60405164ffffffffff90911681526020015b60405180910390f35b61014461013f36600461156c565b610320565b005b61017f6101543660046114fa565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b60405160ff9091168152602001610128565b61014461019f366004611641565b610579565b6101dd6101b236600461156c565b60009081526005602052604090205460281c73ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610128565b61014461021036600461156c565b6106d8565b6101dd61022336600461156c565b610854565b610144610236366004611585565b6108d8565b610243610abf565b60405161012891906116d5565b6101dd61025e366004611664565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6040517e3c0000000000000000000000000000000000000000000000000000000000008152602001610128565b6102c66102c136600461151c565b610c0c565b604051908152602001610128565b6101dd6102e236600461167f565b60ff1660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b61014461031b3660046115e1565b610c6b565b80600881901c61ffff16603c1461037e5760405162461bcd60e51b815260206004820152601760248201527f53776170206e6f7420666f72207468697320636861696e00000000000000000060448201526064015b60405180910390fd5b60008281526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16156103f55760405162461bcd60e51b815260206004820152601360248201527f5377617020616c726561647920657869737473000000000000000000000000006044820152606401610375565b600061040c4264ffffffffff603086901c16611747565b9050610e10811161045f5760405162461bcd60e51b815260206004820152601360248201527f45787069726520747320746f6f206561726c79000000000000000000000000006044820152606401610375565b611c2081106104b05760405162461bcd60e51b815260206004820152601260248201527f45787069726520747320746f6f206c61746500000000000000000000000000006044820152606401610375565b600033600085815260056020908152604080832080547fffffffffffffff000000000000000000000000000000000000000000000000001678ffffffffffffffffffffffffffffffffffffffff0000000000602887901b1617905560ff88168352908290529020549091506105409073ffffffffffffffffffffffffffffffffffffffff168260a087901c610ee8565b6040518481527fffb55ec353614a34485412bc8d469fe16d3c7f0a963be6dd266938f8ff7d6c3f9060200160405180910390a150505050565b60008281526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16806105f05760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f74206578697374000000000000000000000000006044820152606401610375565b64ffffffffff8116156106455760405162461bcd60e51b815260206004820152601f60248201527f5377617020626f6e64656420746f20616e6f746865722070726f7669646572006044820152606401610375565b60008381526005602090815260409182902080547fffffffffffffff000000000000000000000000000000000000000000000000001664ffffffffff861678ffffffffffffffffffffffffffffffffffffffffffffffffff86161717905590518481527f60a99b51ae498c44acbbe11031aed2a06a32be66d2122e6e2a7a16c087865cc9910160405180910390a1505050565b60008181526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16600181116107525760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f74206578697374000000000000000000000000006044820152606401610375565b42603083901c64ffffffffff16106107ac5760405162461bcd60e51b815260206004820152601460248201527f53776170206973207374696c6c206c6f636b65640000000000000000000000006044820152606401610375565b600082815260056020908152604080832080547fffffffffffffff0000000000000000000000000000000000000000000000000016905560ff851683529082905290205461081d9073ffffffffffffffffffffffffffffffffffffffff90811690602884901c1660a085901c610fec565b6040518281527ff6b6b4f7a13f02512c1b3aa8dcc4a07d7775a6a4becbd439efcbd37c5408e67f9060200160405180910390a15050565b60008181526005602052604081205478ffffffffffffffffffffffffffffffffffffffffffffffffff81169060281c73ffffffffffffffffffffffffffffffffffffffff166108a65750600092915050565b64ffffffffff1660009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1692915050565b60008681526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff168061094f5760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f74206578697374000000000000000000000000006044820152606401610375565b61095b610e104261172f565b603088901c64ffffffffff1610156109a657600087815260056020526040902080547fffffffffffffff000000000000000000000000000000000000000000000000001690556109de565b600087815260056020526040902080547fffffffffffffff000000000000000000000000000000000000000000000000001660011790555b610a0b878787878760288778ffffffffffffffffffffffffffffffffffffffffffffffffff16901c611172565b8115610a675764ffffffffff8116602888901b65ffffffffffff81168217600090815260046020526040902054911790610a499060a08a901c6112dd565b65ffffffffffff909116600090815260046020526040902055610ab6565b60ff87166000908152602081815260408083205464ffffffffff85168452600390925290912054610ab69173ffffffffffffffffffffffffffffffffffffffff908116911660a08a901c610fec565b50505050505050565b606060015b6101008160ff161015610b775760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff16610b65578060ff1660011415610b0e575090565b610b1960018261175e565b60ff1667ffffffffffffffff811115610b3457610b346117ff565b604051908082528060200260200182016040528015610b5d578160200160208202803683370190505b509150610b77565b80610b6f81611781565b915050610ac4565b60015b8160ff168160ff161015610c075760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1683610bbd60018461175e565b60ff1681518110610bd057610bd06117d0565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610bff81611781565b915050610b7a565b505090565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600160209081526040808320549385168352600282528083205464ffffffffff1660289490941b65ff0000000000169390931782526004905220545b92915050565b83600881901c61ffff16603c14610cc45760405162461bcd60e51b815260206004820152601760248201527f53776170206e6f7420666f72207468697320636861696e0000000000000000006044820152606401610375565b60008581526005602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff1615610d3b5760405162461bcd60e51b815260206004820152601360248201527f5377617020616c726561647920657869737473000000000000000000000000006044820152606401610375565b6000610d524264ffffffffff603089901c16611747565b9050610e108111610da55760405162461bcd60e51b815260206004820152601360248201527f45787069726520747320746f6f206561726c79000000000000000000000000006044820152606401610375565b611c208110610df65760405162461bcd60e51b815260206004820152601260248201527f45787069726520747320746f6f206c61746500000000000000000000000000006044820152606401610375565b74ffffffffffffffffffffffffffffffffffffffffff602884901c16610e2687878760ff60c889901c168561133b565b600087815260056020908152604080832080547fffffffffffffff000000000000000000000000000000000000000000000000001678ffffffffffffffffffffffffffffffffffffffffffffffffff891617905560ff8a16835290829052902054610eac9073ffffffffffffffffffffffffffffffffffffffff168260a08a901c610ee8565b6040518781527f5ce4019f772fda6cb703b26bce3ec3006eb36b73f1d3a0eb441213317d9f5e9d9060200160405180910390a150505050505050565b60008111610f385760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152606401610375565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b158015610fae57600080fd5b505af1158015610fc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe6919061154f565b50505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283928716916110b3919061169a565b6000604051808303816000865af19150503d80600081146110f0576040519150601f19603f3d011682016040523d82523d6000602084013e6110f5565b606091505b509150915081801561111f57508051158061111f57508080602001905181019061111f919061154f565b61116b5760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610375565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff81166111d55760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d707479206164647265737300006044820152606401610375565b60008681526020868152604080832082527f5ef297f2881340f11ed62c7c08e0e0c235c333ad8f340d7285f529f16716968a8352808320815193845291830180825282905260ff85169083015260608201869052608082018590529060019060a0016020604051602081039080840390855afa158015611259573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610ab65760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610375565b6000826112ea838261172f565b9150811015610c655760405162461bcd60e51b815260206004820152600860248201527f6f766572666c6f770000000000000000000000000000000000000000000000006044820152606401610375565b73ffffffffffffffffffffffffffffffffffffffff811661139e5760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d707479206164647265737300006044820152606401610375565b6000858152602080822081527f9862d877599564bcd97c37305a7b0fdbe621d9c2a125026f2ad601f754a75abc82526040808320815193845291830180825282905260ff85169083015260608201869052608082018590529060019060a0016020604051602081039080840390855afa15801561141f573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146114a35760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610375565b505050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146114cf57600080fd5b919050565b803564ffffffffff811681146114cf57600080fd5b803560ff811681146114cf57600080fd5b60006020828403121561150c57600080fd5b611515826114ab565b9392505050565b6000806040838503121561152f57600080fd5b611538836114ab565b9150611546602084016114ab565b90509250929050565b60006020828403121561156157600080fd5b81516115158161182e565b60006020828403121561157e57600080fd5b5035919050565b60008060008060008060c0878903121561159e57600080fd5b863595506020870135945060408701359350606087013592506115c3608088016114e9565b915060a08701356115d38161182e565b809150509295509295509295565b600080600080608085870312156115f757600080fd5b843593506020850135925060408501359150606085013579ffffffffffffffffffffffffffffffffffffffffffffffffffff8116811461163657600080fd5b939692955090935050565b6000806040838503121561165457600080fd5b82359150611546602084016114d4565b60006020828403121561167657600080fd5b611515826114d4565b60006020828403121561169157600080fd5b611515826114e9565b6000825160005b818110156116bb57602081860181015185830152016116a1565b818111156116ca576000828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561172357835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016116f1565b50909695505050505050565b60008219821115611742576117426117a1565b500190565b600082821015611759576117596117a1565b500390565b600060ff821660ff841680821015611778576117786117a1565b90039392505050565b600060ff821660ff811415611798576117986117a1565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b801515811461183c57600080fd5b5056fea164736f6c6343000806000a";

type MesonSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonSwap__factory extends ContractFactory {
  constructor(...args: MesonSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonSwap> {
    return super.deploy(overrides || {}) as Promise<MesonSwap>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonSwap {
    return super.attach(address) as MesonSwap;
  }
  connect(signer: Signer): MesonSwap__factory {
    return super.connect(signer) as MesonSwap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonSwapInterface {
    return new utils.Interface(_abi) as MesonSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonSwap {
    return new Contract(address, _abi, signerOrProvider) as MesonSwap;
  }
}

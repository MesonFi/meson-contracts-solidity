/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MesonSwap, MesonSwapInterface } from "../MesonSwap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapBonded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapPosted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "SwapRequested",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    name: "addressOfIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "uint40",
        name: "providerIndex",
        type: "uint40",
      },
    ],
    name: "bondSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "cancelSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "recipientHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "depositToPool",
        type: "bool",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getShortCoinType",
    outputs: [
      {
        internalType: "bytes2",
        name: "",
        type: "bytes2",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "indexOfAddress",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "indexOfToken",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint208",
        name: "packedData",
        type: "uint208",
      },
    ],
    name: "postSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "requestSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "swapInitiator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "swapProvider",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "tokenForIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611797806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637c8501871161008c578063eba7fb7711610066578063eba7fb77146102bd578063f7888aec146102ea578063ff3787191461031e578063ffa96ec41461035757600080fd5b80637c8501871461025f578063b002249d14610272578063b3df5b361461028757600080fd5b806335eff30f116100c857806335eff30f1461019157806338b0b63f146101a457806354d6a2b71461020257806360b9d9731461021557600080fd5b80631aba3a55146100ef5780632217d483146101315780632335093c14610146575b600080fd5b6101166100fd366004611420565b60036020526000908152604090205464ffffffffff1681565b60405164ffffffffff90911681526020015b60405180910390f35b61014461013f366004611492565b61036a565b005b61017f610154366004611420565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b60405160ff9091168152602001610128565b61014461019f366004611567565b6104ed565b6101dd6101b2366004611492565b60009081526006602052604090205460281c73ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610128565b610144610210366004611492565b61064c565b6101dd610223366004611492565b60009081526006602090815260408083205464ffffffffff168352600490915290205473ffffffffffffffffffffffffffffffffffffffff1690565b61014461026d3660046114ab565b6107d1565b61027a610965565b60405161012891906115fb565b6101dd61029536600461158a565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6040517e3c0000000000000000000000000000000000000000000000000000000000008152602001610128565b6102fd6102f8366004611442565b610ab6565b6040516fffffffffffffffffffffffffffffffff9091168152602001610128565b6101dd61032c3660046115a5565b60ff1660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b610144610365366004611507565b610b27565b80600881901c61ffff16603c146103c85760405162461bcd60e51b815260206004820152601760248201527f53776170206e6f7420666f72207468697320636861696e00000000000000000060448201526064015b60405180910390fd5b60008281526006602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff161561043f5760405162461bcd60e51b815260206004820152601360248201527f5377617020616c7265616479206578697374730000000000000000000000000060448201526064016103bf565b600033600084815260066020526040812080547fffffffffffffff000000000000000000000000000000000000000000000000001678ffffffffffffffffffffffffffffffffffffffff0000000000602885901b16179055909150806104a485610cb9565b915091506104b3818484610e3a565b6040518581527fffb55ec353614a34485412bc8d469fe16d3c7f0a963be6dd266938f8ff7d6c3f9060200160405180910390a15050505050565b60008281526006602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16806105645760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f742065786973740000000000000000000000000060448201526064016103bf565b64ffffffffff8116156105b95760405162461bcd60e51b815260206004820152601f60248201527f5377617020626f6e64656420746f20616e6f746865722070726f76696465720060448201526064016103bf565b60008381526006602090815260409182902080547fffffffffffffff000000000000000000000000000000000000000000000000001664ffffffffff861678ffffffffffffffffffffffffffffffffffffffffffffffffff86161717905590518481527f60a99b51ae498c44acbbe11031aed2a06a32be66d2122e6e2a7a16c087865cc9910160405180910390a1505050565b60008181526006602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff16806106c35760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f742065786973740000000000000000000000000060448201526064016103bf565b4264ffffffffff16603083901c64ffffffffff16106107245760405162461bcd60e51b815260206004820152601460248201527f53776170206973207374696c6c206c6f636b656400000000000000000000000060448201526064016103bf565b60ff8216600090815260016020908152604080832054858452600690925290912080547fffffffffffffff0000000000000000000000000000000000000000000000000016905573ffffffffffffffffffffffffffffffffffffffff602883901c811691166107988183608087901c610eee565b6040518481527ff6b6b4f7a13f02512c1b3aa8dcc4a07d7775a6a4becbd439efcbd37c5408e67f9060200160405180910390a150505050565b600086815260066020526040902080547fffffffffffffff00000000000000000000000000000000000000000000000000811690915578ffffffffffffffffffffffffffffffffffffffffffffffffff1681156108de5760158181526010805190899052600051915190919061084b8a8a8a8a8a88611074565b65ffffffffffff811660009081526005602052604090205461087f906fffffffffffffffffffffffffffffffff16836111df565b65ffffffffffff91909116600090815260056020526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9092169190911790555061095c9050565b61090b878787878760288778ffffffffffffffffffffffffffffffffffffffffffffffffff16901c611074565b60ff871660009081526001602090815260408083205464ffffffffff8516845260049092529091205461095c9173ffffffffffffffffffffffffffffffffffffffff908116911660808a901c610eee565b50505050505050565b606060015b6101008160ff161015610a1d5760ff811660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16610a0b578060ff16600114156109b4575090565b6109bf6001826116a9565b60ff1667ffffffffffffffff8111156109da576109da61174a565b604051908082528060200260200182016040528015610a03578160200160208202803683370190505b509150610a1d565b80610a15816116cc565b91505061096a565b60015b8160ff168160ff161015610ab15760ff811660009081526001602081905260409091205473ffffffffffffffffffffffffffffffffffffffff16908490610a6790846116a9565b60ff1681518110610a7a57610a7a61171b565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610aa9816116cc565b915050610a20565b505090565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600260209081526040808320549385168352600382528083205464ffffffffff1660289490941b65ff0000000000169390931782526005905220546fffffffffffffffffffffffffffffffff165b92915050565b83600881901c61ffff16603c14610b805760405162461bcd60e51b815260206004820152601760248201527f53776170206e6f7420666f72207468697320636861696e00000000000000000060448201526064016103bf565b60008581526006602052604090205478ffffffffffffffffffffffffffffffffffffffffffffffffff1615610bf75760405162461bcd60e51b815260206004820152601360248201527f5377617020616c7265616479206578697374730000000000000000000000000060448201526064016103bf565b6020829052600751601b5183610c108888888686611261565b600088815260066020526040812080547fffffffffffffff000000000000000000000000000000000000000000000000001678ffffffffffffffffffffffffffffffffffffffffffffffffff841617905580610c6b8a610cb9565b91509150610c7a818584610e3a565b6040518a81527f5ce4019f772fda6cb703b26bce3ec3006eb36b73f1d3a0eb441213317d9f5e9d9060200160405180910390a150505050505050505050565b608081901c600081610d335760405162461bcd60e51b815260206004820152602560248201527f5377617020616d6f756e74206d7573742062652067726561746572207468616e60448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016103bf565b5060ff821660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16603083901c42610d6f610e1082611689565b64ffffffffff168264ffffffffff1611610dcb5760405162461bcd60e51b815260206004820152601360248201527f45787069726520747320746f6f206561726c790000000000000000000000000060448201526064016103bf565b610dd7611c2082611689565b64ffffffffff168264ffffffffff1610610e335760405162461bcd60e51b815260206004820152601260248201527f45787069726520747320746f6f206c617465000000000000000000000000000060448201526064016103bf565b5050915091565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152306024830152604482018390528416906323b872dd90606401602060405180830381600087803b158015610eb057600080fd5b505af1158015610ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee89190611475565b50505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392871691610fb591906115c0565b6000604051808303816000865af19150503d8060008114610ff2576040519150601f19603f3d011682016040523d82523d6000602084013e610ff7565b606091505b50915091508180156110215750805115806110215750808060200190518101906110219190611475565b61106d5760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c6564000000000000000000000000000000000060448201526064016103bf565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff81166110d75760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016103bf565b60008681526020868152604080832082527f5ef297f2881340f11ed62c7c08e0e0c235c333ad8f340d7285f529f16716968a8352808320815193845291830180825282905260ff85169083015260608201869052608082018590529060019060a0016020604051602081039080840390855afa15801561115b573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461095c5760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016103bf565b60006fffffffffffffffffffffffffffffffff83166111fe8385611655565b9150816fffffffffffffffffffffffffffffffff161015610b215760405162461bcd60e51b815260206004820152600860248201527f6f766572666c6f7700000000000000000000000000000000000000000000000060448201526064016103bf565b73ffffffffffffffffffffffffffffffffffffffff81166112c45760405162461bcd60e51b815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016103bf565b6000858152602080822081527f9862d877599564bcd97c37305a7b0fdbe621d9c2a125026f2ad601f754a75abc82526040808320815193845291830180825282905260ff85169083015260608201869052608082018590529060019060a0016020604051602081039080840390855afa158015611345573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146113c95760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016103bf565b505050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146113f557600080fd5b919050565b803564ffffffffff811681146113f557600080fd5b803560ff811681146113f557600080fd5b60006020828403121561143257600080fd5b61143b826113d1565b9392505050565b6000806040838503121561145557600080fd5b61145e836113d1565b915061146c602084016113d1565b90509250929050565b60006020828403121561148757600080fd5b815161143b81611779565b6000602082840312156114a457600080fd5b5035919050565b60008060008060008060c087890312156114c457600080fd5b863595506020870135945060408701359350606087013592506114e96080880161140f565b915060a08701356114f981611779565b809150509295509295509295565b6000806000806080858703121561151d57600080fd5b843593506020850135925060408501359150606085013579ffffffffffffffffffffffffffffffffffffffffffffffffffff8116811461155c57600080fd5b939692955090935050565b6000806040838503121561157a57600080fd5b8235915061146c602084016113fa565b60006020828403121561159c57600080fd5b61143b826113fa565b6000602082840312156115b757600080fd5b61143b8261140f565b6000825160005b818110156115e157602081860181015185830152016115c7565b818111156115f0576000828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561164957835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611617565b50909695505050505050565b60006fffffffffffffffffffffffffffffffff808316818516808303821115611680576116806116ec565b01949350505050565b600064ffffffffff808316818516808303821115611680576116806116ec565b600060ff821660ff8416808210156116c3576116c36116ec565b90039392505050565b600060ff821660ff8114156116e3576116e36116ec565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b801515811461178757600080fd5b5056fea164736f6c6343000806000a";

type MesonSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonSwap__factory extends ContractFactory {
  constructor(...args: MesonSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonSwap> {
    return super.deploy(overrides || {}) as Promise<MesonSwap>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonSwap {
    return super.attach(address) as MesonSwap;
  }
  connect(signer: Signer): MesonSwap__factory {
    return super.connect(signer) as MesonSwap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonSwapInterface {
    return new utils.Interface(_abi) as MesonSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonSwap {
    return new Contract(address, _abi, signerOrProvider) as MesonSwap;
  }
}

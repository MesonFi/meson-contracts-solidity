/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonStatesTest,
  MesonStatesTestInterface,
} from "../MesonStatesTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    name: "addressOfIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "checkReleaseSignature",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "checkRequestSignature",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "decodeSwap",
    outputs: [
      {
        internalType: "uint96",
        name: "amount",
        type: "uint96",
      },
      {
        internalType: "uint32",
        name: "salt",
        type: "uint32",
      },
      {
        internalType: "uint40",
        name: "expireTs",
        type: "uint40",
      },
      {
        internalType: "bytes2",
        name: "outChain",
        type: "bytes2",
      },
      {
        internalType: "uint8",
        name: "outTokenIndex",
        type: "uint8",
      },
      {
        internalType: "bytes2",
        name: "inChain",
        type: "bytes2",
      },
      {
        internalType: "uint8",
        name: "inTokenIndex",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint96",
        name: "amount",
        type: "uint96",
      },
      {
        internalType: "uint32",
        name: "salt",
        type: "uint32",
      },
      {
        internalType: "uint40",
        name: "fee",
        type: "uint40",
      },
      {
        internalType: "uint40",
        name: "expireTs",
        type: "uint40",
      },
      {
        internalType: "bytes2",
        name: "outChain",
        type: "bytes2",
      },
      {
        internalType: "uint8",
        name: "outToken",
        type: "uint8",
      },
      {
        internalType: "bytes2",
        name: "inChain",
        type: "bytes2",
      },
      {
        internalType: "uint8",
        name: "inToken",
        type: "uint8",
      },
    ],
    name: "encodeSwap",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getShortCoinType",
    outputs: [
      {
        internalType: "bytes2",
        name: "",
        type: "bytes2",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "indexOfAddress",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "indexOfToken",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "mesonFeeCollected",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "tokenForIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ea7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063e16a567d11610081578063f7888aec1161005b578063f7888aec146102f2578063fa5b31b414610305578063ff3787191461043b57600080fd5b8063e16a567d146101fe578063eb397fab14610237578063eba7fb77146102c557600080fd5b80634f139480116100b25780634f1394801461017b578063b002249d1461018e578063b3df5b36146101a357600080fd5b80631aba3a55146100d95780631fdafaf41461011b5780632335093c14610130575b600080fd5b6101006100e7366004610af5565b60026020526000908152604090205464ffffffffff1681565b60405164ffffffffff90911681526020015b60405180910390f35b61012e610129366004610bc2565b610474565b005b61016961013e366004610af5565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b60405160ff9091168152602001610112565b61012e610189366004610b63565b610488565b6101966104e7565b6040516101129190610cfd565b6101d96101b1366004610c12565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610112565b61022961020c366004610c2d565b60281b65ff00000000001660009081526004602052604090205490565b604051908152602001610112565b61024a610245366004610b4a565b610634565b604080516bffffffffffffffffffffffff909816885263ffffffff909616602088015264ffffffffff909416948601949094527fffff000000000000000000000000000000000000000000000000000000000000918216606086015260ff9081166080860152921660a08401521660c082015260e001610112565b6040517e3c0000000000000000000000000000000000000000000000000000000000008152602001610112565b610229610300366004610b17565b61069d565b61042e610313366004610c48565b604080517fffffffffffffffffffffffff000000000000000000000000000000000000000060a08b901b1660208201527fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16602c8201527fffffffffff00000000000000000000000000000000000000000000000000000060d889811b8216603084015288901b1660358201527fffff000000000000000000000000000000000000000000000000000000000000808716603a8301527fff0000000000000000000000000000000000000000000000000000000000000060f887811b8216603c850152918616603d8401529084901b16603f82015260609101604051602081830303815290604052905098975050505050505050565b6040516101129190610d57565b6101d9610449366004610c2d565b60ff1660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b610481858585858561072d565b5050505050565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1660208201526104df90879060340160405160208183030381529060405280519060200120868686866108ce565b505050505050565b606060015b6101008160ff16101561059f5760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1661058d578060ff1660011415610536575090565b610541600182610dca565b60ff1667ffffffffffffffff81111561055c5761055c610e6b565b604051908082528060200260200182016040528015610585578160200160208202803683370190505b50915061059f565b8061059781610ded565b9150506104ec565b60015b8160ff168160ff16101561062f5760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff16836105e5600184610dca565b60ff16815181106105f8576105f8610e3c565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101528061062781610ded565b9150506105a2565b505090565b60008060008060008060006106498860a01c90565b96506106558860801c90565b9550603088901c64ffffffffff16945061066f8860201c90565b60f01b935061067e8860181c90565b925061068a8860081c90565b60f01b9150879050919395979092949650565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526001602090815260408083205493851683526002909152812054909160ff169064ffffffffff168015806106ef575060ff8216155b156106ff57600092505050610727565b64ffffffffff1660289190911b65ff0000000000161760009081526004602052604090205490505b92915050565b73ffffffffffffffffffffffffffffffffffffffff81166107af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064015b60405180910390fd5b6000858152602080822081527f9862d877599564bcd97c37305a7b0fdbe621d9c2a125026f2ad601f754a75abc82526040808320815193845291830180825282905260ff85169083015260608201869052608082018590529060019060a0016020604051602081039080840390855afa158015610830573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146104df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016107a6565b73ffffffffffffffffffffffffffffffffffffffff811661094b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016107a6565b60008681526020868152604080832082527f5ef297f2881340f11ed62c7c08e0e0c235c333ad8f340d7285f529f16716968a8352808320815193845291830180825282905260ff85169083015260608201869052608082018590529060019060a0016020604051602081039080840390855afa1580156109cf573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610a6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016107a6565b50505050505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a9a57600080fd5b919050565b80357fffff00000000000000000000000000000000000000000000000000000000000081168114610a9a57600080fd5b803564ffffffffff81168114610a9a57600080fd5b803560ff81168114610a9a57600080fd5b600060208284031215610b0757600080fd5b610b1082610a76565b9392505050565b60008060408385031215610b2a57600080fd5b610b3383610a76565b9150610b4160208401610a76565b90509250929050565b600060208284031215610b5c57600080fd5b5035919050565b60008060008060008060c08789031215610b7c57600080fd5b86359550610b8c60208801610a76565b94506040870135935060608701359250610ba860808801610ae4565b9150610bb660a08801610a76565b90509295509295509295565b600080600080600060a08688031215610bda57600080fd5b853594506020860135935060408601359250610bf860608701610ae4565b9150610c0660808701610a76565b90509295509295909350565b600060208284031215610c2457600080fd5b610b1082610acf565b600060208284031215610c3f57600080fd5b610b1082610ae4565b600080600080600080600080610100898b031215610c6557600080fd5b88356bffffffffffffffffffffffff81168114610c8157600080fd5b9750602089013563ffffffff81168114610c9a57600080fd5b9650610ca860408a01610acf565b9550610cb660608a01610acf565b9450610cc460808a01610a9f565b9350610cd260a08a01610ae4565b9250610ce060c08a01610a9f565b9150610cee60e08a01610ae4565b90509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b81811015610d4b57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610d19565b50909695505050505050565b600060208083528351808285015260005b81811015610d8457858101830151858201604001528201610d68565b81811115610d96576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060ff821660ff841680821015610de457610de4610e0d565b90039392505050565b600060ff821660ff811415610e0457610e04610e0d565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea164736f6c6343000806000a";

type MesonStatesTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonStatesTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonStatesTest__factory extends ContractFactory {
  constructor(...args: MesonStatesTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonStatesTest> {
    return super.deploy(overrides || {}) as Promise<MesonStatesTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonStatesTest {
    return super.attach(address) as MesonStatesTest;
  }
  connect(signer: Signer): MesonStatesTest__factory {
    return super.connect(signer) as MesonStatesTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonStatesTestInterface {
    return new utils.Interface(_abi) as MesonStatesTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonStatesTest {
    return new Contract(address, _abi, signerOrProvider) as MesonStatesTest;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonStatesTest,
  MesonStatesTestInterface,
} from "../MesonStatesTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    name: "addressOfIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "checkReleaseSignature",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "checkRequestSignature",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "decodeSwap",
    outputs: [
      {
        internalType: "uint96",
        name: "amount",
        type: "uint96",
      },
      {
        internalType: "uint32",
        name: "salt",
        type: "uint32",
      },
      {
        internalType: "uint40",
        name: "expireTs",
        type: "uint40",
      },
      {
        internalType: "bytes2",
        name: "outChain",
        type: "bytes2",
      },
      {
        internalType: "uint8",
        name: "outTokenIndex",
        type: "uint8",
      },
      {
        internalType: "bytes2",
        name: "inChain",
        type: "bytes2",
      },
      {
        internalType: "uint8",
        name: "inTokenIndex",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint96",
        name: "amount",
        type: "uint96",
      },
      {
        internalType: "uint32",
        name: "salt",
        type: "uint32",
      },
      {
        internalType: "uint40",
        name: "fee",
        type: "uint40",
      },
      {
        internalType: "uint40",
        name: "expireTs",
        type: "uint40",
      },
      {
        internalType: "bytes2",
        name: "outChain",
        type: "bytes2",
      },
      {
        internalType: "uint8",
        name: "outToken",
        type: "uint8",
      },
      {
        internalType: "bytes2",
        name: "inChain",
        type: "bytes2",
      },
      {
        internalType: "uint8",
        name: "inToken",
        type: "uint8",
      },
    ],
    name: "encodeSwap",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getShortCoinType",
    outputs: [
      {
        internalType: "bytes2",
        name: "",
        type: "bytes2",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "indexOfAddress",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "indexOfToken",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "tokenForIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e17806100206000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c8063b3df5b3611610081578063f7888aec1161005b578063f7888aec146102f5578063fa5b31b41461036e578063ff378719146104a457600080fd5b8063b3df5b3614610198578063eb397fab146101f3578063eba7fb77146102c857600080fd5b80632335093c116100b25780632335093c146101255780634f13948014610170578063b002249d1461018357600080fd5b80631aba3a55146100ce5780631fdafaf414610110575b600080fd5b6100f56100dc366004610a65565b60026020526000908152604090205464ffffffffff1681565b60405164ffffffffff90911681526020015b60405180910390f35b61012361011e366004610b32565b6104dd565b005b61015e610133366004610a65565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b60405160ff9091168152602001610107565b61012361017e366004610ad3565b6104f1565b61018b610550565b6040516101079190610c6d565b6101ce6101a6366004610b82565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610107565b61024d610201366004610aba565b60a081901c91608082901c91603081901c917fffff00000000000000000000000000000000000000000000000000000000000060d083901b811692601881901c9260e882901b90921691565b604080516bffffffffffffffffffffffff909816885263ffffffff909616602088015264ffffffffff909416948601949094527fffff000000000000000000000000000000000000000000000000000000000000918216606086015260ff9081166080860152921660a08401521660c082015260e001610107565b6040517e3c0000000000000000000000000000000000000000000000000000000000008152602001610107565b610360610303366004610a87565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832054939094168252600281528382205464ffffffffff1660289390931b65ff0000000000169290921781526004909152205490565b604051908152602001610107565b61049761037c366004610bb8565b604080517fffffffffffffffffffffffff000000000000000000000000000000000000000060a08b901b1660208201527fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16602c8201527fffffffffff00000000000000000000000000000000000000000000000000000060d889811b8216603084015288901b1660358201527fffff000000000000000000000000000000000000000000000000000000000000808716603a8301527fff0000000000000000000000000000000000000000000000000000000000000060f887811b8216603c850152918616603d8401529084901b16603f82015260609101604051602081830303815290604052905098975050505050505050565b6040516101079190610cc7565b6101ce6104b2366004610b9d565b60ff1660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6104ea858585858561069d565b5050505050565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b166020820152610548908790603401604051602081830303815290604052805190602001208686868661083e565b505050505050565b606060015b6101008160ff1610156106085760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff166105f6578060ff166001141561059f575090565b6105aa600182610d3a565b60ff1667ffffffffffffffff8111156105c5576105c5610ddb565b6040519080825280602002602001820160405280156105ee578160200160208202803683370190505b509150610608565b8061060081610d5d565b915050610555565b60015b8160ff168160ff1610156106985760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff168361064e600184610d3a565b60ff168151811061066157610661610dac565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101528061069081610d5d565b91505061060b565b505090565b73ffffffffffffffffffffffffffffffffffffffff811661071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064015b60405180910390fd5b6000858152602080822081527f9862d877599564bcd97c37305a7b0fdbe621d9c2a125026f2ad601f754a75abc82526040808320815193845291830180825282905260ff85169083015260608201869052608082018590529060019060a0016020604051602081039080840390855afa1580156107a0573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610548576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610716565b73ffffffffffffffffffffffffffffffffffffffff81166108bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d707479206164647265737300006044820152606401610716565b60008681526020868152604080832082527f5ef297f2881340f11ed62c7c08e0e0c235c333ad8f340d7285f529f16716968a8352808320815193845291830180825282905260ff85169083015260608201869052608082018590529060019060a0016020604051602081039080840390855afa15801561093f573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146109dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610716565b50505050505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a0a57600080fd5b919050565b80357fffff00000000000000000000000000000000000000000000000000000000000081168114610a0a57600080fd5b803564ffffffffff81168114610a0a57600080fd5b803560ff81168114610a0a57600080fd5b600060208284031215610a7757600080fd5b610a80826109e6565b9392505050565b60008060408385031215610a9a57600080fd5b610aa3836109e6565b9150610ab1602084016109e6565b90509250929050565b600060208284031215610acc57600080fd5b5035919050565b60008060008060008060c08789031215610aec57600080fd5b86359550610afc602088016109e6565b94506040870135935060608701359250610b1860808801610a54565b9150610b2660a088016109e6565b90509295509295509295565b600080600080600060a08688031215610b4a57600080fd5b853594506020860135935060408601359250610b6860608701610a54565b9150610b76608087016109e6565b90509295509295909350565b600060208284031215610b9457600080fd5b610a8082610a3f565b600060208284031215610baf57600080fd5b610a8082610a54565b600080600080600080600080610100898b031215610bd557600080fd5b88356bffffffffffffffffffffffff81168114610bf157600080fd5b9750602089013563ffffffff81168114610c0a57600080fd5b9650610c1860408a01610a3f565b9550610c2660608a01610a3f565b9450610c3460808a01610a0f565b9350610c4260a08a01610a54565b9250610c5060c08a01610a0f565b9150610c5e60e08a01610a54565b90509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b81811015610cbb57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610c89565b50909695505050505050565b600060208083528351808285015260005b81811015610cf457858101830151858201604001528201610cd8565b81811115610d06576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060ff821660ff841680821015610d5457610d54610d7d565b90039392505050565b600060ff821660ff811415610d7457610d74610d7d565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea164736f6c6343000806000a";

type MesonStatesTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonStatesTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonStatesTest__factory extends ContractFactory {
  constructor(...args: MesonStatesTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonStatesTest> {
    return super.deploy(overrides || {}) as Promise<MesonStatesTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonStatesTest {
    return super.attach(address) as MesonStatesTest;
  }
  connect(signer: Signer): MesonStatesTest__factory {
    return super.connect(signer) as MesonStatesTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonStatesTestInterface {
    return new utils.Interface(_abi) as MesonStatesTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonStatesTest {
    return new Contract(address, _abi, signerOrProvider) as MesonStatesTest;
  }
}

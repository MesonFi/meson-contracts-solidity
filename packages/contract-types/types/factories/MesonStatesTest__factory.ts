/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonStatesTest,
  MesonStatesTestInterface,
} from "../MesonStatesTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "metaAmount",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "ts",
        type: "uint64",
      },
    ],
    name: "addRecentSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "decreaseSupply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoinType",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "getRecentSwap",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "id",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "metaAmount",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "ts",
            type: "uint64",
          },
        ],
        internalType: "struct MesonHelpers.Swap",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getRecentSwapList",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "_length",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_tail",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_head",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "_items",
            type: "bytes32[]",
          },
        ],
        internalType: "struct List.Bytes32List",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "increaseSupply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "removeExpiredSwaps",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalDemandFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalSupplyFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "metaAmount",
        type: "uint256",
      },
    ],
    name: "updateDemand",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101006040526052608081815290610cdf60a039805160209182012060408051808201825260088152674d65736f6e20466960c01b908401528051808201825260018152603160f81b908401528051928301919091527fe127d7b8d403871d7ed6b19024db4422e92aee79823ba78ad61e52ee2a5f9b98908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c001604051602081830303815290604052805190602001206000553480156100d457600080fd5b50604051610d31380380610d318339810160408190526100f3916101e0565b6100fc81610102565b50610210565b6001600160a01b0381166000818152600160208181526040808420805460ff1916841790558051608081018252848152808301858152818301868152606083810181815298885260048652939096208251815590519481019490945593516002840155935180516101799260038501920190610180565b5050505050565b8280548282559060005260206000209081019282156101bb579160200282015b828111156101bb5782518255916020019190600101906101a0565b506101c79291506101cb565b5090565b5b808211156101c757600081556001016101cc565b6000602082840312156101f257600080fd5b81516001600160a01b038116811461020957600080fd5b9392505050565b610ac08061021f6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806379fcd8ee1161007157806379fcd8ee146101a25780637d9c0d85146101b557806381326dbc146101c857806394149c1a146101e8578063a8f81b1a146101fd578063f7888aec1461022657600080fd5b80631139ece0146100b957806315d0975c146100ce5780632c89e9ef146100e1578063456081d71461012557806361565d251461013857806368c4ac261461016f575b600080fd5b6100cc6100c7366004610993565b610251565b005b6100cc6100dc366004610969565b61031c565b6100f46100ef366004610969565b61032a565b6040805182518152602080840151908201529181015167ffffffffffffffff16908201526060015b60405180910390f35b6100cc610133366004610914565b610398565b610161610146366004610914565b6001600160a01b031660009081526005602052604090205490565b60405190815260200161011c565b61019261017d366004610914565b60016020526000908152604090205460ff1681565b604051901515815260200161011c565b6100cc6101b0366004610969565b6103a4565b6100cc6101c3366004610969565b6103ae565b6101db6101d6366004610914565b6103b8565b60405161011c91906109e8565b604051632000000f60e21b815260200161011c565b61016161020b366004610914565b6001600160a01b031660009081526006602052604090205490565b610161610234366004610936565b600260209081526000928352604080842090915290825290205481565b60408051606081018252848152602080820185815267ffffffffffffffff8581168486019081526001600160a01b038a166000818152600386528781208b82528652878120875181559451600186015591516002909401805467ffffffffffffffff191694909316939093179091559081526004909152919091206102d6908561047c565b6001600160a01b0385166000908152600660205260409020546102f99084610529565b6001600160a01b0390951660009081526006602052604090209490945550505050565b6103268282610544565b5050565b6040805160608082018352600080835260208084018290529284018190526001600160a01b0386168152600383528381208582528352839020835191820184528054825260018101549282019290925260029091015467ffffffffffffffff16918101919091525b92915050565b6103a1816105db565b50565b610326828261070e565b6103268282610731565b6103e36040518060800160405280600081526020016000815260200160008152602001606081525090565b6001600160a01b038216600090815260046020908152604091829020825160808101845281548152600182015481840152600282015481850152600382018054855181860281018601909652808652919492936060860193929083018282801561046c57602002820191906000526020600020905b815481526020019060010190808311610458575b5050505050815250509050919050565b60018083015461048b91610a58565b8260010154106104d25760405162461bcd60e51b815260206004820152600d60248201526c6c697374206f766572666c6f7760981b60448201526064015b60405180910390fd5b81546104e757600182015460028301556104fd565b60028201546104f7906001610a58565b60028301555b600382018054600181810183556000928352602090922001829055825461052391610a58565b90915550565b6000826105368382610a58565b915081101561039257600080fd5b6001600160a01b0382166000908152600560205260409020548111156105985760405162461bcd60e51b815260206004820152600960248201526837bb32b9323930bbb760b91b60448201526064016104c9565b6001600160a01b0382166000908152600560205260409020546105bb908261082c565b6001600160a01b0390921660009081526005602052604090209190915550565b6001600160a01b03811660009081526004602052604081204291806105ff83610847565b915091505b81801561065157506001600160a01b038516600090815260036020908152604080832084845290915290206002015467ffffffffffffffff8086169161064f91620151809116610a58565b105b15610707576001600160a01b0385166000908152600660209081526040808320546003835281842085855290925290912060010154610690919061082c565b6001600160a01b0386166000908152600660205260409020556106b28361088d565b50506001600160a01b038516600090815260036020908152604080832084845290915281208181556001810191909155600201805467ffffffffffffffff191690556106fd83610847565b9092509050610604565b5050505050565b6001600160a01b0382166000908152600560205260409020546105bb9082610529565b6040514260c081901b6001600160c01b0319166020830152606084901b6bffffffffffffffffffffffff19166028830152603c820183905290600090605c0160408051808303601f19018152828252805160209182012060608401835280845281840187815267ffffffffffffffff8781168686019081526001600160a01b038b166000818152600387528781208682528752878120895181559451600186015591516002909401805467ffffffffffffffff191694909316939093179091559081526004909252919020909250610809908361047c565b6001600160a01b0385166000908152600660205260409020546102f99085610529565b6000826108398382610a70565b915081111561039257600080fd5b8054600090819015610882578260030183600101548154811061086c5761086c610a9d565b9060005260206000200154905060019150915091565b506000905080915091565b805460009081906108a357506000905080915091565b826003018360010154815481106108bc576108bc610a9d565b90600052602060002001549050826001015460016108da9190610a58565b60018085019190915583546108ef9190610a70565b90925550600191565b80356001600160a01b038116811461090f57600080fd5b919050565b60006020828403121561092657600080fd5b61092f826108f8565b9392505050565b6000806040838503121561094957600080fd5b610952836108f8565b9150610960602084016108f8565b90509250929050565b6000806040838503121561097c57600080fd5b610985836108f8565b946020939093013593505050565b600080600080608085870312156109a957600080fd5b6109b2856108f8565b93506020850135925060408501359150606085013567ffffffffffffffff811681146109dd57600080fd5b939692955090935050565b6000602080835260a0830184518285015281850151604085015260408501516060850152606085015160808086015281815180845260c0870191508483019350600092505b80831015610a4d5783518252928401926001929092019190840190610a2d565b509695505050505050565b60008219821115610a6b57610a6b610a87565b500190565b600082821015610a8257610a82610a87565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea164736f6c6343000806000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";

type MesonStatesTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonStatesTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonStatesTest__factory extends ContractFactory {
  constructor(...args: MesonStatesTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonStatesTest> {
    return super.deploy(token, overrides || {}) as Promise<MesonStatesTest>;
  }
  getDeployTransaction(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  attach(address: string): MesonStatesTest {
    return super.attach(address) as MesonStatesTest;
  }
  connect(signer: Signer): MesonStatesTest__factory {
    return super.connect(signer) as MesonStatesTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonStatesTestInterface {
    return new utils.Interface(_abi) as MesonStatesTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonStatesTest {
    return new Contract(address, _abi, signerOrProvider) as MesonStatesTest;
  }
}

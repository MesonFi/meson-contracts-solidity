/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonStatesTest,
  MesonStatesTestInterface,
} from "../MesonStatesTest";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    name: "addressOfIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "checkReleaseSignature",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "checkRequestSignature",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "decodeSwap",
    outputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint40",
        name: "expireTs",
        type: "uint40",
      },
      {
        internalType: "uint8",
        name: "inTokenIndex",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "outTokenIndex",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint40",
        name: "fee",
        type: "uint40",
      },
      {
        internalType: "uint40",
        name: "expireTs",
        type: "uint40",
      },
      {
        internalType: "bytes4",
        name: "outChain",
        type: "bytes4",
      },
      {
        internalType: "uint8",
        name: "outToken",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "inToken",
        type: "uint8",
      },
    ],
    name: "encodeSwap",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoinType",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
    ],
    name: "getSwapId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "indexOfAddress",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "indexOfToken",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "tokenForIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051806080016040528060528152602001610e6860529139805160209182012060408051808201825260088152674d65736f6e20466960c01b908401528051808201825260018152603160f81b908401528051928301919091527fe127d7b8d403871d7ed6b19024db4422e92aee79823ba78ad61e52ee2a5f9b98908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f198184030181529190528051602090910120600355610d78806100f06000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806394149c1a11610081578063eb397fab1161005b578063eb397fab1461034b578063f7888aec146103b0578063ff3787191461044e57600080fd5b806394149c1a146102ad578063b002249d146102db578063b3df5b36146102f057600080fd5b80637019cda3116100b25780637019cda31461017b57806371c3dbbe14610279578063936e27d61461029a57600080fd5b8063058aa9ba146100d95780631aba3a55146100ee5780632335093c14610130575b600080fd5b6100ec6100e73660046109ff565b610487565b005b6101156100fc3660046109aa565b60046020526000908152604090205464ffffffffff1681565b60405164ffffffffff90911681526020015b60405180910390f35b61016961013e3660046109aa565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b60405160ff9091168152602001610127565b61026c610189366004610aae565b604080517fffffffffffffffffffffffffffffffff00000000000000000000000000000000608089901b1660208201527fffffffffff00000000000000000000000000000000000000000000000000000060d888811b8216603084015287901b1660358201527fffffffff000000000000000000000000000000000000000000000000000000008516603a8201527fff0000000000000000000000000000000000000000000000000000000000000060f885811b8216603e84015284901b16603f8201526060910160405160208183030381529060405290509695505050505050565b6040516101279190610bfd565b61028c610287366004610b54565b6104a0565b604051908152602001610127565b6100ec6102a8366004610a5e565b6104b4565b6040517f8000003c000000000000000000000000000000000000000000000000000000008152602001610127565b6102e36105b1565b6040516101279190610ba3565b6103266102fe366004610b6d565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610127565b61036e610359366004610b54565b608081901c91603082901c9190600882901c90565b604080516fffffffffffffffffffffffffffffffff909516855264ffffffffff909316602085015260ff91821692840192909252166060820152608001610127565b61042d6103be3660046109cc565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260026020908152604080832054939094168252600481528382205464ffffffffff1660289390931b65ff000000000016929092178152600690915220546fffffffffffffffffffffffffffffffff1690565b6040516fffffffffffffffffffffffffffffffff9091168152602001610127565b61032661045c366004610b88565b60ff1660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b61049886866003548686868a610702565b505050505050565b60006104ae826003546108d3565b92915050565b60408051600081526020810180835287905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610507573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146105aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064015b60405180910390fd5b5050505050565b606060015b6101008160ff1610156106695760ff811660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16610657578060ff1660011415610600575090565b61060b600182610c70565b60ff1667ffffffffffffffff81111561062657610626610d11565b60405190808252806020026020018201604052801561064f578160200160208202803683370190505b509150610669565b8061066181610c93565b9150506105b6565b60015b8160ff168160ff1610156106fd5760ff811660009081526001602081905260409091205473ffffffffffffffffffffffffffffffffffffffff169084906106b39084610c70565b60ff16815181106106c6576106c6610ce2565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152806106f581610c93565b91505061066c565b505090565b60006040518060600160405280602b8152602001610d41602b91398051602090910120905073ffffffffffffffffffffffffffffffffffffffff82166107a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016105a1565b6000604051886000526014600c20604052826000528960205260606000206022526019600053600180536002889052604260009081209082526020820160408181529082905260ff8716908301526060820188905260808201879052915060019060a0016020604051602081039080840390855afa15801561082a573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146108c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016105a1565b505050505050505050565b604080518082018252601c81527f53776170526571756573742875696e7432353620656e636f646564290000000060209182015281517f9e30b23744f36fc02f504355e3ffa6d1fda34e5ac9e3c78a1d6e7dffbc9c57266000818152928690529282206022529091906019835360018053836002526042600020925080604052505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461097f57600080fd5b919050565b803564ffffffffff8116811461097f57600080fd5b803560ff8116811461097f57600080fd5b6000602082840312156109bc57600080fd5b6109c58261095b565b9392505050565b600080604083850312156109df57600080fd5b6109e88361095b565b91506109f66020840161095b565b90509250929050565b60008060008060008060c08789031215610a1857600080fd5b86359550610a286020880161095b565b9450610a366040880161095b565b93506060870135925060808701359150610a5260a08801610999565b90509295509295509295565b600080600080600060a08688031215610a7657600080fd5b85359450610a866020870161095b565b93506040860135925060608601359150610aa260808701610999565b90509295509295909350565b60008060008060008060c08789031215610ac757600080fd5b86356fffffffffffffffffffffffffffffffff81168114610ae757600080fd5b9550610af560208801610984565b9450610b0360408801610984565b935060608701357fffffffff0000000000000000000000000000000000000000000000000000000081168114610b3857600080fd5b9250610b4660808801610999565b9150610a5260a08801610999565b600060208284031215610b6657600080fd5b5035919050565b600060208284031215610b7f57600080fd5b6109c582610984565b600060208284031215610b9a57600080fd5b6109c582610999565b6020808252825182820181905260009190848201906040850190845b81811015610bf157835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610bbf565b50909695505050505050565b600060208083528351808285015260005b81811015610c2a57858101830151858201604001528201610c0e565b81811115610c3c576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060ff821660ff841680821015610c8a57610c8a610cb3565b90039392505050565b600060ff821660ff811415610caa57610caa610cb3565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe5377617052656c656173652862797465733332207377617049642c627974657320726563697069656e7429a164736f6c6343000806000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";

type MesonStatesTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonStatesTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonStatesTest__factory extends ContractFactory {
  constructor(...args: MesonStatesTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonStatesTest> {
    return super.deploy(overrides || {}) as Promise<MesonStatesTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonStatesTest {
    return super.attach(address) as MesonStatesTest;
  }
  connect(signer: Signer): MesonStatesTest__factory {
    return super.connect(signer) as MesonStatesTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonStatesTestInterface {
    return new utils.Interface(_abi) as MesonStatesTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonStatesTest {
    return new Contract(address, _abi, signerOrProvider) as MesonStatesTest;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonStatesTest,
  MesonStatesTestInterface,
} from "../MesonStatesTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "metaAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ts",
        type: "uint256",
      },
    ],
    name: "addRecentSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "decreaseSupply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "getRecentSwap",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "id",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "metaAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ts",
            type: "uint256",
          },
        ],
        internalType: "struct MesonHelpers.Swap",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getRecentSwapList",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "_length",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_tail",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_head",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "_items",
            type: "bytes32[]",
          },
        ],
        internalType: "struct List.Bytes32List",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "increaseSupply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "removeExpiredSwaps",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalDemandFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalSupplyFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "metaAmount",
        type: "uint256",
      },
    ],
    name: "updateDemand",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101006040526052608081815290610bc260a039805160209182012060408051808201825260088152674d65736f6e20466960c01b908401528051808201825260018152603160f81b908401528051928301919091527fe127d7b8d403871d7ed6b19024db4422e92aee79823ba78ad61e52ee2a5f9b98908201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152600360808201523060a082015260c001604051602081830303815290604052805190602001206000553480156100d557600080fd5b50604051610c14380380610c148339810160408190526100f4916101e7565b6100fd81610103565b50610217565b6001600160a01b0381166000818152600160208181526040808420805460ff1916841790558051608081018252848152808301858152818301868152606083810181815298885260038087529490972083518155915195820195909555935160028501559451805194959461018093928501929190910190610187565b5050505050565b8280548282559060005260206000209081019282156101c2579160200282015b828111156101c25782518255916020019190600101906101a7565b506101ce9291506101d2565b5090565b5b808211156101ce57600081556001016101d3565b6000602082840312156101f957600080fd5b81516001600160a01b038116811461021057600080fd5b9392505050565b61099c806102266000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806379fcd8ee1161006657806379fcd8ee1461016f5780637d9c0d851461018257806381326dbc14610195578063a7302813146101b5578063a8f81b1a146101c857600080fd5b806315d0975c146100a35780632c89e9ef146100b8578063456081d7146100f257806361565d251461010557806368c4ac261461013c575b600080fd5b6100b66100b1366004610861565b6101f1565b005b6100cb6100c6366004610861565b6101ff565b60408051825181526020808401519082015291810151908201526060015b60405180910390f35b6100b661010036600461083f565b610264565b61012e61011336600461083f565b6001600160a01b031660009081526004602052604090205490565b6040519081526020016100e9565b61015f61014a36600461083f565b60016020526000908152604090205460ff1681565b60405190151581526020016100e9565b6100b661017d366004610861565b610270565b6100b6610190366004610861565b61027a565b6101a86101a336600461083f565b610284565b6040516100e991906108c4565b6100b66101c336600461088b565b610345565b61012e6101d636600461083f565b6001600160a01b031660009081526005602052604090205490565b6101fb82826103f0565b5050565b6040805160608082018352600080835260208084018290529284018190526001600160a01b0386168152600280845284822086835284529084902084519283018552805483526001810154938301939093529190910154918101919091525b92915050565b61026d8161048c565b50565b6101fb82826105a1565b6101fb82826105c4565b6102af6040518060800160405280600081526020016000815260200160008152602001606081525090565b6001600160a01b038216600090815260036020818152604092839020835160808101855281548152600182015481840152600282015481860152928101805485518185028101850190965280865293949193606086019383018282801561033557602002820191906000526020600020905b815481526020019060010190808311610321575b5050505050815250509050919050565b6040805160608101825284815260208082018581528284018581526001600160a01b038916600081815260028086528782208b835286528782208751815594516001860155925193909201929092559081526003909152919091206103aa9085610694565b6001600160a01b0385166000908152600560205260409020546103cd908461073c565b6001600160a01b0390951660009081526005602052604090209490945550505050565b6001600160a01b0382166000908152600460205260409020548111156104495760405162461bcd60e51b815260206004820152600960248201526837bb32b9323930bbb760b91b60448201526064015b60405180910390fd5b6001600160a01b03821660009081526004602052604090205461046c9082610757565b6001600160a01b0390921660009081526004602052604090209190915550565b6001600160a01b03811660009081526003602052604081204291806104b083610772565b915091505b8180156104f557506001600160a01b0385166000908152600260208181526040808420858552909152909120015484906104f3906201518090610934565b105b1561059a576001600160a01b03851660009081526005602090815260408083205460028352818420858552909252909120600101546105349190610757565b6001600160a01b038616600090815260056020526040902055610556836107b8565b50506001600160a01b0385166000908152600260208181526040808420858552909152822082815560018101839055015561059083610772565b90925090506104b5565b5050505050565b6001600160a01b03821660009081526004602052604090205461046c908261073c565b6040805142602082018190526bffffffffffffffffffffffff19606086901b16928201929092526054810183905260009060740160408051601f1981840301815282825280516020918201206060840183528084528382018781528484018781526001600160a01b038a1660008181526002808752878220868352875287822089518155945160018601559251939092019290925590815260039092529190209092506106719083610694565b6001600160a01b0385166000908152600560205260409020546103cd908561073c565b6001808301546106a391610934565b8260010154106106e55760405162461bcd60e51b815260206004820152600d60248201526c6c697374206f766572666c6f7760981b6044820152606401610440565b81546106fa5760018201546002830155610710565b600282015461070a906001610934565b60028301555b600382018054600181810183556000928352602090922001829055825461073691610934565b90915550565b6000826107498382610934565b915081101561025e57600080fd5b600082610764838261094c565b915081111561025e57600080fd5b80546000908190156107ad578260030183600101548154811061079757610797610979565b9060005260206000200154905060019150915091565b506000905080915091565b805460009081906107ce57506000905080915091565b826003018360010154815481106107e7576107e7610979565b90600052602060002001549050826001015460016108059190610934565b600180850191909155835461081a919061094c565b90925550600191565b80356001600160a01b038116811461083a57600080fd5b919050565b60006020828403121561085157600080fd5b61085a82610823565b9392505050565b6000806040838503121561087457600080fd5b61087d83610823565b946020939093013593505050565b600080600080608085870312156108a157600080fd5b6108aa85610823565b966020860135965060408601359560600135945092505050565b6000602080835260a0830184518285015281850151604085015260408501516060850152606085015160808086015281815180845260c0870191508483019350600092505b808310156109295783518252928401926001929092019190840190610909565b509695505050505050565b6000821982111561094757610947610963565b500190565b60008282101561095e5761095e610963565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea164736f6c6343000806000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";

type MesonStatesTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonStatesTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonStatesTest__factory extends ContractFactory {
  constructor(...args: MesonStatesTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonStatesTest> {
    return super.deploy(token, overrides || {}) as Promise<MesonStatesTest>;
  }
  getDeployTransaction(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  attach(address: string): MesonStatesTest {
    return super.attach(address) as MesonStatesTest;
  }
  connect(signer: Signer): MesonStatesTest__factory {
    return super.connect(signer) as MesonStatesTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonStatesTestInterface {
    return new utils.Interface(_abi) as MesonStatesTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonStatesTest {
    return new Contract(address, _abi, signerOrProvider) as MesonStatesTest;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonStatesTest,
  MesonStatesTestInterface,
} from "../MesonStatesTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "index",
        type: "uint8",
      },
    ],
    name: "addSupportToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "checkReleaseSignature",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "checkRequestSignature",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "lockedSwap",
        type: "uint80",
      },
    ],
    name: "decodeLockedSwap",
    outputs: [
      {
        internalType: "uint40",
        name: "poolIndex",
        type: "uint40",
      },
      {
        internalType: "uint256",
        name: "until",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint48",
        name: "poolTokenIndex",
        type: "uint48",
      },
    ],
    name: "decodePoolTokenIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
      {
        internalType: "uint40",
        name: "poolIndex",
        type: "uint40",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint200",
        name: "postedSwap",
        type: "uint200",
      },
    ],
    name: "decodePostedSwap",
    outputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "uint40",
        name: "poolIndex",
        type: "uint40",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedSwap",
        type: "uint256",
      },
      {
        internalType: "uint40",
        name: "poolIndex",
        type: "uint40",
      },
    ],
    name: "decodeSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeForLp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "serviceFee",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "salt",
        type: "uint80",
      },
      {
        internalType: "uint256",
        name: "expireTs",
        type: "uint256",
      },
      {
        internalType: "bytes2",
        name: "inChain",
        type: "bytes2",
      },
      {
        internalType: "uint8",
        name: "inTokenIndex",
        type: "uint8",
      },
      {
        internalType: "bytes2",
        name: "outChain",
        type: "bytes2",
      },
      {
        internalType: "uint8",
        name: "outTokenIndex",
        type: "uint8",
      },
      {
        internalType: "bytes6",
        name: "poolTokenIndexForOutToken",
        type: "bytes6",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint48",
        name: "amount",
        type: "uint48",
      },
      {
        internalType: "uint80",
        name: "salt",
        type: "uint80",
      },
      {
        internalType: "uint40",
        name: "fee",
        type: "uint40",
      },
      {
        internalType: "uint40",
        name: "expireTs",
        type: "uint40",
      },
      {
        internalType: "bytes2",
        name: "outChain",
        type: "bytes2",
      },
      {
        internalType: "uint8",
        name: "outToken",
        type: "uint8",
      },
      {
        internalType: "bytes2",
        name: "inChain",
        type: "bytes2",
      },
      {
        internalType: "uint8",
        name: "inToken",
        type: "uint8",
      },
    ],
    name: "encodeSwap",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getShortCoinType",
    outputs: [
      {
        internalType: "bytes2",
        name: "",
        type: "bytes2",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "indexOfToken",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "until",
        type: "uint256",
      },
      {
        internalType: "uint40",
        name: "poolIndex",
        type: "uint40",
      },
    ],
    name: "lockedSwapFrom",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    name: "ownerOfPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "poolOfAuthorizedAddr",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "poolTokenBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
      {
        internalType: "uint40",
        name: "poolIndex",
        type: "uint40",
      },
    ],
    name: "poolTokenIndexFrom",
    outputs: [
      {
        internalType: "bytes6",
        name: "",
        type: "bytes6",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "serviceFeeCollected",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
    ],
    name: "tokenForIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611898806100206000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c8063a375b474116100b2578063c7e25a5e11610081578063d4f8232211610066578063d4f82322146105b2578063eba7fb77146105c5578063ff378719146105f257600080fd5b8063c7e25a5e14610571578063d3e95ea41461059f57600080fd5b8063a375b474146103b2578063a7d3c6a8146103e2578063b002249d14610518578063b2297a7b1461052d57600080fd5b8063793d1e281161010957806389a734c0116100ee57806389a734c0146102ec5780638ab1bc2a146103475780638b0a77651461037957600080fd5b8063793d1e28146101f85780637fe0282b146102af57600080fd5b80631fdafaf41461013b5780632335093c146101505780634f139480146101a05780636a4881dc146101b3575b600080fd5b61014e610149366004611513565b61062b565b005b61018961015e366004611401565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b60405160ff90911681526020015b60405180910390f35b61014e6101ae3660046114b4565b61063f565b6101c66101c1366004611479565b610655565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835264ffffffffff909116602083015201610197565b61020b610206366004611563565b61067f565b604080519a8b5260208b01999099529789019690965269ffffffffffffffffffff909416606088015260808701929092527fffff00000000000000000000000000000000000000000000000000000000000090811660a087015260ff91821660c087015290911660e0850152166101008301527fffffffffffff00000000000000000000000000000000000000000000000000001661012082015261014001610197565b6102d66102bd366004611401565b60026020526000908152604090205464ffffffffff1681565b60405164ffffffffff9091168152602001610197565b6103226102fa366004611586565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610197565b61035a6103553660046115a1565b610724565b6040805160ff909316835264ffffffffff909116602083015201610197565b6103a4610387366004611653565b60281b65ff00000000001660009081526004602052604090205490565b604051908152602001610197565b6103c56103c036600461166e565b610734565b6040805164ffffffffff9093168352602083019190915201610197565b61050b6103f03660046115bc565b604080517fffffffffffff000000000000000000000000000000000000000000000000000060d08b901b1660208201527fffffffffffffffffffff0000000000000000000000000000000000000000000060b08a901b1660268201527fffffffffff00000000000000000000000000000000000000000000000000000060d889811b8216603084015288901b1660358201527fffff000000000000000000000000000000000000000000000000000000000000808716603a8301527fff0000000000000000000000000000000000000000000000000000000000000060f887811b8216603c850152918616603d8401529084901b16603f82015260609101604051602081830303815290604052905098975050505050505050565b604051610197919061170d565b610520610748565b60405161019791906116b3565b61054061053b366004611689565b610895565b6040517fffffffffffff00000000000000000000000000000000000000000000000000009091168152602001610197565b61058461057f366004611563565b6108b5565b60405169ffffffffffffffffffff9091168152602001610197565b6103a46105ad36600461141c565b6108de565b61014e6105c036600461144f565b61096c565b6040517e3c0000000000000000000000000000000000000000000000000000000000008152602001610197565b610322610600366004611653565b60ff1660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b610638858585858561097a565b5050505050565b61064d868686868686610d48565b505050505050565b600080602883901c73ffffffffffffffffffffffffffffffffffffffff165b9150825b9050915091565b6000806000806000806000806000806106988c60d01c90565b995060588c901c64ffffffffff1698506106b18c611249565b97506106bd8c60801c90565b965060308c901c64ffffffffff1695506106d78c60081c90565b60f01b94508b93506106e98c60201c90565b60f01b92506106f88c60181c90565b915065ff000000000060108d901b1664ffffffffff8c161760d01b90509295989b9194979a5092959850565b600080602883901c60ff16610674565b80600064ffffffffff602883901c16610678565b606060015b6101008160ff1610156108005760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff166107ee578060ff1660011415610797575090565b6107a26001826117bb565b60ff1667ffffffffffffffff8111156107bd576107bd61185c565b6040519080825280602002602001820160405280156107e6578160200160208202803683370190505b509150610800565b806107f8816117de565b91505061074d565b60015b8160ff168160ff1610156108905760ff811660009081526020819052604090205473ffffffffffffffffffffffffffffffffffffffff16836108466001846117bb565b60ff16815181106108595761085961182d565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610888816117de565b915050610803565b505090565b64ffffffffff8116602883901b65ff0000000000161760d01b5b92915050565b60006effffffffffffffffffff0000000000602884901b1664ffffffffff8316175b9392505050565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526001602090815260408083205493851683526002909152812054909160ff169064ffffffffff16801580610930575060ff8216155b15610940576000925050506108af565b64ffffffffff1660289190911b65ff000000000016176000908152600460205260409020549392505050565b610976828261125b565b5050565b73ffffffffffffffffffffffffffffffffffffffff81166109fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064015b60405180910390fd5b79080000000000000000000000000000000000000000000000000085161515600886901c61ffff1660c31415610bdd57600081610a59577f1954524f4e205369676e6564204d6573736167653a0a33320a00000000000000610a7b565b7f1954524f4e205369676e6564204d6573736167653a0a33330a000000000000005b6040517fffffffffffffffffffffffffffffffffffffffffffffffffff000000000000009091166020820152603981018890526059015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201206000845290830180835281905260ff8716918301919091526060820188905260808201879052915060019060a0016020604051602081039080840390855afa158015610b38573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610bd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016109f3565b5050610638565b8015610c1e576040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101879052600090605c01610ab2565b6000868152602080822081527f7b521e60f64ab56ff03ddfb26df49be54b20672b7acfffc1adeb256b554ccb258083526040808420815194855292840180825283905260ff87169084015260608301889052608083018790529160019060a0016020604051602081039080840390855afa158015610ca0573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610d3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016109f3565b5050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116610dc5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5369676e65722063616e6e6f7420626520656d7074792061646472657373000060448201526064016109f3565b79080000000000000000000000000000000000000000000000000086161515600887901c61ffff1660c31415610fd157600081610e22577f1954524f4e205369676e6564204d6573736167653a0a33320a00000000000000610e44565b7f1954524f4e205369676e6564204d6573736167653a0a35330a000000000000005b6040517fffffffffffffffffffffffffffffffffffffffffffffffffff000000000000009091166020820152603981018990527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606089901b166059820152606d01604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201206000845290830180835281905260ff8716918301919091526060820188905260808201879052915060019060a0016020604051602081039080840390855afa158015610f2c573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610fca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016109f3565b505061064d565b600081156110c3576040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000009061103c908a908a9060200191825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905280516020918201207fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000090931690820152603c810191909152605c01604051602081830303815290604052805190602001209050611158565b6110cd8860201c90565b61ffff1660c3141561111e578660155260416020538760005260356000206020527ff6ea10de668a877958d46ed7d53eaf47124fda9bee9423390a28c203556a2e5560005260406000209050611158565b5060148690526000878152603481206020527fd23291d9d999318ac3ed13f43ac8003d6fbd69a4b532aeec9ffad516010a208c8152604090205b60408051600081526020810180835283905260ff861691810191909152606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156111ab573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610d3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016109f3565b60006108af6103e860d084901c611780565b60ff81166112c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616e6e6f7420757365203020617320746f6b656e20696e646578000000000060448201526064016109f3565b73ffffffffffffffffffffffffffffffffffffffff9091166000818152600160209081526040808320805460ff9096167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909616861790559382528190529190912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b803573ffffffffffffffffffffffffffffffffffffffff8116811461137657600080fd5b919050565b80357fffff0000000000000000000000000000000000000000000000000000000000008116811461137657600080fd5b803564ffffffffff8116811461137657600080fd5b803565ffffffffffff8116811461137657600080fd5b803560ff8116811461137657600080fd5b803569ffffffffffffffffffff8116811461137657600080fd5b60006020828403121561141357600080fd5b6108d782611352565b6000806040838503121561142f57600080fd5b61143883611352565b915061144660208401611352565b90509250929050565b6000806040838503121561146257600080fd5b61146b83611352565b9150611446602084016113d6565b60006020828403121561148b57600080fd5b813578ffffffffffffffffffffffffffffffffffffffffffffffffff811681146108d757600080fd5b60008060008060008060c087890312156114cd57600080fd5b863595506114dd60208801611352565b945060408701359350606087013592506114f9608088016113d6565b915061150760a08801611352565b90509295509295509295565b600080600080600060a0868803121561152b57600080fd5b853594506020860135935060408601359250611549606087016113d6565b915061155760808701611352565b90509295509295909350565b6000806040838503121561157657600080fd5b82359150611446602084016113ab565b60006020828403121561159857600080fd5b6108d7826113ab565b6000602082840312156115b357600080fd5b6108d7826113c0565b600080600080600080600080610100898b0312156115d957600080fd5b6115e2896113c0565b97506115f060208a016113e7565b96506115fe60408a016113ab565b955061160c60608a016113ab565b945061161a60808a0161137b565b935061162860a08a016113d6565b925061163660c08a0161137b565b915061164460e08a016113d6565b90509295985092959890939650565b60006020828403121561166557600080fd5b6108d7826113d6565b60006020828403121561168057600080fd5b6108d7826113e7565b6000806040838503121561169c57600080fd5b6116a5836113d6565b9150611446602084016113ab565b6020808252825182820181905260009190848201906040850190845b8181101561170157835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016116cf565b50909695505050505050565b600060208083528351808285015260005b8181101561173a5785810183015185820160400152820161171e565b8181111561174c576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000826117b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060ff821660ff8416808210156117d5576117d56117fe565b90039392505050565b600060ff821660ff8114156117f5576117f56117fe565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea164736f6c6343000806000a";

type MesonStatesTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonStatesTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonStatesTest__factory extends ContractFactory {
  constructor(...args: MesonStatesTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonStatesTest> {
    return super.deploy(overrides || {}) as Promise<MesonStatesTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MesonStatesTest {
    return super.attach(address) as MesonStatesTest;
  }
  connect(signer: Signer): MesonStatesTest__factory {
    return super.connect(signer) as MesonStatesTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonStatesTestInterface {
    return new utils.Interface(_abi) as MesonStatesTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonStatesTest {
    return new Contract(address, _abi, signerOrProvider) as MesonStatesTest;
  }
}

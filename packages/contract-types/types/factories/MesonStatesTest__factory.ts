/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MesonStatesTest,
  MesonStatesTestInterface,
} from "../MesonStatesTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "metaAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ts",
        type: "uint256",
      },
    ],
    name: "addRecentSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "decreaseSupply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentChain",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "getRecentSwap",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "id",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "metaAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ts",
            type: "uint256",
          },
        ],
        internalType: "struct MesonHelpers.Swap",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getRecentSwapList",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "_length",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_tail",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_head",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "_items",
            type: "bytes32[]",
          },
        ],
        internalType: "struct List.Bytes32List",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "increaseSupply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "removeExpiredSwaps",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalDemandFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalSupplyFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "metaAmount",
        type: "uint256",
      },
    ],
    name: "updateDemand",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101006040526052608081815290610bfe60a039805160209182012060408051808201825260088152674d65736f6e20466960c01b90840152805180820182526001808252603160f81b918501919091528151938401929092527fe127d7b8d403871d7ed6b19024db4422e92aee79823ba78ad61e52ee2a5f9b98908301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606083015260808201523060a082015260c001604051602081830303815290604052805190602001206000553480156100d757600080fd5b50604051610c50380380610c508339810160408190526100f6916101e9565b6100ff81610105565b50610219565b6001600160a01b0381166000818152600160208181526040808420805460ff1916841790558051608081018252848152808301858152818301868152606083810181815298885260038087529490972083518155915195820195909555935160028501559451805194959461018293928501929190910190610189565b5050505050565b8280548282559060005260206000209081019282156101c4579160200282015b828111156101c45782518255916020019190600101906101a9565b506101d09291506101d4565b5090565b5b808211156101d057600081556001016101d5565b6000602082840312156101fb57600080fd5b81516001600160a01b038116811461021257600080fd5b9392505050565b6109d6806102286000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806372cbf72e1161007157806372cbf72e1461019457806379fcd8ee146101a95780637d9c0d85146101bc57806381326dbc146101cf578063a7302813146101ef578063a8f81b1a1461020257600080fd5b806315d0975c146100b95780632c89e9ef146100ce5780633408e47014610108578063456081d71461011757806361565d251461012a57806368c4ac2614610161575b600080fd5b6100cc6100c736600461089b565b61022b565b005b6100e16100dc36600461089b565b610239565b60408051825181526020808401519082015291810151908201526060015b60405180910390f35b604051600181526020016100ff565b6100cc610125366004610879565b61029e565b610153610138366004610879565b6001600160a01b031660009081526004602052604090205490565b6040519081526020016100ff565b61018461016f366004610879565b60016020526000908152604090205460ff1681565b60405190151581526020016100ff565b604051632000000f60e21b81526020016100ff565b6100cc6101b736600461089b565b6102aa565b6100cc6101ca36600461089b565b6102b4565b6101e26101dd366004610879565b6102be565b6040516100ff91906108fe565b6100cc6101fd3660046108c5565b61037f565b610153610210366004610879565b6001600160a01b031660009081526005602052604090205490565b610235828261042a565b5050565b6040805160608082018352600080835260208084018290529284018190526001600160a01b0386168152600280845284822086835284529084902084519283018552805483526001810154938301939093529190910154918101919091525b92915050565b6102a7816104c6565b50565b61023582826105db565b61023582826105fe565b6102e96040518060800160405280600081526020016000815260200160008152602001606081525090565b6001600160a01b038216600090815260036020818152604092839020835160808101855281548152600182015481840152600282015481860152928101805485518185028101850190965280865293949193606086019383018282801561036f57602002820191906000526020600020905b81548152602001906001019080831161035b575b5050505050815250509050919050565b6040805160608101825284815260208082018581528284018581526001600160a01b038916600081815260028086528782208b835286528782208751815594516001860155925193909201929092559081526003909152919091206103e490856106ce565b6001600160a01b0385166000908152600560205260409020546104079084610776565b6001600160a01b0390951660009081526005602052604090209490945550505050565b6001600160a01b0382166000908152600460205260409020548111156104835760405162461bcd60e51b815260206004820152600960248201526837bb32b9323930bbb760b91b60448201526064015b60405180910390fd5b6001600160a01b0382166000908152600460205260409020546104a69082610791565b6001600160a01b0390921660009081526004602052604090209190915550565b6001600160a01b03811660009081526003602052604081204291806104ea836107ac565b915091505b81801561052f57506001600160a01b03851660009081526002602081815260408084208585529091529091200154849061052d90620151809061096e565b105b156105d4576001600160a01b038516600090815260056020908152604080832054600283528184208585529092529091206001015461056e9190610791565b6001600160a01b038616600090815260056020526040902055610590836107f2565b50506001600160a01b038516600090815260026020818152604080842085855290915282208281556001810183905501556105ca836107ac565b90925090506104ef565b5050505050565b6001600160a01b0382166000908152600460205260409020546104a69082610776565b6040805142602082018190526bffffffffffffffffffffffff19606086901b16928201929092526054810183905260009060740160408051601f1981840301815282825280516020918201206060840183528084528382018781528484018781526001600160a01b038a1660008181526002808752878220868352875287822089518155945160018601559251939092019290925590815260039092529190209092506106ab90836106ce565b6001600160a01b0385166000908152600560205260409020546104079085610776565b6001808301546106dd9161096e565b82600101541061071f5760405162461bcd60e51b815260206004820152600d60248201526c6c697374206f766572666c6f7760981b604482015260640161047a565b8154610734576001820154600283015561074a565b600282015461074490600161096e565b60028301555b60038201805460018181018355600092835260209092200182905582546107709161096e565b90915550565b600082610783838261096e565b915081101561029857600080fd5b60008261079e8382610986565b915081111561029857600080fd5b80546000908190156107e757826003018360010154815481106107d1576107d16109b3565b9060005260206000200154905060019150915091565b506000905080915091565b8054600090819061080857506000905080915091565b82600301836001015481548110610821576108216109b3565b906000526020600020015490508260010154600161083f919061096e565b60018085019190915583546108549190610986565b90925550600191565b80356001600160a01b038116811461087457600080fd5b919050565b60006020828403121561088b57600080fd5b6108948261085d565b9392505050565b600080604083850312156108ae57600080fd5b6108b78361085d565b946020939093013593505050565b600080600080608085870312156108db57600080fd5b6108e48561085d565b966020860135965060408601359560600135945092505050565b6000602080835260a0830184518285015281850151604085015260408501516060850152606085015160808086015281815180845260c0870191508483019350600092505b808310156109635783518252928401926001929092019190840190610943565b509695505050505050565b600082198211156109815761098161099d565b500190565b6000828210156109985761099861099d565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea164736f6c6343000806000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";

type MesonStatesTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MesonStatesTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MesonStatesTest__factory extends ContractFactory {
  constructor(...args: MesonStatesTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MesonStatesTest> {
    return super.deploy(token, overrides || {}) as Promise<MesonStatesTest>;
  }
  getDeployTransaction(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  attach(address: string): MesonStatesTest {
    return super.attach(address) as MesonStatesTest;
  }
  connect(signer: Signer): MesonStatesTest__factory {
    return super.connect(signer) as MesonStatesTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MesonStatesTestInterface {
    return new utils.Interface(_abi) as MesonStatesTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MesonStatesTest {
    return new Contract(address, _abi, signerOrProvider) as MesonStatesTest;
  }
}

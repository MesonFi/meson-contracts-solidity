/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MesonStatesInterface extends utils.Interface {
  functions: {
    "balanceOf(address,address)": FunctionFragment;
    "getShortCoinType()": FunctionFragment;
    "indexOfToken(address)": FunctionFragment;
    "ownerOfPool(uint40)": FunctionFragment;
    "platformFeeCollected(uint8)": FunctionFragment;
    "poolOfPermissionedAddr(address)": FunctionFragment;
    "supportedTokens()": FunctionFragment;
    "tokenForIndex(uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getShortCoinType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexOfToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOfPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeCollected",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolOfPermissionedAddr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenForIndex",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getShortCoinType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolOfPermissionedAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenForIndex",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MesonStates extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MesonStatesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getShortCoinType(overrides?: CallOverrides): Promise<[string]>;

    indexOfToken(token: string, overrides?: CallOverrides): Promise<[number]>;

    ownerOfPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    platformFeeCollected(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolOfPermissionedAddr(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    supportedTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    tokenForIndex(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  balanceOf(
    token: string,
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getShortCoinType(overrides?: CallOverrides): Promise<string>;

  indexOfToken(token: string, overrides?: CallOverrides): Promise<number>;

  ownerOfPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  platformFeeCollected(
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolOfPermissionedAddr(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  supportedTokens(overrides?: CallOverrides): Promise<string[]>;

  tokenForIndex(
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShortCoinType(overrides?: CallOverrides): Promise<string>;

    indexOfToken(token: string, overrides?: CallOverrides): Promise<number>;

    ownerOfPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    platformFeeCollected(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolOfPermissionedAddr(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    supportedTokens(overrides?: CallOverrides): Promise<string[]>;

    tokenForIndex(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShortCoinType(overrides?: CallOverrides): Promise<BigNumber>;

    indexOfToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    ownerOfPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    platformFeeCollected(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolOfPermissionedAddr(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    tokenForIndex(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShortCoinType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    indexOfToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOfPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    platformFeeCollected(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolOfPermissionedAddr(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenForIndex(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

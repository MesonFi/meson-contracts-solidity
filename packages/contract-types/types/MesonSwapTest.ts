/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MesonSwapTestInterface extends utils.Interface {
  functions: {
    "addTokenToSwapList(address)": FunctionFragment;
    "addressOfIndex(uint32)": FunctionFragment;
    "balanceOf(address,address)": FunctionFragment;
    "bondSwap(bytes32,uint32)": FunctionFragment;
    "cancelSwap(bytes)": FunctionFragment;
    "executeSwap(bytes,bytes32,bytes32,bytes32,uint8,bool)": FunctionFragment;
    "getCoinType()": FunctionFragment;
    "hasSwap(bytes32)": FunctionFragment;
    "indexOfAddress(address)": FunctionFragment;
    "postSwap(bytes,address,bytes32,bytes32,uint8,uint32)": FunctionFragment;
    "registerAddress(uint32)": FunctionFragment;
    "requestSwap(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTokenToSwapList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressOfIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bondSwap",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSwap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwap",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoinType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasSwap", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "indexOfAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "postSwap",
    values: [
      BytesLike,
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSwap",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTokenToSwapList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressOfIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoinType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "indexOfAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSwap",
    data: BytesLike
  ): Result;

  events: {
    "SwapBonded(bytes32)": EventFragment;
    "SwapCancelled(bytes32)": EventFragment;
    "SwapExecuted(bytes32)": EventFragment;
    "SwapPosted(bytes32)": EventFragment;
    "SwapRequested(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SwapBonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapPosted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapRequested"): EventFragment;
}

export type SwapBondedEvent = TypedEvent<[string], { swapId: string }>;

export type SwapBondedEventFilter = TypedEventFilter<SwapBondedEvent>;

export type SwapCancelledEvent = TypedEvent<[string], { swapId: string }>;

export type SwapCancelledEventFilter = TypedEventFilter<SwapCancelledEvent>;

export type SwapExecutedEvent = TypedEvent<[string], { swapId: string }>;

export type SwapExecutedEventFilter = TypedEventFilter<SwapExecutedEvent>;

export type SwapPostedEvent = TypedEvent<[string], { swapId: string }>;

export type SwapPostedEventFilter = TypedEventFilter<SwapPostedEvent>;

export type SwapRequestedEvent = TypedEvent<[string], { swapId: string }>;

export type SwapRequestedEventFilter = TypedEventFilter<SwapRequestedEvent>;

export interface MesonSwapTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MesonSwapTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTokenToSwapList(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressOfIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bondSwap(
      swapId: BytesLike,
      providerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelSwap(
      encodedSwap: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeSwap(
      encodedSwap: BytesLike,
      recipientHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      depositToPool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCoinType(overrides?: CallOverrides): Promise<[string]>;

    hasSwap(swapId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    indexOfAddress(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    postSwap(
      encodedSwap: BytesLike,
      initiator: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      providerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAddress(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestSwap(
      encodedSwap: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addTokenToSwapList(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressOfIndex(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  balanceOf(
    token: string,
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bondSwap(
    swapId: BytesLike,
    providerIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelSwap(
    encodedSwap: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeSwap(
    encodedSwap: BytesLike,
    recipientHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    depositToPool: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCoinType(overrides?: CallOverrides): Promise<string>;

  hasSwap(swapId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  indexOfAddress(arg0: string, overrides?: CallOverrides): Promise<number>;

  postSwap(
    encodedSwap: BytesLike,
    initiator: string,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    providerIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAddress(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestSwap(
    encodedSwap: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTokenToSwapList(token: string, overrides?: CallOverrides): Promise<void>;

    addressOfIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondSwap(
      swapId: BytesLike,
      providerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSwap(
      encodedSwap: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    executeSwap(
      encodedSwap: BytesLike,
      recipientHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      depositToPool: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getCoinType(overrides?: CallOverrides): Promise<string>;

    hasSwap(swapId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    indexOfAddress(arg0: string, overrides?: CallOverrides): Promise<number>;

    postSwap(
      encodedSwap: BytesLike,
      initiator: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      providerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAddress(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestSwap(
      encodedSwap: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SwapBonded(bytes32)"(swapId?: null): SwapBondedEventFilter;
    SwapBonded(swapId?: null): SwapBondedEventFilter;

    "SwapCancelled(bytes32)"(swapId?: null): SwapCancelledEventFilter;
    SwapCancelled(swapId?: null): SwapCancelledEventFilter;

    "SwapExecuted(bytes32)"(swapId?: null): SwapExecutedEventFilter;
    SwapExecuted(swapId?: null): SwapExecutedEventFilter;

    "SwapPosted(bytes32)"(swapId?: null): SwapPostedEventFilter;
    SwapPosted(swapId?: null): SwapPostedEventFilter;

    "SwapRequested(bytes32)"(swapId?: null): SwapRequestedEventFilter;
    SwapRequested(swapId?: null): SwapRequestedEventFilter;
  };

  estimateGas: {
    addTokenToSwapList(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressOfIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondSwap(
      swapId: BytesLike,
      providerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelSwap(
      encodedSwap: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeSwap(
      encodedSwap: BytesLike,
      recipientHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      depositToPool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCoinType(overrides?: CallOverrides): Promise<BigNumber>;

    hasSwap(swapId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    indexOfAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    postSwap(
      encodedSwap: BytesLike,
      initiator: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      providerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAddress(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestSwap(
      encodedSwap: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTokenToSwapList(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressOfIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondSwap(
      swapId: BytesLike,
      providerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelSwap(
      encodedSwap: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeSwap(
      encodedSwap: BytesLike,
      recipientHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      depositToPool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCoinType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasSwap(
      swapId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexOfAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postSwap(
      encodedSwap: BytesLike,
      initiator: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      providerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAddress(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestSwap(
      encodedSwap: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

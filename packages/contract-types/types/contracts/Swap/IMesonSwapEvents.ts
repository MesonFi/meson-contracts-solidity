/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IMesonSwapEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "SwapBonded(uint256)": EventFragment;
    "SwapCancelled(uint256)": EventFragment;
    "SwapPosted(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SwapBonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapPosted"): EventFragment;
}

export interface SwapBondedEventObject {
  encodedSwap: BigNumber;
}
export type SwapBondedEvent = TypedEvent<[BigNumber], SwapBondedEventObject>;

export type SwapBondedEventFilter = TypedEventFilter<SwapBondedEvent>;

export interface SwapCancelledEventObject {
  encodedSwap: BigNumber;
}
export type SwapCancelledEvent = TypedEvent<
  [BigNumber],
  SwapCancelledEventObject
>;

export type SwapCancelledEventFilter = TypedEventFilter<SwapCancelledEvent>;

export interface SwapPostedEventObject {
  encodedSwap: BigNumber;
}
export type SwapPostedEvent = TypedEvent<[BigNumber], SwapPostedEventObject>;

export type SwapPostedEventFilter = TypedEventFilter<SwapPostedEvent>;

export interface IMesonSwapEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMesonSwapEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "SwapBonded(uint256)"(
      encodedSwap?: PromiseOrValue<BigNumberish> | null
    ): SwapBondedEventFilter;
    SwapBonded(
      encodedSwap?: PromiseOrValue<BigNumberish> | null
    ): SwapBondedEventFilter;

    "SwapCancelled(uint256)"(
      encodedSwap?: PromiseOrValue<BigNumberish> | null
    ): SwapCancelledEventFilter;
    SwapCancelled(
      encodedSwap?: PromiseOrValue<BigNumberish> | null
    ): SwapCancelledEventFilter;

    "SwapPosted(uint256)"(
      encodedSwap?: PromiseOrValue<BigNumberish> | null
    ): SwapPostedEventFilter;
    SwapPosted(
      encodedSwap?: PromiseOrValue<BigNumberish> | null
    ): SwapPostedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}

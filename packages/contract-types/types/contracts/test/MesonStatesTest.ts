/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MesonStatesTestInterface extends utils.Interface {
  functions: {
    "addSupportToken(address,uint8)": FunctionFragment;
    "checkReleaseSignature(uint256,address,bytes32,bytes32,uint8,address)": FunctionFragment;
    "checkRequestSignature(uint256,bytes32,bytes32,uint8,address)": FunctionFragment;
    "decodeLockedSwap(uint80)": FunctionFragment;
    "decodePoolTokenIndex(uint48)": FunctionFragment;
    "decodePostedSwap(uint200)": FunctionFragment;
    "decodeSwap(uint256,uint40)": FunctionFragment;
    "encodeSwap(uint48,uint80,uint40,uint40,bytes2,uint8,bytes2,uint8)": FunctionFragment;
    "getShortCoinType()": FunctionFragment;
    "indexOfToken(address)": FunctionFragment;
    "lockedSwapFrom(uint256,uint40)": FunctionFragment;
    "ownerOfPool(uint40)": FunctionFragment;
    "poolOfAuthorizedAddr(address)": FunctionFragment;
    "poolTokenBalance(address,address)": FunctionFragment;
    "poolTokenIndexFrom(uint8,uint40)": FunctionFragment;
    "serviceFeeCollected(uint8)": FunctionFragment;
    "supportedTokens()": FunctionFragment;
    "tokenForIndex(uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSupportToken"
      | "checkReleaseSignature"
      | "checkRequestSignature"
      | "decodeLockedSwap"
      | "decodePoolTokenIndex"
      | "decodePostedSwap"
      | "decodeSwap"
      | "encodeSwap"
      | "getShortCoinType"
      | "indexOfToken"
      | "lockedSwapFrom"
      | "ownerOfPool"
      | "poolOfAuthorizedAddr"
      | "poolTokenBalance"
      | "poolTokenIndexFrom"
      | "serviceFeeCollected"
      | "supportedTokens"
      | "tokenForIndex"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSupportToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkReleaseSignature",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRequestSignature",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeLockedSwap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodePoolTokenIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodePostedSwap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeSwap",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeSwap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getShortCoinType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexOfToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedSwapFrom",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOfPool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolOfAuthorizedAddr",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolTokenBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolTokenIndexFrom",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceFeeCollected",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenForIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSupportToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkReleaseSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRequestSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeLockedSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodePoolTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodePostedSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decodeSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encodeSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getShortCoinType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedSwapFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolOfAuthorizedAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolTokenIndexFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceFeeCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenForIndex",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MesonStatesTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MesonStatesTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSupportToken(
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkReleaseSignature(
      encodedSwap: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkRequestSignature(
      encodedSwap: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    decodeLockedSwap(
      lockedSwap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { poolIndex: number; until: BigNumber }>;

    decodePoolTokenIndex(
      poolTokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { tokenIndex: number; poolIndex: number }>;

    decodePostedSwap(
      postedSwap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { initiator: string; poolIndex: number }>;

    decodeSwap(
      encodedSwap: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        string,
        number,
        string
      ] & {
        amount: BigNumber;
        feeForLp: BigNumber;
        serviceFee: BigNumber;
        salt: BigNumber;
        expireTs: BigNumber;
        inChain: string;
        inTokenIndex: number;
        outChain: string;
        outTokenIndex: number;
        poolTokenIndexForOutToken: string;
      }
    >;

    encodeSwap(
      amount: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      expireTs: PromiseOrValue<BigNumberish>,
      outChain: PromiseOrValue<BytesLike>,
      outToken: PromiseOrValue<BigNumberish>,
      inChain: PromiseOrValue<BytesLike>,
      inToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getShortCoinType(overrides?: CallOverrides): Promise<[string]>;

    indexOfToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    lockedSwapFrom(
      until: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ownerOfPool(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    poolOfAuthorizedAddr(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    poolTokenBalance(
      token: PromiseOrValue<string>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolTokenIndexFrom(
      tokenIndex: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    serviceFeeCollected(
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportedTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    tokenForIndex(
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addSupportToken(
    token: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkReleaseSignature(
    encodedSwap: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    v: PromiseOrValue<BigNumberish>,
    signer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  checkRequestSignature(
    encodedSwap: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    v: PromiseOrValue<BigNumberish>,
    signer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  decodeLockedSwap(
    lockedSwap: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { poolIndex: number; until: BigNumber }>;

  decodePoolTokenIndex(
    poolTokenIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, number] & { tokenIndex: number; poolIndex: number }>;

  decodePostedSwap(
    postedSwap: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, number] & { initiator: string; poolIndex: number }>;

  decodeSwap(
    encodedSwap: PromiseOrValue<BigNumberish>,
    poolIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      number,
      string,
      number,
      string
    ] & {
      amount: BigNumber;
      feeForLp: BigNumber;
      serviceFee: BigNumber;
      salt: BigNumber;
      expireTs: BigNumber;
      inChain: string;
      inTokenIndex: number;
      outChain: string;
      outTokenIndex: number;
      poolTokenIndexForOutToken: string;
    }
  >;

  encodeSwap(
    amount: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    expireTs: PromiseOrValue<BigNumberish>,
    outChain: PromiseOrValue<BytesLike>,
    outToken: PromiseOrValue<BigNumberish>,
    inChain: PromiseOrValue<BytesLike>,
    inToken: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getShortCoinType(overrides?: CallOverrides): Promise<string>;

  indexOfToken(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  lockedSwapFrom(
    until: PromiseOrValue<BigNumberish>,
    poolIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownerOfPool(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  poolOfAuthorizedAddr(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  poolTokenBalance(
    token: PromiseOrValue<string>,
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolTokenIndexFrom(
    tokenIndex: PromiseOrValue<BigNumberish>,
    poolIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  serviceFeeCollected(
    tokenIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportedTokens(overrides?: CallOverrides): Promise<string[]>;

  tokenForIndex(
    tokenIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addSupportToken(
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkReleaseSignature(
      encodedSwap: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkRequestSignature(
      encodedSwap: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    decodeLockedSwap(
      lockedSwap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { poolIndex: number; until: BigNumber }>;

    decodePoolTokenIndex(
      poolTokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { tokenIndex: number; poolIndex: number }>;

    decodePostedSwap(
      postedSwap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { initiator: string; poolIndex: number }>;

    decodeSwap(
      encodedSwap: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        string,
        number,
        string
      ] & {
        amount: BigNumber;
        feeForLp: BigNumber;
        serviceFee: BigNumber;
        salt: BigNumber;
        expireTs: BigNumber;
        inChain: string;
        inTokenIndex: number;
        outChain: string;
        outTokenIndex: number;
        poolTokenIndexForOutToken: string;
      }
    >;

    encodeSwap(
      amount: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      expireTs: PromiseOrValue<BigNumberish>,
      outChain: PromiseOrValue<BytesLike>,
      outToken: PromiseOrValue<BigNumberish>,
      inChain: PromiseOrValue<BytesLike>,
      inToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getShortCoinType(overrides?: CallOverrides): Promise<string>;

    indexOfToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    lockedSwapFrom(
      until: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOfPool(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    poolOfAuthorizedAddr(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    poolTokenBalance(
      token: PromiseOrValue<string>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolTokenIndexFrom(
      tokenIndex: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    serviceFeeCollected(
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedTokens(overrides?: CallOverrides): Promise<string[]>;

    tokenForIndex(
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addSupportToken(
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkReleaseSignature(
      encodedSwap: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRequestSignature(
      encodedSwap: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeLockedSwap(
      lockedSwap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodePoolTokenIndex(
      poolTokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodePostedSwap(
      postedSwap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeSwap(
      encodedSwap: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeSwap(
      amount: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      expireTs: PromiseOrValue<BigNumberish>,
      outChain: PromiseOrValue<BytesLike>,
      outToken: PromiseOrValue<BigNumberish>,
      inChain: PromiseOrValue<BytesLike>,
      inToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShortCoinType(overrides?: CallOverrides): Promise<BigNumber>;

    indexOfToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedSwapFrom(
      until: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOfPool(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolOfAuthorizedAddr(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolTokenBalance(
      token: PromiseOrValue<string>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolTokenIndexFrom(
      tokenIndex: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    serviceFeeCollected(
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    tokenForIndex(
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSupportToken(
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkReleaseSignature(
      encodedSwap: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkRequestSignature(
      encodedSwap: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      v: PromiseOrValue<BigNumberish>,
      signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeLockedSwap(
      lockedSwap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodePoolTokenIndex(
      poolTokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodePostedSwap(
      postedSwap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeSwap(
      encodedSwap: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeSwap(
      amount: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      expireTs: PromiseOrValue<BigNumberish>,
      outChain: PromiseOrValue<BytesLike>,
      outToken: PromiseOrValue<BigNumberish>,
      inChain: PromiseOrValue<BytesLike>,
      inToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShortCoinType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    indexOfToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedSwapFrom(
      until: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOfPool(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolOfAuthorizedAddr(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolTokenBalance(
      token: PromiseOrValue<string>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolTokenIndexFrom(
      tokenIndex: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    serviceFeeCollected(
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenForIndex(
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

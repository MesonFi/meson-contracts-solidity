/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MesonStatesTestInterface extends utils.Interface {
  functions: {
    "addSupportToken(address,uint8)": FunctionFragment;
    "balanceOf(address,address)": FunctionFragment;
    "checkReleaseSignature(uint256,address,bytes32,bytes32,uint8,address)": FunctionFragment;
    "checkRequestSignature(uint256,bytes32,bytes32,uint8,address)": FunctionFragment;
    "decodeLockedSwap(uint80)": FunctionFragment;
    "decodePoolTokenIndex(uint48)": FunctionFragment;
    "decodePostedSwap(uint200)": FunctionFragment;
    "decodeSwap(uint256,uint40)": FunctionFragment;
    "encodeSwap(uint48,uint80,uint40,uint40,bytes2,uint8,bytes2,uint8)": FunctionFragment;
    "getShortCoinType()": FunctionFragment;
    "indexOfToken(address)": FunctionFragment;
    "lockedSwapFrom(uint256,uint40)": FunctionFragment;
    "ownerOfPool(uint40)": FunctionFragment;
    "platformFeeCollected(uint8)": FunctionFragment;
    "poolOfPermissionedAddr(address)": FunctionFragment;
    "poolTokenIndexFrom(uint8,uint40)": FunctionFragment;
    "supportedTokens()": FunctionFragment;
    "tokenForIndex(uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSupportToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkReleaseSignature",
    values: [BigNumberish, string, BytesLike, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRequestSignature",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeLockedSwap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decodePoolTokenIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decodePostedSwap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeSwap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeSwap",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getShortCoinType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexOfToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedSwapFrom",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOfPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeCollected",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolOfPermissionedAddr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolTokenIndexFrom",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenForIndex",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSupportToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkReleaseSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRequestSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeLockedSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodePoolTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodePostedSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decodeSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encodeSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getShortCoinType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedSwapFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolOfPermissionedAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolTokenIndexFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenForIndex",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MesonStatesTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MesonStatesTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSupportToken(
      token: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkReleaseSignature(
      encodedSwap: BigNumberish,
      recipient: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      signer: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkRequestSignature(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      signer: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    decodeLockedSwap(
      lockedSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { poolIndex: number; until: BigNumber }>;

    decodePoolTokenIndex(
      poolTokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { tokenIndex: number; poolIndex: number }>;

    decodePostedSwap(
      postedSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { initiator: string; poolIndex: number }>;

    decodeSwap(
      encodedSwap: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        string,
        number,
        string,
        string
      ] & {
        amount: BigNumber;
        feeForLp: BigNumber;
        platformFee: BigNumber;
        salt: BigNumber;
        expireTs: BigNumber;
        inChain: string;
        inTokenIndex: number;
        outChain: string;
        outTokenIndex: number;
        poolTokenIndexForPool0: string;
        poolTokenIndexForOutToken: string;
      }
    >;

    encodeSwap(
      amount: BigNumberish,
      salt: BigNumberish,
      fee: BigNumberish,
      expireTs: BigNumberish,
      outChain: BytesLike,
      outToken: BigNumberish,
      inChain: BytesLike,
      inToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getShortCoinType(overrides?: CallOverrides): Promise<[string]>;

    indexOfToken(token: string, overrides?: CallOverrides): Promise<[number]>;

    lockedSwapFrom(
      until: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ownerOfPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    platformFeeCollected(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolOfPermissionedAddr(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    poolTokenIndexFrom(
      tokenIndex: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportedTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    tokenForIndex(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addSupportToken(
    token: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    token: string,
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkReleaseSignature(
    encodedSwap: BigNumberish,
    recipient: string,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    signer: string,
    overrides?: CallOverrides
  ): Promise<void>;

  checkRequestSignature(
    encodedSwap: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    signer: string,
    overrides?: CallOverrides
  ): Promise<void>;

  decodeLockedSwap(
    lockedSwap: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { poolIndex: number; until: BigNumber }>;

  decodePoolTokenIndex(
    poolTokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number] & { tokenIndex: number; poolIndex: number }>;

  decodePostedSwap(
    postedSwap: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, number] & { initiator: string; poolIndex: number }>;

  decodeSwap(
    encodedSwap: BigNumberish,
    poolIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      number,
      string,
      number,
      string,
      string
    ] & {
      amount: BigNumber;
      feeForLp: BigNumber;
      platformFee: BigNumber;
      salt: BigNumber;
      expireTs: BigNumber;
      inChain: string;
      inTokenIndex: number;
      outChain: string;
      outTokenIndex: number;
      poolTokenIndexForPool0: string;
      poolTokenIndexForOutToken: string;
    }
  >;

  encodeSwap(
    amount: BigNumberish,
    salt: BigNumberish,
    fee: BigNumberish,
    expireTs: BigNumberish,
    outChain: BytesLike,
    outToken: BigNumberish,
    inChain: BytesLike,
    inToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getShortCoinType(overrides?: CallOverrides): Promise<string>;

  indexOfToken(token: string, overrides?: CallOverrides): Promise<number>;

  lockedSwapFrom(
    until: BigNumberish,
    poolIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownerOfPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  platformFeeCollected(
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolOfPermissionedAddr(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  poolTokenIndexFrom(
    tokenIndex: BigNumberish,
    poolIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  supportedTokens(overrides?: CallOverrides): Promise<string[]>;

  tokenForIndex(
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addSupportToken(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkReleaseSignature(
      encodedSwap: BigNumberish,
      recipient: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkRequestSignature(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    decodeLockedSwap(
      lockedSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { poolIndex: number; until: BigNumber }>;

    decodePoolTokenIndex(
      poolTokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { tokenIndex: number; poolIndex: number }>;

    decodePostedSwap(
      postedSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { initiator: string; poolIndex: number }>;

    decodeSwap(
      encodedSwap: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        string,
        number,
        string,
        string
      ] & {
        amount: BigNumber;
        feeForLp: BigNumber;
        platformFee: BigNumber;
        salt: BigNumber;
        expireTs: BigNumber;
        inChain: string;
        inTokenIndex: number;
        outChain: string;
        outTokenIndex: number;
        poolTokenIndexForPool0: string;
        poolTokenIndexForOutToken: string;
      }
    >;

    encodeSwap(
      amount: BigNumberish,
      salt: BigNumberish,
      fee: BigNumberish,
      expireTs: BigNumberish,
      outChain: BytesLike,
      outToken: BigNumberish,
      inChain: BytesLike,
      inToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getShortCoinType(overrides?: CallOverrides): Promise<string>;

    indexOfToken(token: string, overrides?: CallOverrides): Promise<number>;

    lockedSwapFrom(
      until: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOfPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    platformFeeCollected(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolOfPermissionedAddr(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    poolTokenIndexFrom(
      tokenIndex: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    supportedTokens(overrides?: CallOverrides): Promise<string[]>;

    tokenForIndex(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addSupportToken(
      token: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkReleaseSignature(
      encodedSwap: BigNumberish,
      recipient: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRequestSignature(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeLockedSwap(
      lockedSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodePoolTokenIndex(
      poolTokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodePostedSwap(
      postedSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeSwap(
      encodedSwap: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeSwap(
      amount: BigNumberish,
      salt: BigNumberish,
      fee: BigNumberish,
      expireTs: BigNumberish,
      outChain: BytesLike,
      outToken: BigNumberish,
      inChain: BytesLike,
      inToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShortCoinType(overrides?: CallOverrides): Promise<BigNumber>;

    indexOfToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockedSwapFrom(
      until: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOfPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    platformFeeCollected(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolOfPermissionedAddr(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolTokenIndexFrom(
      tokenIndex: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    tokenForIndex(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSupportToken(
      token: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkReleaseSignature(
      encodedSwap: BigNumberish,
      recipient: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkRequestSignature(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeLockedSwap(
      lockedSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodePoolTokenIndex(
      poolTokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodePostedSwap(
      postedSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeSwap(
      encodedSwap: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeSwap(
      amount: BigNumberish,
      salt: BigNumberish,
      fee: BigNumberish,
      expireTs: BigNumberish,
      outChain: BytesLike,
      outToken: BigNumberish,
      inChain: BytesLike,
      inToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShortCoinType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    indexOfToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedSwapFrom(
      until: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOfPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    platformFeeCollected(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolOfPermissionedAddr(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolTokenIndexFrom(
      tokenIndex: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenForIndex(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

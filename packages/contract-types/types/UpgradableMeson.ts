/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface UpgradableMesonInterface extends utils.Interface {
  functions: {
    "balanceOf(address,address)": FunctionFragment;
    "bondSwap(uint256,uint40)": FunctionFragment;
    "cancelSwap(uint256)": FunctionFragment;
    "deposit(uint256,uint48)": FunctionFragment;
    "depositAndRegister(uint256,uint48)": FunctionFragment;
    "executeSwap(uint256,bytes32,bytes32,uint8,address,bool)": FunctionFragment;
    "getLockedSwap(uint256,address)": FunctionFragment;
    "getPostedSwap(uint256)": FunctionFragment;
    "getShortCoinType()": FunctionFragment;
    "indexOfToken(address)": FunctionFragment;
    "initialize(address[])": FunctionFragment;
    "lock(uint256,bytes32,bytes32,uint8,address)": FunctionFragment;
    "ownerOfPool(uint40)": FunctionFragment;
    "platformFeeCollected(uint8)": FunctionFragment;
    "poolOfPermissionedAddr(address)": FunctionFragment;
    "postSwap(uint256,bytes32,bytes32,uint8,uint200)": FunctionFragment;
    "release(uint256,bytes32,bytes32,uint8,address,address)": FunctionFragment;
    "supportedTokens()": FunctionFragment;
    "tokenForIndex(uint8)": FunctionFragment;
    "unlock(uint256,address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdraw(uint256,uint48)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bondSwap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSwap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndRegister",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwap",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedSwap",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPostedSwap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getShortCoinType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexOfToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOfPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeCollected",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolOfPermissionedAddr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "postSwap",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenForIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPostedSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShortCoinType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolOfPermissionedAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenForIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "SwapBonded(uint256)": EventFragment;
    "SwapCancelled(uint256)": EventFragment;
    "SwapLocked(uint256)": EventFragment;
    "SwapPosted(uint256)": EventFragment;
    "SwapReleased(uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapBonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapPosted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type SwapBondedEvent = TypedEvent<
  [BigNumber],
  { encodedSwap: BigNumber }
>;

export type SwapBondedEventFilter = TypedEventFilter<SwapBondedEvent>;

export type SwapCancelledEvent = TypedEvent<
  [BigNumber],
  { encodedSwap: BigNumber }
>;

export type SwapCancelledEventFilter = TypedEventFilter<SwapCancelledEvent>;

export type SwapLockedEvent = TypedEvent<
  [BigNumber],
  { encodedSwap: BigNumber }
>;

export type SwapLockedEventFilter = TypedEventFilter<SwapLockedEvent>;

export type SwapPostedEvent = TypedEvent<
  [BigNumber],
  { encodedSwap: BigNumber }
>;

export type SwapPostedEventFilter = TypedEventFilter<SwapPostedEvent>;

export type SwapReleasedEvent = TypedEvent<
  [BigNumber],
  { encodedSwap: BigNumber }
>;

export type SwapReleasedEventFilter = TypedEventFilter<SwapReleasedEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface UpgradableMeson extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UpgradableMesonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bondSwap(
      encodedSwap: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelSwap(
      encodedSwap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      poolTokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAndRegister(
      amount: BigNumberish,
      poolTokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeSwap(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      recipient: string,
      depositToPool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLockedSwap(
      encodedSwap: BigNumberish,
      initiator: string,
      overrides?: CallOverrides
    ): Promise<[string, number] & { provider: string; until: number }>;

    getPostedSwap(
      encodedSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        initiator: string;
        provider: string;
        executed: boolean;
      }
    >;

    getShortCoinType(overrides?: CallOverrides): Promise<[string]>;

    indexOfToken(token: string, overrides?: CallOverrides): Promise<[number]>;

    initialize(
      supportedTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lock(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      initiator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerOfPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    platformFeeCollected(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolOfPermissionedAddr(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    postSwap(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      postingValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    release(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      initiator: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportedTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    tokenForIndex(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    unlock(
      encodedSwap: BigNumberish,
      initiator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      poolTokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    token: string,
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bondSwap(
    encodedSwap: BigNumberish,
    poolIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelSwap(
    encodedSwap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    poolTokenIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAndRegister(
    amount: BigNumberish,
    poolTokenIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeSwap(
    encodedSwap: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    recipient: string,
    depositToPool: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLockedSwap(
    encodedSwap: BigNumberish,
    initiator: string,
    overrides?: CallOverrides
  ): Promise<[string, number] & { provider: string; until: number }>;

  getPostedSwap(
    encodedSwap: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & {
      initiator: string;
      provider: string;
      executed: boolean;
    }
  >;

  getShortCoinType(overrides?: CallOverrides): Promise<string>;

  indexOfToken(token: string, overrides?: CallOverrides): Promise<number>;

  initialize(
    supportedTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lock(
    encodedSwap: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    initiator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerOfPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  platformFeeCollected(
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolOfPermissionedAddr(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  postSwap(
    encodedSwap: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    postingValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  release(
    encodedSwap: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    initiator: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportedTokens(overrides?: CallOverrides): Promise<string[]>;

  tokenForIndex(
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  unlock(
    encodedSwap: BigNumberish,
    initiator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    poolTokenIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondSwap(
      encodedSwap: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSwap(
      encodedSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      amount: BigNumberish,
      poolTokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndRegister(
      amount: BigNumberish,
      poolTokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeSwap(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      recipient: string,
      depositToPool: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getLockedSwap(
      encodedSwap: BigNumberish,
      initiator: string,
      overrides?: CallOverrides
    ): Promise<[string, number] & { provider: string; until: number }>;

    getPostedSwap(
      encodedSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        initiator: string;
        provider: string;
        executed: boolean;
      }
    >;

    getShortCoinType(overrides?: CallOverrides): Promise<string>;

    indexOfToken(token: string, overrides?: CallOverrides): Promise<number>;

    initialize(
      supportedTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    lock(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      initiator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerOfPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    platformFeeCollected(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolOfPermissionedAddr(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    postSwap(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      postingValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    release(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      initiator: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedTokens(overrides?: CallOverrides): Promise<string[]>;

    tokenForIndex(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    unlock(
      encodedSwap: BigNumberish,
      initiator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: BigNumberish,
      poolTokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "SwapBonded(uint256)"(
      encodedSwap?: BigNumberish | null
    ): SwapBondedEventFilter;
    SwapBonded(encodedSwap?: BigNumberish | null): SwapBondedEventFilter;

    "SwapCancelled(uint256)"(
      encodedSwap?: BigNumberish | null
    ): SwapCancelledEventFilter;
    SwapCancelled(encodedSwap?: BigNumberish | null): SwapCancelledEventFilter;

    "SwapLocked(uint256)"(
      encodedSwap?: BigNumberish | null
    ): SwapLockedEventFilter;
    SwapLocked(encodedSwap?: BigNumberish | null): SwapLockedEventFilter;

    "SwapPosted(uint256)"(
      encodedSwap?: BigNumberish | null
    ): SwapPostedEventFilter;
    SwapPosted(encodedSwap?: BigNumberish | null): SwapPostedEventFilter;

    "SwapReleased(uint256)"(
      encodedSwap?: BigNumberish | null
    ): SwapReleasedEventFilter;
    SwapReleased(encodedSwap?: BigNumberish | null): SwapReleasedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondSwap(
      encodedSwap: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelSwap(
      encodedSwap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      poolTokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAndRegister(
      amount: BigNumberish,
      poolTokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeSwap(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      recipient: string,
      depositToPool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLockedSwap(
      encodedSwap: BigNumberish,
      initiator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPostedSwap(
      encodedSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShortCoinType(overrides?: CallOverrides): Promise<BigNumber>;

    indexOfToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      supportedTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lock(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      initiator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerOfPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    platformFeeCollected(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolOfPermissionedAddr(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postSwap(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      postingValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    release(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      initiator: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    tokenForIndex(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlock(
      encodedSwap: BigNumberish,
      initiator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      poolTokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      token: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondSwap(
      encodedSwap: BigNumberish,
      poolIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelSwap(
      encodedSwap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      poolTokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAndRegister(
      amount: BigNumberish,
      poolTokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeSwap(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      recipient: string,
      depositToPool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLockedSwap(
      encodedSwap: BigNumberish,
      initiator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPostedSwap(
      encodedSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShortCoinType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    indexOfToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      supportedTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lock(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      initiator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerOfPool(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    platformFeeCollected(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolOfPermissionedAddr(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postSwap(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      postingValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    release(
      encodedSwap: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      initiator: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenForIndex(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlock(
      encodedSwap: BigNumberish,
      initiator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      poolTokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
